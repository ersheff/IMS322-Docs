{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"IMS322 Docs","text":""},{"location":"#welcome","title":"Welcome","text":"<p>This site contains a collection of instructions, tips, and examples for use in IMS322 with Dr. Eric Sheffield.</p> <p>Directory</p> <ul> <li>Setup: Instructions for installing and configuring the applications and tools needed to complete coursework.</li> <li>Style Guide: Specifications for how to write code and design layouts.</li> <li>CSS: A collection of new CSS topics that will be covered in this class.</li> <li>JavaScript: An introduction to JavaScript and collection of topics that will be covered in this class.</li> <li>Reference: A collection of miscellaneous resources to review throughout the semester.</li> </ul>"},{"location":"setup/","title":"Setup","text":"<p>The sections on this page will lead you through the process of setting up the applications and accounts needed to complete IMS322 coursework. It is recommended that you follow the steps below in the order listed:</p> <ol> <li>Install Git.</li> <li>Create a GitHub account (if needed).</li> <li>Log in to CodePen, enable Format on Save and Autocomplete in account settings, and create your first Pen.</li> <li>Install additional browsers as needed.</li> <li>Install VS Code and configure extensions and settings.</li> <li>Review coding assignment procedures.</li> </ol>"},{"location":"setup/#git","title":"Git","text":"<p>Git is a \"version control system\" that helps track and manage changes in files. While Git itself is very powerful, we will only be using it through the Source Control panel in VS Code.</p> Activity Bar: Source Control panel"},{"location":"setup/#mac","title":"Mac","text":"<p>Mac users should use the Homebrew installation option:</p> <ol> <li>Install Homebrew.</li> <li>Run <code>brew install git</code> in Terminal. If you are prompted to install the Xcode \"command line developer tools\", click Install. This will take a while, so make sure you are on a fast Wi-Fi network.</li> </ol>"},{"location":"setup/#windows","title":"Windows","text":"<p>Windows users should use the 64-bit Git for Windows Setup under Standalone Installer.</p>"},{"location":"setup/#linux","title":"Linux","text":"<p>If you're using Linux, you probably don't need help installing Git! Follow the instructions here.</p>"},{"location":"setup/#github","title":"GitHub","text":"<p>GitHub is a platform for creating, storing, and managing code. It relies on Git to commit and sync changes between files stored locally on your computer (the ones that you'll be editing in VS Code) and online repositories. In this class, we will be using GitHub to manage all major assignments and projects.</p> <ol> <li>Create a GitHub account (if you don't already have one).</li> <li>In the upper-right corner of any page on GitHub, click your profile photo, then click Settings.</li> <li>In the Access section of the sidebar, click Password and authentication.</li> <li>In the Two-factor authentication section of the page, click Enable two-factor authentication.</li> <li>STOP! DO NOT SCAN THE QR CODE USING YOUR REGULAR CAMERA APP!</li> <li>Open Duo Mobile and click Add +, then choose Use QR Code to scan the QR code. You may use a different 2FA app if you have a preferred alternative.</li> <li>Complete the rest of the Two-Factor Authentication setup as directed.</li> <li>Register for GitHub Student Benefits (this will give you access to the GitHub Copilot AI assistant within VS Code). FYI - there is a document in myMiami called \"Enrollment Verification\" that seems to work for this.</li> <li>Once your student benefits have been approved, log in to GitHub and click on your profile icon. Choose Your Copilot from the menu to claim Copilot access.</li> </ol>"},{"location":"setup/#codepen","title":"CodePen","text":"<p>CodePen is a popular online code editor focused on creating and sharing snippets of HTML, CSS, and JavaScript. The embedded code examples throughout the IMS322 Docs site have been created using CodePen. One of the main reasons that we use CodePen for this class is because it allows you to edit embedded examples right on the page and see live results - try it out below! We will also regularly use CodePen instead of VS Code for smaller assignments, like weekly practice and in-class exercises.</p> <p>There are a few important things to note about CodePen and how it differs from the VS Code and GitHub workflow:</p> <ul> <li>You should log in to CodePen using your GitHub username and password. There is no actual connection between CodePen and GitHub; it simply uses the same account credentials.</li> <li>A project on CodePen is called a \"Pen.\" By default, a Pen includes HTML, CSS, and JavaScript editors, as well as a live preview.</li> <li>Make sure that the Format On Save and Autocomplete options are checked in your account settings (found in the Editor Preferences section).</li> <li>The simplified HTML editor should not have a <code>&lt;head&gt;</code> element or <code>&lt;body&gt;</code> tags. You should start your HTML content from the first tag that would normally go after the opening <code>&lt;body&gt;</code> tag, like a <code>&lt;header&gt;</code> or <code>&lt;h1&gt;</code> element.</li> <li>There is no file hosting provided with free CodePen accounts. When you want to include images in CodePen assignments, you will need to use a URL instead of a file name for the <code>src</code> attribute of the <code>&lt;img&gt;</code> element. Generally, the content of images in CodePen-based assignments is not important, so a random image hosting service like Lorem Picsum will suffice.</li> </ul> <p> See the Pen    Embed Example (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"setup/#browsers","title":"Browsers","text":"<p>Although there are many different modern web browsers, there are essentially only three different browser engines currently in use. A browser engine is the software component under the hood that handles document layout, rendering, and security.</p> <ul> <li>WebKit is maintained by Apple and used for the desktop and mobile versions of Safari, which is the default browser on Apple devices.</li> <li>Blink is maintained by Google and powers all Chromium-based browsers, which include Google Chrome, Microsoft Edge, Brave, Opera GX, and others.</li> <li>Gecko is maintained by Mozilla and used for Firefox.</li> </ul> <p>You should have both Firefox and at least one Chromium-based browser installed on your laptop for this class. It is also recommended that you set one of these as the Live Server Custom Browser during VS Code configuration (instructions provided below).</p>"},{"location":"setup/#vs-code","title":"VS Code","text":"<p>Visual Studio Code (aka VS Code) is the code editor that we will be using for all major assignments in this class. After installing the VS Code application, follow the instructions below to configure extensions and settings.</p>"},{"location":"setup/#extensions","title":"Extensions","text":"<p>We will be using a small collection of VS Code extensions to assist with formatting and development. Search for the following extensions in the Extensions panel to install them:</p> <ul> <li>GitHub Copilot and Copilot Chat AI code assistant (published by GitHub, requires GitHub Student Benefits activation)</li> <li>JS-Beautify for VS Code for HTML formatting (published by VSCE Toolroom)</li> <li>Prettier for CSS and JavaScript formatting (published by Prettier)</li> <li>Live Server for quick and easy browser previews (published by Ritwick Dey)</li> <li>Live Share for collaborative coding (published by Microsoft)</li> </ul> Activity Bar: Extensions panel"},{"location":"setup/#git-setup-and-github-login","title":"Git Setup and GitHub Login","text":"<p>Make sure that Git has finished installing before completing these steps.</p> <ol> <li>In VS Code, click on the Terminal menu and choose New Terminal.</li> <li>In the Terminal panel, run the two commands provided below, one at a time, inserting your own GitHub username and email where indicated (you will not see a confirmation message).</li> <li>Click the Accounts icon in the lower-left corner and sign in using your GitHub account.</li> </ol> <pre><code>git config --global user.name \"your_username\"\n</code></pre> <pre><code>git config --global user.email your@email.com\n</code></pre> Activity Bar: Accounts"},{"location":"setup/#editor-settings","title":"Editor Settings","text":"<ol> <li>Click on the gear icon in the lower-left and choose Settings. Search for Live Server Custom Browser and choose your preferred browser from the dropdown menu (Firefox or Chromium-based). This is the browser that will open automatically whenever you run the Live Server extension.</li> <li>Right-click the Activity Bar on the left side of the window. Uncheck Run and Debug. Ensure that only Explorer, Search, Source Control, Extensions, Live Share, and Accounts are checked.</li> <li>There are a few other settings that will be automatically managed for you by a hidden file in project templates in the future. This primarily enables autoformatting for the plugins that you previously installed.</li> </ol>"},{"location":"setup/#assignment-procedures","title":"Assignment Procedures","text":"<p>Throughout the semester, coursework will be assigned using both CodePen and VS Code with GitHub. Some specific instructions and details in the Canvas assignment descriptions may differ on a case-by-case basis, but the general workflow for both platforms is outlined below.</p>"},{"location":"setup/#accepting-codepen-assignments","title":"Accepting CodePen Assignments","text":"<ol> <li>If the Canvas assignment instructions point to an embedded example Pen, click Edit On CodePen, then create a copy of it in your account by clicking the Fork button in the lower-right corner of the editor window. Otherwise, create a new empty Pen.</li> <li>Change the Pen name to the name provided in the Canvas assignment and click Save. If you need to find this Pen again later, it will be in Your Work.</li> </ol> Edit On CodePen CodePen: Fork"},{"location":"setup/#submitting-codepen-assignments","title":"Submitting CodePen Assignments","text":"<ol> <li>Click the Save button in the upper-right corner of the CodePen window.</li> <li>Click Share in the bottom-right corner and select Copy Link.</li> <li>Paste the copied link in the Website URL field of the corresponding Canvas assignment and click Submit Assignment.</li> </ol> CodePen: Save and Share"},{"location":"setup/#accepting-and-cloning-vs-code-assignments","title":"Accepting and Cloning VS Code Assignments","text":"<p>The first time you accept a VS Code assignment through GitHub Classroom, you will be asked to link your GitHub account to your name.</p> <ol> <li>Click the link in the corresponding Canvas assignment to accept the assignment on GitHub Classroom. Once your new repository is generated, it should be visible in your Top Repositories on GitHub. You can also find it in the the IMS322-Sheffield-S25 organization repositories by clicking your profile photo, then clicking Your organizations.</li> <li>Open VS Code. If an existing folder is already open, close it by going to the File menu and choosing Close Folder.</li> <li>Open the Source Control panel and click the Clone Repository button. Copy-paste the URL from your repository into the text field. You will be prompted for a location on your computer to save this folder.</li> <li>To open this folder in the future, go to the File menu and choose Open Folder...</li> </ol> Source Control: Clone Repository"},{"location":"setup/#working-with-vs-code-assignments","title":"Working With VS Code Assignments","text":"<ul> <li>Folders are very important when working in VS Code. You should always check the top of the Explorer panel to make sure that you are working within the desired assignment folder. The primary open folder acts as the \"root\" of your workspace where you will find your HTML, CSS, and JavaScript files, as well as any subfolders (e.g., for images).</li> <li>To preview your code in the browser, click the Go Live button in the bottom-right corner of the window (which is part of the Status Bar). This will use the Live Server extension to launch your project in your preferred browser. If you accidentally lose your browser preview window, you can reopen the browser and navigate to <code>http://127.0.0.1:5500/</code> (replacing the last 4 digits with whatever port number appears in the Status Bar while the extension is running). Alternatively, you can click on the port number in the Status Bar to close the extension and relaunch it by clicking Go Live again.</li> </ul> Status Bar: Go Live Status Bar: Port # <ul> <li> <p>Some assignments in VS Code will have 2 stages: a draft followed by a final submission. We will manage these stages by using different \"branches\" on GitHub. This approach allows you to submit the assignment multiple times without needing to create multiple repositories.</p> <ul> <li>By default, each GitHub repository is created with a \"main\" branch. This includes all assignment instructions and template files and will be the only branch where you write code.</li> <li>When you are ready to submit a draft, you will create a \"draft\" branch on GitHub. To do this, locate your repository on GitHub and click on the branch dropdown. Then, enter the word \"draft\" and click \"Create branch draft from main\".</li> </ul> </li> </ul> Branch Dropdown"},{"location":"setup/#autograding","title":"Autograding","text":"<p>Assignments managed through GitHub will be run through an autograding process when they are committed and synced with \"autograde\" or \"finished\" as the commit message.</p> <p>The criteria checked during this process can be found on the Style Guide page.</p> <p>To review autograding results:</p> <ol> <li>Navigate to your assignment repository on GitHub.</li> <li>Click on the Actions tab at the top of the repository page, then select IMS322 Autograder in the left column.</li> <li>Select the most recent completed workflow at the top of the list. It will have either a blue checkmark or a red X, along with the name of the commit message you used.</li> <li>Click on the workflow under Jobs to view the details.</li> <li>On the details page, you can see the status of each grading step and the points awarded out of 12. You may need to expand the \"Autograding\" section and scroll to the bottom. Look for <code>--- AUTOGRADING RESULTS ---</code>.</li> </ol> <p>If you would like to fix errors identified by the autograding logs, you may commit and sync changes as many times as needed before the assignment due date.</p>"},{"location":"setup/#committing-and-submitting-vs-code-assignments","title":"Committing and Submitting VS Code Assignments","text":"<p>It is recommended that you Stage and Commit after each major change (steps 1-3) and Sync often (step 4), even before you are finished.</p> <ol> <li>Open the Source Control panel in VS Code.</li> <li>Stage all changes by clicking the + next to Changes.</li> <li>Enter a commit message and click the Commit button (use \"autograde\" if you want to run the autograding process and \"finished\" for your final commit).</li> <li>The Commit button should change to a Sync Changes button. Click this to finish syncing the latest changes to your online GitHub repository.</li> <li>Find your repository on GitHub.</li> <li>Draft only: Click on the branch dropdown and enter \"draft\" to create a new draft branch from the main branch.</li> <li>Go to the Settings tab within the repository and navigate to the Pages section.</li> <li>Under Branch, select the appropriate branch to publish (draft or main) and click Save.</li> <li>After a few moments, if you refresh the page, there should now be a URL near the top next to a Visit Site button. If you click this button, you should see your site open in a new window.</li> <li>Copy the URL generated by GitHub Pages, paste it in the Website URL field of the corresponding Canvas assignment, and click Submit Assignment.</li> </ol> Source Control: Stage and Commit changes"},{"location":"setup/#setup-checklist","title":"Setup Checklist","text":"<ul> <li> I have installed Git (not GitHub Desktop).</li> <li> I have created my GitHub account and enabled Two-Factor Authentication using Duo Mobile (or my preferred 2FA app).</li> <li> My GitHub Student Benefits are active, and I have claimed Github Copilot access.</li> <li> I have enabled the Format On Save and Autocomplete options in my CodePen account settings.</li> <li> I have both Chrome (or another Chromium-based browser) and Firefox installed.</li> <li> I have installed VS Code.</li> <li> <p> I have installed the required VS Code extensions.</p> <ul> <li> GitHub Copilot and Copilot Chat (published by GitHub)</li> <li> JS-Beautify for VS Code (published by VSCE Toolroom)</li> <li> Prettier (published by Prettier)</li> <li> Live Server (published by Ritwick Dey)</li> <li> Live Share (published by Microsoft)</li> </ul> </li> <li> <p> I have run the <code>git config</code> commands in the Terminal in VS Code.</p> </li> <li> I have signed VS Code into my GitHub account.</li> <li> I have selected my Live Server Custom Browser in settings.</li> <li> I have ensured that Explorer, Search, Source Control, Extensions, Live Share, and Accounts are all visible in the Activity Bar.</li> </ul>"},{"location":"style-guide/","title":"Style Guide","text":"<p>The IMS322 Style Guide was designed to help you write well-organized code that is easier to read, edit, and troubleshoot for functional and responsive designs. Although it includes many widely adopted conventions, it is by no means intended to be the universal \"best\" or \"correct\" approach. After taking this class, you may consider other styles based on personal preference or professional expectations. However, keep in mind that much of the criteria below directly impacts your assignment grades.</p> <p>This page is divided into 3 sections:</p> <ul> <li> <p>Autograded Requirements: The requirements in this section will be autograded by GitHub Actions after syncing your repository with \"autograde\" or \"finished\" as the commit message. You can read more about how to initiate this process and review the results on the Setup page.</p> </li> <li> <p>Manually Graded Requirements: The requirements in this section will be reviewed by the instructor after submission and graded using the assignment rubric in Canvas.</p> </li> <li> <p>Other Suggestions: This section includes other miscellaneous style suggestions. While they do not directly affect your assignment grades, implementing these suggestions may help improve your results.</p> </li> </ul>"},{"location":"style-guide/#autograded-requirements","title":"Autograded Requirements","text":""},{"location":"style-guide/#default-files","title":"Default Files","text":"<p>Every assignment should start with the following three files:</p> <ul> <li><code>index.html</code></li> <li><code>styles.css</code></li> <li><code>script.js</code></li> </ul> <p>These will be provided for you in each assignment template. Do not delete or rename them.</p>"},{"location":"style-guide/#separation-of-concerns","title":"Separation of Concerns","text":"<p>There are multiple aspects to this concept. Simply put, the goal is to only put HTML, CSS, and JavaScript in their respective files. By keeping these concerns separate, you can work on structure, style, and behavior independently.</p> <p>The following items will be checked during the autograding workflow:</p> <ul> <li>Write all CSS in the <code>styles.css</code> file, which should be referenced in the <code>&lt;head&gt;</code> element using <code>&lt;link&gt;</code> tags. Avoid writing any CSS as inline <code>style</code> attributes or in <code>&lt;style&gt;</code> tags within the HTML.</li> <li>Write all JavaScript in the <code>script.js</code> file, which should be referenced in the <code>&lt;head&gt;</code> element using <code>&lt;script&gt;</code> tags with the <code>defer</code> keyword. Avoid writing any JavaScript code inside <code>&lt;script&gt;</code> tags within the HTML.</li> <li>Trigger JavaScript functions from event listeners defined in the <code>script.js</code> file, not from HTML attributes.</li> </ul> <p>This:</p> <pre><code>const counterButton = document.querySelector(\"#counter-button\");\nmyButton.addEventListener(\"click\", addCount);\n</code></pre> <p>Not this:</p> <pre><code>&lt;button onclick=\"addCount()\"&gt;Click Me&lt;/button&gt;\n</code></pre>"},{"location":"style-guide/#javascript-loading","title":"JavaScript Loading","text":"<p>By default, the <code>&lt;script&gt;</code> tag in the <code>&lt;head&gt;</code> of your <code>index.html</code> file is initialized with the <code>defer</code> keyword. This ensures that <code>script.js</code> is downloaded in parallel with the HTML document but only executes after the HTML has been fully parsed.</p> <p>It is important that you do not remove the <code>defer</code> keyword, as doing so may cause errors if the script runs before the necessary HTML elements are available.</p> <p>Additionally, do not use a <code>DOMContentLoaded</code> event listener or <code>window.onload</code> property in your JavaScript file. These are redundant when using <code>defer</code> and may cause issues in future projects.</p>"},{"location":"style-guide/#image-compression-resolution-and-organization","title":"Image Compression, Resolution, and Organization","text":"<p>All images used in your projects should be in WebP format with a maximum resolution of 2200px in either dimension. Use Squoosh or another preferred image editing application that can export <code>.webp</code> files to prepare your images before adding them to your project.</p> <p>Store image files in an \"images\" folder to help keep the file browser organized. Remember, this means that the folder name will need to be included in the file path.</p> <p>This:</p> <pre><code>&lt;img src=\"images/dog.webp\" alt=\"Dog\" /&gt;\n</code></pre> <p>Not this:</p> <pre><code>&lt;img src=\"dog.webp\" alt=\"Dog\" /&gt;\n</code></pre>"},{"location":"style-guide/#css-color-syntax","title":"CSS Color Syntax","text":"<p>All CSS colors should be in HEX or RGB format to ensure that you can directly translate colors from your wireframe designs.</p> <ul> <li>Example HEX code: <code>#e9967a</code></li> <li>Example RGB code: <code>rgb(233, 150, 122)</code></li> </ul> <p>Several color utilities are provided to help you choose and convert color codes on the Utilities page.</p>"},{"location":"style-guide/#modern-javascript-variable-declarations","title":"Modern Javascript Variable Declarations","text":"<p>Use the keywords <code>let</code> (for values that will change) and <code>const</code> (for values that will not change) when declaring variables in JavaScript. Although it is still technically valid, do not use the outdated <code>var</code>.</p> <p>This:</p> <pre><code>let favoriteFruit = \"apple\";\nconst birthYear = 1986;\n</code></pre> <p>Not this:</p> <pre><code>var favoriteFruit = \"apple\";\nvar birthYear = 1986;\n</code></pre>"},{"location":"style-guide/#manually-graded-requirements","title":"Manually Graded Requirements","text":""},{"location":"style-guide/#font-selection-and-loading","title":"Font Selection and Loading","text":"<p>Web safe fonts are fonts that you can safely assume are already installed on a user's computer:</p> <ul> <li>Arial (sans-serif)</li> <li>Verdana (sans-serif)</li> <li>Tahoma (sans-serif)</li> <li>Trebuchet MS (sans-serif)</li> <li>Times New Roman (serif)</li> <li>Georgia (serif)</li> <li>Courier New (monospace)</li> <li>Brush Script MT (cursive)</li> </ul> <p>If you use any other font in your designs, you must include it as a resource by either adding the font file to the project folder and importing it in CSS, or embedding <code>&lt;link&gt;</code> tags from a hosted source in the <code>&lt;head&gt;</code> element.</p>"},{"location":"style-guide/#naming-conventions","title":"Naming Conventions","text":"<ul> <li>Rename long or cryptic image files as needed. For example, <code>dog.webp</code> is much easier to type and identify than <code>neom-9E9NsEiUGxg-unsplash.webp</code>.</li> <li>Use concise, searchable, and meaningful names for classes, ids, functions, and variables. Only use common, easy-to-remember abbreviations if a name becomes excessively long.</li> <li>Name class and id attributes in HTML and CSS using the \"kebab-case\" convention, where lowercase words are separated by hyphens.</li> <li>Name functions and variables in JavaScript using the \"camelCase\" convention, where each word (except the first) starts with a capital letter, without spaces or hyphens.</li> <li>Keep in mind that you will find yourself writing both kebab-case and camelCase in your JavaScript file when assigning HTML elements to variables. This is valid since the id name was created in the HTML file.</li> </ul> <pre><code>&lt;p class=\"kebab-case\" id=\"kebab-case\"&gt;Blah blah blah.&lt;/p&gt;\n</code></pre> <pre><code>const camelCase = \"apple\";\n</code></pre> <pre><code>// camelCase variable name, kebab-case id\n\nconst counterButton = document.querySelector(\"#counter-button\");\n</code></pre>"},{"location":"style-guide/#display-size-targets-and-general-layout","title":"Display Size Targets and General Layout","text":"<p>Your project layouts should accommodate the following window widths (based on MDN Web Docs recommendations):</p> <ul> <li><code>480px</code> (mobile)</li> <li><code>800px</code> (tablet, narrow laptop/desktop windows)</li> <li><code>1100px</code> (wide laptop/desktop windows)</li> </ul> <p>This means that text content and images are neither too small nor overflowing the visible area. Additionally, you should plan to use empty or \"white\" space effectively around the main content area and individual component blocks. Text or images that extend right to the edge of the browser window can result in a cluttered or disorganized look.</p> Using Space <p>The following CSS is provided for you in the assignment templates to help meet these requirements:</p> <ul> <li>Large paragraphs should not exceed a width of <code>80ch</code> to improve readability.</li> <li>Use media queries at <code>480px</code> and/or <code>800px</code> to rearrange or resize elements as needed.</li> </ul> <p>Default assignment template CSS:</p> <pre><code>* {\n  box-sizing: border-box;\n}\n\np {\n  max-width: 80ch;\n}\n\nimg {\n  width: 100%;\n}\n\n/* media queries - keep at bottom */\n\n@media (max-width: 800px) {\n}\n\n@media (max-width: 480px) {\n}\n</code></pre>"},{"location":"style-guide/#other-suggestions","title":"Other Suggestions","text":""},{"location":"style-guide/#formatting","title":"Formatting","text":"<p>In both CodePen and VS Code, js-beautify is used for HTML formatting and Prettier is used for CSS and JavaScript formatting. Formatting occurs automatically on save if both platforms are configured according to the Setup guide.</p> <p>Provided your code is completely and properly structured (e.g., not missing tags or brackets), the following formatting should apply:</p> <ul> <li>Blank lines and indentation</li> <li>Proper spacing around operators, parentheses, and curly brackets</li> <li>Semicolons at the end of statements in JavaScript</li> <li>Single quotes <code>'</code> replaced with double quotes <code>\"</code> in JavaScript</li> </ul> <p>HTML</p> <pre><code>&lt;body&gt;\n  &lt;header&gt;\n    &lt;h1&gt;My Big Project&lt;/h1&gt;\n  &lt;/header&gt;\n\n  &lt;main&gt;\n    &lt;p&gt;Tons of great content here.&lt;/p&gt;\n    &lt;img src=\"headshot.webp\" alt=\"Headshot\" /&gt;\n  &lt;/main&gt;\n\n  &lt;footer&gt;\n    &lt;p&gt;Like and subscribe!&lt;/p&gt;\n  &lt;/footer&gt;\n&lt;/body&gt;\n</code></pre> <p>CSS</p> <pre><code>h1 {\n  color: #ff0000;\n}\n\np {\n  color: #0000ff;\n}\n</code></pre> <p>JavaScript</p> <pre><code>let favoriteFruit = \"apple\";\n\nif (favoriteFruit === \"apple\") {\n  declareLove();\n}\n\nfunction declareLove() {\n  console.log(\"I like apples, too!\");\n}\n</code></pre>"},{"location":"style-guide/#relative-units","title":"Relative Units","text":"<p>Prioritize using relative units in CSS whenever possible to improve responsiveness and consistency in sizing and spacing. Common examples of relative units include:</p> <ul> <li><code>%</code> - Percentage relative to the parent element.</li> <li><code>ch</code> - The width of a character in the element's font size.</li> <li><code>rem</code> - Relative to the root element's font size (the browser default).</li> </ul> <p>When using absolute units, such as <code>px</code>, aim for consistent and logical increments e.g., multiples of 2 or 10. Adopting CSS variables can help with this by allowing you to define and adjust size denominations in one place.</p> <p>You can read more about valid absolute and relative units in this MDN Web Docs reference.</p>"},{"location":"style-guide/#css-style-selectors","title":"CSS Style Selectors","text":"<p>Use element and class selectors, as well as CSS nesting, instead of id selectors in CSS. This approach helps reinforce the separation of concerns by reserving id attributes for assigning HTML elements to variables in JavaScript.</p> <pre><code>/* element selector */\nh2 {\n  color: #0000ff;\n}\n\n/* class selector with nesting */\n.warning {\n  color: #ff0000;\n  font-weight: bold;\n\n  button {\n    background-color: #ff9999;\n  }\n}\n</code></pre>"},{"location":"style-guide/#bem","title":"BEM","text":"<p>There is a CSS class naming methodology called Block-Element-Modifier (BEM) that can help with code organization. Generally, the three parts are defined as follows:</p> <ul> <li>Block</li> <li>Standalone entity that is meaningful on its own.</li> <li>Examples: <code>header</code>, <code>container</code>, <code>menu</code>, <code>checkbox</code>, <code>input</code></li> <li>Element</li> <li>A part of a block that has no standalone meaning and is semantically tied to its block.</li> <li>Examples: <code>menu item</code>, <code>list item</code>, <code>checkbox caption</code>, <code>header title</code></li> <li>Modifier</li> <li>A flag on a block or element. Use them to change appearance or behavior.</li> <li>Examples: <code>disabled</code>, <code>highlighted</code>, <code>checked</code>, <code>fixed</code>, <code>size big</code>, <code>color yellow</code></li> </ul> <p>You can read more about the BEM methodology at the following sites:</p> <ul> <li>Get BEM</li> <li>\"BEM 101\" on CSS Tricks</li> </ul> <p>BEM takes advantage of the fact that class names can include _ and - characters, and an HTML element can have multiple classes. Some combinations may take the following formats:</p> <pre><code>.block--modifier {\n}\n\n.block--modifier-value {\n}\n\n.block__element {\n}\n\n.block__element--modifier {\n}\n\n.block__element--modifier-value {\n}\n</code></pre> <p>For example:</p> <pre><code>&lt;form class=\"form form--theme-xmas form--simple\"&gt;\n  &lt;input class=\"form__input\" type=\"text\" /&gt;\n  &lt;input class=\"form__submit form__submit--disabled\" type=\"submit\" /&gt;\n&lt;/form&gt;\n</code></pre> <pre><code>.form {\n}\n.form--theme-xmas {\n}\n.form--simple {\n}\n.form__input {\n}\n.form__submit {\n}\n.form__submit--disabled {\n}\n</code></pre>"},{"location":"css/flexbox/","title":"Flexbox","text":"<p>Flexbox is used to create responsive layouts. It is typically considered ideal for 1-dimensional rows or columns, though more complex layouts can be achieved by nesting flexboxes inside of each other.</p> <p>From CSS Tricks' \"CSS Flexbox Layout Guide\":</p> <p>The main idea behind the flex layout is to give the container the ability to alter its items\u2019 width/height (and order) to best fill the available space (mostly to accommodate to all kind of display devices and screen sizes). A flex container expands items to fill available free space or shrinks them to prevent overflow.</p> Flexbox Container (image source: CSS Tricks) Flexbox Items (image source: CSS Tricks) <p>The CSS Tricks article linked above is an excellent reference for all things flexbox. To get started, the following set of seven properties (demonstrated in the example below) can be used to accomplish most layout goals:</p> <p>Container properties:</p> <ul> <li><code>display</code> - Set this property value to <code>flex</code> to create a flexbox container.</li> <li><code>flex-direction</code> - Options are <code>row</code> (the default) or <code>column</code>.</li> <li><code>flex-wrap</code> - By default, flexbox tries to fit everything in one row. Set this property to <code>wrap</code> to allow flex items to wrap into multiple rows as needed (this only works if items have a fixed or minimum size).</li> <li><code>justify-content</code> - Defines the alignment along the main axis.</li> <li><code>align-items</code> - Defines the alignment along the cross axis.</li> <li><code>gap</code> - Controls the space between flex items.</li> </ul> <p>Item properties:</p> <ul> <li><code>flex</code> - Determines how much space an item will occupy proportionally. For example, a flex item with <code>flex: 2</code> will take up twice as much space as a flex item with <code>flex: 1</code>.</li> </ul> <p>When testing responsiveness with embedded CodePen examples, you should open the Pen in its own window by clicking Edit On CodePen, then use your browser's Device Mode (Chromium-based) or Responsive Design Mode (Firefox).</p> <p> See the Pen    Flexbox (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"css/grid/","title":"Grid","text":"<p>Grid is similar to flexbox in that it is used to create responsive layouts that adapt to fill the available space. However, while grid can be used for smaller components, it is a two-dimensional layout system typically adopted for creating larger layouts.</p> <p>The scope of properties and options in grid can be a little overwhelming. As with flexbox, CSS Tricks has an excellent article called \"CSS Grid Layout Guide\" that covers just about everything, but this selection of nine properties (demonstrated in the examples below) will suffice for most basic layout needs:</p> <p>Container properties:</p> <ul> <li><code>display</code> - Set this property value to <code>grid</code> to create a grid container.</li> <li><code>grid-template-columns</code> - Defines the number and size of columns in your grid.</li> <li><code>grid-template-rows</code> - Define the number and size of rows in your grid.</li> <li><code>grid-auto-rows</code> - Specifies the size of any auto-generated grid rows.</li> <li><code>gap</code> - Controls the space between grid rows and columns.</li> <li><code>justify-content</code> - Similar to its use in flexbox, this property sets the alignment of items along the row axis. However, it only has an effect when grid items are sized with non-flexible units, such as <code>px</code>.</li> <li><code>align-items</code> - Similar to its use in flexbox, this property sets the alignment of items along the column axis. However, it only has an effect when grid items within a row have varying heights.</li> </ul> <p>Item properties:</p> <ul> <li><code>justify-self</code> - Aligns a single grid item inside its cell along the row\u00a0axis.</li> <li><code>align-self</code> - Aligns a single grid item inside its cell along the column\u00a0axis.</li> </ul>"},{"location":"css/grid/#flexbox-or-grid","title":"Flexbox or Grid?","text":"<p>If you're not sure whether flexbox or grid is more suitable for your layout needs, consider the following:</p> <ul> <li>Center a single element? Use flexbox.</li> <li>Arranging elements in a single row or column, like a row of photos or inputs? Use flexbox.</li> <li>Expecting the number of elements in your layout to change from time to time? Use grid (or flexbox with wrapping).</li> <li>Planning the overall layout of your page with a header, nav bar, sidebar, footer, and possibly more? Use grid.</li> <li>Creating an asymmetrical or multi-dimensional layout? Use grid.</li> </ul> <p>Ultimately, flexbox can be a bit easier to start with and conceptualize, but grid is more powerful and versatile once you get the basics down. You can always use both in your projects!</p> <p>When testing responsiveness with embedded CodePen examples, you should open the Pen in its own window by clicking Edit On CodePen, then use your browser's Device Mode (Chromium-based) or Responsive Design Mode (Firefox).</p> <p> See the Pen    Grid 1 (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p> <p></p> <p> See the Pen    Grid 2 (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p> <p></p> <p> See the Pen    Grid 3 (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"css/hover/","title":"Hover","text":"<p>A pseudo-class is \"a keyword added to a selector that specifies a special state of the selected element(s)\" (from MDN Web Docs). One of the most useful and familiar pseudo-classes is <code>:hover</code>, which defines the appearance of an element when the user's pointer is hovering over it.</p> <p> See the Pen    :hover (IMS322 docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"css/input-styling/","title":"Input Styling","text":"<p>Styling inputs can be confusing and frustrating. Some familiar style properties such as <code>background-color</code>, <code>color</code>, and <code>font-size</code> work as expected. Other useful selectors, pseudo-classes, and, pseudo-elements for inputs are demonstrated in the example below, including:</p> <ul> <li><code>accent-color</code>: Changes the color of a checked radio button.</li> <li><code>:active</code>: Selects buttons when they are in the active state (during a click, before the mouse is released).</li> <li><code>:focus</code>: Selects inputs when they are in the focus state (i.e., when the cursor is inside the input field)</li> <li><code>outline</code>: Changes the highlight color around inputs when they are in the focus state.</li> <li><code>::placeholder</code>: Selects the placeholder text (set using the <code>placeholder</code> attribute) for styling.</li> </ul> <p>CSS generators can be very heplful when styling inputs. For example, this Style Input Range utility from CSS Portal makes it easy to customize the appearance of sliders.</p> <p> See the Pen    Input Styling (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"css/introduction/","title":"CSS","text":"<p>Before proceeding with the new CSS content on this site, review the material below. This class assumes that you are familiar with these topics from previous classes.</p>"},{"location":"css/introduction/#common-properties","title":"Common Properties","text":"<ul> <li>background-color</li> <li>border</li> <li>color</li> <li>display (primarily for flex or grid)</li> <li>font-family</li> <li>font-size</li> <li>height</li> <li>margin</li> <li>max-height</li> <li>max-width</li> <li>min-height</li> <li>min-width</li> <li>opacity</li> <li>padding</li> <li>text-align</li> <li>transform (e.g., scale, rotate, translate)</li> <li>width</li> </ul> <p>A comprehensive reference for all CSS properties can be found on MDN Web Docs.</p>"},{"location":"css/introduction/#css-box-model","title":"CSS Box Model","text":"<p>The CSS Box Model describes how margin, border, padding, and content relate to each other in an HTML element.</p> CSS Box Model"},{"location":"css/media-queries/","title":"Media Queries","text":"<p>Media queries allow you to responsively apply different styling depending on a device's screen resolution. Common uses for media queries include adjusting the visibility, size, or orientation (row vs. column) of elements to better fit mobile displays, though any property can be modified as needed.</p> <p>Since our main class projects target display widths of <code>1100px</code> (default), <code>800px</code>, and <code>480px</code>, each assignment template includes predefined media queries for the two smaller values.</p> <p>When testing responsiveness with embedded CodePen examples, you should open the Pen in its own window by clicking Edit On CodePen, then use your browser's Device Mode (Chromium-based) or Responsive Design Mode (Firefox).</p> <p> See the Pen    Media Queries (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"css/nesting/","title":"CSS Nesting","text":"<p>Excerpted from MDN Web Docs \"Using CSS nesting\":</p> <p>The CSS nesting module allows you to write your stylesheets so that they are easier to read, more modular, and more maintainable. As you are not constantly repeating selectors, the file size can also be reduced.</p> <p>You can use CSS nesting to create child selectors of a parent, which in turn can be used to target child elements of specific parents.</p> <p>While CSS nesting may not be appropriate for all situations, one notable benefit is that the structure more closely resembles the corresponding HTML, where child tags/selectors are nested within parent tags/selectors.</p> <p> See the Pen    CSS Nesting 1 (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p> <p>It can also help alleviate the complexity of creating multiple classes, provided that the heirarchy of your document structure is not too complicated. In the example below, a class is only needed for the parent <code>&lt;div&gt;</code>, since the color change will only apply to <code>&lt;p&gt;</code> elements that are children of the <code>dark-bg</code> class.</p> <p> See the Pen    CSS Nesting 2 (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"css/relative-units/","title":"Relative Units","text":"<p>Using relative units by default is recommended in the Style Guide because they can make layout spacing and element sizing more consistent and flexible. In the embedded example below, each <code>&lt;p&gt;</code>, <code>&lt;div&gt;</code>, and <code>&lt;img&gt;</code> is sized using one of the relative units recommended for this class:</p> <ul> <li><code>%</code> - Percentage relative to the parent element.</li> <li><code>ch</code> - The width of a character in the element's font size.</li> <li><code>rem</code> - Relative to the root element's font size (the browser default).</li> </ul> <p>Notice that the elements styled using <code>%</code> are responsive to the width of the window. This is a key component of Responsive Design.</p> <p>When testing responsiveness with embedded CodePen examples, you should open the Pen in its own window by clicking Edit On CodePen, then use your browser's Device Mode (Chromium-based) or Responsive Design Mode (Firefox).</p> <p> See the Pen    Relative Units (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"css/transitions/","title":"Transitions","text":"<p>Setting a transition time (in seconds) allows changes between two states to occur gradually. The example below demonstrates a transition time using the <code>:hover</code> pseudo-class to initiate a change between states.</p> <p>Keep in mind that not all CSS properties are fully animatable with transitions. For example, the last button in the example below attempts to transition using <code>visibility: hidden</code>, but the button appears and disappears inconsistently without a fade animation.</p> <p> See the Pen    CSS Transitions (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"css/variables/","title":"Variables","text":"<p>CSS variables (aka custom properties) can help ensure consistent styling throughout your site. For example, you can apply a specific color in multiple places without needing to remember and type the exact HEX or RGB code each time. Additionally, if you want to test variations for different properties, you only need to change the value once where the CSS variable is declared at the top of the <code>style.css</code> file.</p> <p>Thare are multiple ways to declare CSS variables, but the most common and general-purpose method is within the <code>:root</code> pseudo-element. These variables can then be referenced throughout the rest of the file by their variable name, which should always start with <code>--</code>.</p> <p> See the Pen    CSS Variables (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/Xbasic-input-validation/","title":"Basic Input Validation","text":"<p>When using entry controls, it is a good idea to validate the input in some way to ensure that it adheres to the desired format or range. Basic validation can be implemented using <code>&lt;input&gt;</code> element attributes.</p>"},{"location":"js/Xbasic-input-validation/#html-form-validation","title":"HTML Form Validation","text":"<p>When put inside a <code>&lt;form&gt;</code> element, many inputs will automatically validate data upon submission based on their type. For example, an input with type <code>email</code> will prompt for a valid email address if one is not provided.</p> <p>FYI, the examples on this page will display an error after clicking \"Submit\" once all fields are completed correctly. This is intentional - the additional steps required to gather all data at once from a <code>&lt;form&gt;</code> will be described in subsequent readings.</p> <p>In this first example:</p> <ul> <li>All 3 inputs are given the <code>required</code> attribute.</li> <li>The input with type <code>email</code> will not accept data unless it is in the user@domain.com format.</li> <li>The input with type <code>number</code> will not accept letters.</li> </ul> <p> See the Pen    Quick Validation (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p> <p>Further customization can be attained by using the <code>pattern</code> attribute to specify the exact format required. However, it must be written as a regular expression (regex), which can be very challenging. A couple of simple examples are shown below, but beyond that you will likely need to search for additional regex patterns online or use AI tools to help design your own.</p> <p> See the Pen    Regex Validation (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/arrays/","title":"Arrays","text":"<p>In JavaScript, an array is a type of variable used to store sequences of values or a series of objects. Declare an array using square brackets, with items separated by commas.</p> <pre><code>const quickArray = [12, 34, 56, 78];\n</code></pre> <p>To access a single value in the array, use bracket notation with the index number, which indicates the item's position within the array, starting at 0. For example, given <code>quickArray</code> above:</p> <pre><code>quickArray[0];\n</code></pre> <p>would return the first value, <code>12</code>.</p> <p>An array can be populated with other variables.</p> <pre><code>const x = 10;\nconst y = 11;\nconst z = 12;\n\nconst coordinates = [x, y, z];\n</code></pre> <p>When writing objects directly into an array, ensure that square and curly brackets are properly organized.</p> <pre><code>const classes = [\n  {\n    courseNo: \"IMS322\",\n    credits: 3\n  },\n  {\n    courseNo: \"MUS100Z\",\n    credits: 1\n  }\n];\n</code></pre> <p> See the Pen    Arrays (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p> <p>```</p>"},{"location":"js/class-toggling/","title":"Class Toggling","text":"<p>If your goal is simply to change the appearance of an element on the page (as opposed to its content), a convenient method is toggling a class on or off. This approach works well because elements can have multiple classes - for example, one applied manually in the HTML for default styling and another controlled dynamically via JavaScript using the <code>class.toggle()</code> method. Any properties defined in the second class will override those in the first.</p> <p>Since we need to reference both the interactive element (the <code>&lt;button&gt;</code>) AND the element that will change (the <code>&lt;p&gt;</code>), they both need unique id attributes.</p> <pre><code>&lt;button id=\"color-toggle-btn\"&gt;Click Me&lt;/button&gt;\n\n&lt;p id=\"changing-text\" class=\"blue-text\"&gt;Hello, world.&lt;/p&gt;\n</code></pre> <p>In CSS, define both the default style and the changes that should occur to the <code>&lt;p&gt;</code> element when the button is clicked.</p> <pre><code>/* default */\n.blue-text {\n  color: #1111ff;\n}\n\n.red-text {\n  color: #ff1111;\n}\n</code></pre> <p>In JavaScript, we introduce two new concepts:</p> <ol> <li>When defining a function, start by creating variables that reference the element(s) that will change when the function is triggered. In this case, we will be changing the color of the text in the <code>&lt;p&gt;</code> element. Waiting to declare the variable until it is needed can help organize and scope your code appropriately.</li> <li>Use the method <code>classList.toggle()</code> to add/remove the <code>.red-text</code> class.</li> </ol> <pre><code>const colorToggleBtn = document.querySelector(\"#color-toggle-btn\");\n\ncolorToggleBtn.addEventListener(\"click\", colorToggle);\n\nfunction colorToggle() {\n  const changingText = document.querySelector(\"#changing-text\");\n  changingText.classList.toggle(\"red-text\");\n}\n</code></pre> <p> See the Pen    Class Toggling 1 (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/class-toggling/#activeinactive-states","title":"Active/Inactive States","text":"<p>One useful application of <code>classList.toggle()</code> is to think of elements as having \"active\" and \"inactive\" states. There is no new code to learn for this approach - it's just a way for you as the developer to mentally model the interaction.</p> <p>Let's create a text drawer that opens and closes when a button is clicked. In CSS, define the default or \"active\" state for the element. A <code>transition</code> is applied so that the change will occur gradually rather than immediately, while the <code>overflow: hidden</code> property ensures that no text spills out when the drawer is closed.</p> <pre><code>.open-drawer {\n  margin: 0;\n  padding: 1rem;\n  background-color: #ccccff;\n  max-height: 4rem;\n  transition: 0.2s;\n  overflow: hidden;\n}\n</code></pre> <p>To close the drawer, set its <code>max-height</code> and vertical <code>padding</code> to 0.</p> <pre><code>.closed-drawer {\n  padding: 0 1rem;\n  max-height: 0;\n}\n</code></pre> <p>Why are we using max-height instead of height? Typically, you wouldn't need to specify a height value for a <code>&lt;p&gt;</code> element, as the browser handles it automatically. However, for a transition to occur, the element must have a specific value to transition from/to (<code>auto</code> will not work). We use <code>max-height</code> instead of <code>height</code> because it allows for an approximation - <code>4rem</code> is sufficient to display all the text without creating extra empty space.</p> <p>The rest of the HTML and JavaScript code is essentially the same as the previous example.</p> <p> See the Pen    Class Toggling 2 (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/conditionals/","title":"Conditionals","text":"<p>Conditionals (aka \"if statements\") allow you to make decisions in your code. With an <code>if</code> statement, you can evaluate whether a condition is true and, if so, run a specific section of code.</p> <pre><code>if (condition) {\n  // do this stuff if the condition is true\n}\n</code></pre> <p>You can require multiple conditions using <code>&amp;&amp;</code> (and) or allow for either/or scenarios with <code>||</code> (or).</p> <pre><code>if (condition1 &amp;&amp; condition2) {\n  // do this stuff only if BOTH conditions are true\n}\n\nif (condition1 || condition2) {\n  // do this stuff if EITHER condition1 OR condition2 is true\n}\n</code></pre> <p>You can also create multiple branches using <code>else</code> or <code>else if</code>.</p> <pre><code>if (condition1) {\n  // do this stuff if condition1 is true\n} else if (condition2) {\n  // do this stuff if condition2 is true\n} else {\n  // do this stuff if neither condition1 nor condition2 is true\n}\n</code></pre>"},{"location":"js/conditionals/#comparison-operators","title":"Comparison Operators","text":"<p>You can specify conditions in <code>if</code> statements using the following comparison operators:</p> <ul> <li>Strict equal <code>===</code></li> <li>Not equal <code>!=</code></li> <li>Greater than <code>&gt;</code></li> <li>Greater than or equal\u00a0<code>&gt;=</code></li> <li>Less than <code>&lt;</code></li> <li>Less than or equal <code>&lt;=</code></li> </ul> <p>For example, this tests whether the variable <code>x</code> is greater than 10:</p> <pre><code>const x = 11;\n\nif (x &gt; 10) {\n  console.log(\"You win!\");\n}\n</code></pre> <p>This checks if the string variable exactly matches \"Eric\":</p> <pre><code>const myName = \"Eric\";\n\nif (myName === \"Eric\") {\n  console.log(\"Hey, that is my name, too!\");\n}\n</code></pre> <p>Try changing the comparison operators and operands in the examples below to see if the results match your expectations.</p> <p> See the Pen    Conditionals 1 (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p> <p></p> <p> See the Pen    Conditionals 2 (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/data-types/","title":"Data Types","text":"<p>Data stored in variables are always of a certain type. When operating on data in JavaScript, the results will depend on the types of the operands (the variables on either side of the operator) used in the expression.</p> <p>Given the prompt \"add 40 and 2,\" the results are predictable because both operands, 40 and 2, are of the type number. However, a request to \"add 40 and elephant\" may not have an obvious result, because... \"elephant\" is obviously not a number.</p> <p>While it is important to be aware of these data types, you do not have to specify the type when declaring variables in JavaScript (as you do in some other languages). JavaScript is a dynamically typed language, meaning that types are automatically inferred based on the assigned value.</p> <p>There are 8 different data types in JavaScript:</p> <ol> <li>Number</li> <li>String</li> <li>Boolean</li> <li>Object</li> <li>Null</li> <li>Undefined</li> <li>BigInt</li> <li>Symbol</li> </ol> <p>For this class, you will be working primarily with the first four - Number, String, Boolean, and Object.</p> <p>You should also be familiar with the Null and Undefined types, as they may appear in error messages during troubleshooting.</p> <p>The BigInt and Symbol types are a bit more esoteric and likely will not be relevant to your work in this class, but they are included below for completeness.</p>"},{"location":"js/data-types/#number","title":"Number","text":"<pre><code>const myNumber = 42;\n</code></pre>"},{"location":"js/data-types/#string","title":"String","text":"<p>A string is a sequence of one or more text characters. When declaring a string variable, surround the value with double quotes, as seen below.</p> <pre><code>const myMessage = \"Hello, my name is Eric.\";\n</code></pre>"},{"location":"js/data-types/#boolean","title":"Boolean","text":"<p>The boolean type has only 2 possible values: <code>true</code> or <code>false</code>. These values are not strings, so they do not require double quotes.</p> <pre><code>const isRaining = false;\n\nconst isSunny = true;\n</code></pre>"},{"location":"js/data-types/#object","title":"Object","text":"<p>An object stores collections of data in key:value pairs. Objects can be very complex and powerful, but a simple example might describe the properties of an item, like a car or laptop. In this case, each key on the left describes the category of the stored value on the right.</p> <pre><code>const myLaptop = {\n  manufacturer: \"Apple\",\n  model: \"MacBook Air\",\n  year: 2020,\n  processor: \"M1\",\n  color: \"Space Gray\"\n};\n</code></pre> <p>Notice the following characteristics, which are crucial for declaring objects:</p> <ul> <li>The key:value pairs are enclosed by curly braces <code>{}</code>.</li> <li>Keys are named, but they not require double quotes since they are not technically strings.</li> <li>The key and value are separated by a colon <code>:</code>.</li> <li>Each key:value pair is separared by a comma <code>,</code>.</li> </ul> <p>You can reference individual values of an object using dot notation.</p> <pre><code>myLaptop.manufacturer; // returns \"Apple\"\nmyLaptop.year; // returns 2020\n</code></pre>"},{"location":"js/data-types/#null","title":"Null","text":"<p>Null represents an empty or unknown value.</p> <pre><code>&lt;button id=\"play-button\"&gt;Play&lt;/button&gt;\n\n&lt;p&gt;Lorem ipsum blah blah blah.&lt;/p&gt;\n</code></pre> <pre><code>const myElement = document.querySelector(\"#does-not-exist\");\n\nconsole.log(myElement); // logs null\n</code></pre>"},{"location":"js/data-types/#undefined","title":"Undefined","text":"<p>Undefined often occurs if a variable is declared but not assigned a value.</p> <pre><code>const myVariable;\n\nconsole.log(myVariable); // logs \"undefined\"\n</code></pre>"},{"location":"js/data-types/#bigint","title":"BigInt","text":"<p>As the name suggests, the BigInt type is used to store very large integer values. The standard number type is accurate up to 15 digits, so BigInt is required for larger values. To declare a BigInt, add an <code>n</code> to the end of the value.</p> <pre><code>const largeNumber = 999999999999999; // 15 digits\nconsole.log(largeNumber); // logs 999999999999999\n\nconst wrongNumber = 9999999999999999; // 16 digits\nconsole.log(wrongNumber); // logs 10000000000000000, no longer accurate\n\nconst bigNumber = 9999999999999999n; // 16 digits with an n at the end declares as BigInt\nconsole.log(bigNumber); // logs 9999999999999999n, which is accurate\n\nconsole.log(bigNumber + 1); // causes a TypeError since we're trying to add a BigInt and a number\n\nconsole.log(bigNumber + 1n); // logs 10000000000000000n, which is accurate\n</code></pre>"},{"location":"js/data-types/#symbol","title":"Symbol","text":"<p>Symbols are a relatively new primitive data type in JavaScript. Every symbol is unique, even if they are created with the same description.</p> <pre><code>const symbol1 = Symbol(\"hello\");\nconst symbol2 = Symbol(\"hello\");\n// symbol1 is not equal to symbol2\n</code></pre> <p>Symbols are often used to prevent clashes between property names (the keys) in objects. They likely will not be useful for your work in this class or appear in any example code.</p>"},{"location":"js/data-types/#example-code","title":"Example Code","text":"<p>Try changing the variable values in the JavaScript below.</p> <p>When using the console with embedded CodePen examples, you should open the Pen in its own window by clicking Edit On CodePen and then clicking the Console button in the CodePen editor.</p> <p> See the Pen    Data Types (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/dom-manipulation/","title":"DOM Manipulation","text":"<p>Reminder: The Document Object Model (DOM) is the \"representation of the objects that comprise the structure and content of a document on the web.\" It represents the page in a way that programs, like JavaScript, can manipulate the document structure, style, and content.</p> <p>You can review more on the DOM Properties and Methods page.</p> <p>One way to conceptualize the structure of the DOM is as a hierarchical tree of parents and children.</p> DOM Tree (image source: Wikipedia) <p>In the example diagram shown above, all elements are children of the <code>&lt;html&gt;</code> root element. The <code>&lt;body&gt;</code> has two child elements: an <code>&lt;h1&gt;</code> and an <code>&lt;a&gt;</code>. The corresponding HTML might look something like this:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n    &lt;title&gt;My title&lt;/title&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;h1&gt;A heading&lt;/h1&gt;\n    &lt;a href=\"https://www.google.com\"&gt;Link text&lt;/a&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Take a look at the following example and, before opening the HTML editor, think about how might describe the structure in terms of parents and children.</p> <p> See the Pen    Parent-Child (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p> <p>Upon opening the HTML editor (or the browser's Inspector), you'll see that each <code>&lt;img&gt;</code> has a <code>&lt;figcaption&gt;</code> sibling, both of which are children of a <code>&lt;figure&gt;</code> element. These <code>&lt;figure&gt;</code> elements are themselves children of the <code>&lt;div&gt;</code> flex row. Or, looking at it from the other direction, the <code>&lt;div&gt;</code> flex row is the parent element containing three <code>&lt;figure&gt;</code> children, each of which contains one <code>&lt;img&gt;</code> child element and one <code>&lt;figcaption&gt;</code> child element.</p>"},{"location":"js/dom-manipulation/#creating-elements-and-appending-children","title":"Creating Elements and Appending Children","text":"<p>If you were given a large collection of images in a folder to display in a responsive gallery site, you might manually create flexboxes for rows, <code>&lt;figure&gt;</code> or <code>&lt;div&gt;</code> elements for image containers, and <code>&lt;img&gt;</code> elements in your HTML. But what if you were running a website for a cafe that featured different specials and events each week? It might be easier to automatically generate the HTML using information about the images in the folder.</p> <p>Let's start simply. If you were to create an object with properties that describe a single menu item, it might look like this:</p> <pre><code>const onionAndPeppercorns = {\n  imageUrl: \"https://picsum.photos/id/292/800/600.webp\",\n  alt: \"onion and peppercorns\",\n  caption: \"Onion and Peppercorns.\"\n};\n</code></pre> <p>You can use JavaScript to create each required element using the <code>createElement()</code> method and set the necessary attributes:</p> <pre><code>const figureElement = document.createElement(\"figure\");\nconst imageElement = document.createElement(\"img\");\nconst captionElement = document.createElement(\"figcaption\");\n\n// sets src attribute to \"https://picsum.photos/id/292/800/600.webp\"\nimageElement.src = onionAndPeppercorns.imageUrl;\n// sets alt text attribute to \"onion and peppercorns\"\nimageElement.alt = onionAndPeppercorns.alt;\n// sets inner text of &lt;figcaption&gt; to \"Onion and Peppercorns.\"\ncaptionElement.innerText = onionAndPeppercorns.caption;\n</code></pre> <p>Then, you can use the <code>appendChild()</code> method to append the <code>&lt;img&gt;</code> and <code>&lt;figcaption&gt;</code> elements to the <code>&lt;figure&gt;</code> element and the <code>&lt;figure&gt;</code> element to the <code>&lt;body&gt;</code>.</p> <p> See the Pen    Creating and Appending Elements (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/dom-manipulation/#creating-and-appending-elements-in-a-for-of-loop","title":"Creating and Appending Elements in a For Of Loop","text":"<p>Using the <code>createElement()</code> and <code>appendChild()</code> methods for a single object is good practice, but using them in a <code>for...of</code> loop for multiple objects showcases their power and flexibility.</p> <p>In the example below, an array containing objects is used to generate elements for a grid of photos. Each object contains information about the photo source (url), alt text, and caption text.</p> <p> See the Pen    Generating a Photo Grid with a For Of Loop (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/dom-properties-and-methods/","title":"DOM Properties and Methods","text":"<p>The Document Object Model (DOM) is the \"representation of the objects that comprise the structure and content of a document on the web.\" It represents the page in a way that programs, like JavaScript, can manipulate the document structure, style, and content.</p> <p>The DOM defines:</p> <p>HTML elements as objects (i.e., how an HTML element is represented when assigned to a variable).</p> <pre><code>const mainHeading = document.querySelector(\"#main-heading\");\n</code></pre> <p>The properties of HTML element objects, which are similar to attributes in HTML.</p> <p>Properties can be set:</p> <pre><code>headshotImage.src = \"images/headshot.webp\";\n</code></pre> <p>Properties can also be read:</p> <pre><code>const volume = sliderInput.value;\n</code></pre> <p>The methods (actions) that can be performed on or by HTML element objects. Methods are like functions defined within an object (notice that they have parentheses). Many (but not all) methods require arguments inside the <code>()</code>.</p> <pre><code>primaryButton.classList.toggle(\"active\");\n</code></pre> <p>The events that can be triggered by HTML elements.</p> <pre><code>primaryButton.addEventListener(\"click\", toggleState);\n</code></pre>"},{"location":"js/dom-properties-and-methods/#getting-started-with-properties","title":"Getting Started with Properties","text":"<p>Here are some common examples of setting and reading properties in JavaScript.</p>"},{"location":"js/dom-properties-and-methods/#innertext","title":"innerText","text":"<p>To change the text displayed in an HTML element via JavaScript, assign a value to the <code>innerText</code> property:</p> <pre><code>element.innerText = \"Hello!\";\n</code></pre> <p> See the Pen    innerText (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/dom-properties-and-methods/#value","title":"value","text":"<p><code>&lt;input&gt;</code> elements have a <code>value</code> attribute that can be read or assigned in JavaScript.</p> <p>In the example below, four sliders each have a different initial value set in the HTML (as an attribute), which is why they start at different positions (sliders default to a range of 0 to 100).</p> <p> See the Pen    Input Values (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p> <p>These values can be read in JavaScript by listening for the <code>input</code> event (e.g., in response to user ineraction), or set programmatically.</p> <p> See the Pen    Getting and Setting Values (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/dom-properties-and-methods/#getting-started-with-methods","title":"Getting Started with Methods","text":"<p>Some methods - like <code>document.querySelector()</code>, <code>console.log()</code>, <code>.addEventListener()</code>, and <code>classList.toggle()</code> - are used so frequently that they become second nature. At times, you might need to reference online documentation to explore more methods (or properties and events) associated with an object. For example, the <code>play()</code> method is described in the Basic Usage section of the MDN Web Docs article on HTML Audio Elements.</p> <p> See the Pen    Audio Element Methods (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/event-listeners/","title":"Event Listeners","text":"<p>An event is a signal that something has happened in the browser. There are several triggers for events, some that occur automatically (e.g., the load event fires when the page has finished loading), and others that occur in response to user interactions (e.g., the click event fires when the user clicks on a page element).</p> <p>To respond to an event, you can attach an event listener to the relevant HTML element in JavaScript.</p>"},{"location":"js/event-listeners/#adding-an-event-listener","title":"Adding an Event Listener","text":"<p>The recommended procedure for this class is as follows:</p> <ol> <li>Declare a variable in JavaScript to reference the interactive HTML element.</li> <li>Write a function that defines what should happen when the interaction occurs.</li> <li>Add an event listener that calls the function in response to the intended event.</li> </ol>"},{"location":"js/event-listeners/#step-1-declare-a-variable-in-javascript-to-reference-the-interactive-html-element","title":"Step 1: Declare a variable in JavaScript to reference the interactive HTML element.","text":"<p>When an HTML element is assigned to a variable using <code>document.querySelector()</code>, it is treated as an object data type. More specifically, it is a class of object called HTMLElement.</p> <pre><code>&lt;button id=\"my-button\"&gt;Click Me&lt;/button&gt;\n</code></pre> <pre><code>const myButton = document.querySelector(\"#my-button\");\n</code></pre> <p>Note that the naming convention for the <code>id</code> attribute in HTML (and how i's used in <code>querySelector</code>) is kebab-case, while the variable name in JavaScript is camelCase. Although they are the same words, they represent different things in different contexts. This is also a valid way to assign an HTML element to a variable:</p> <pre><code>const button1 = document.querySelector(\"#my-button\");\n</code></pre> <p>However, using the same words for both the <code>id</code> and the variable name (styled appropriately in kebab-case or camelCase), simplifies the process, as it reduces the number of names you need to create and remember.</p>"},{"location":"js/event-listeners/#step-2-write-a-function-that-defines-what-should-happen-when-the-interaction-occurs","title":"Step 2: Write a function that defines what should happen when the interaction occurs","text":"<pre><code>function wasClicked() {\n  console.log(\"Button was clicked!\");\n}\n</code></pre>"},{"location":"js/event-listeners/#step-3-add-an-event-listener-that-calls-the-function","title":"Step 3: Add an event listener that calls the function","text":"<p>The event listener should be added to the element that fires the desired event - in this case, the button that the user interacts with.</p> <pre><code>myButton.addEventListener(\"click\", wasClicked);\n</code></pre> <p>Notice that the statement begins with the variable name that we created in step 1. The <code>addEventListener()</code> method takes 2 arguments: the event type to listen for (<code>\"click\"</code>) and the name of the function we created in step 2 (<code>wasClicked</code>).</p> <p>When using the console with embedded CodePen examples, you should open the Pen in its own window by clicking Edit On CodePen and then clicking the Console button in the CodePen editor.</p> <p> See the Pen    Event Listener (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/for-loops/","title":"For Loops","text":"<p>For loops are used to execute a block of code a specified number of times. They are structured using 3 expressions:</p> <pre><code>for (expression 1; expression 2; expression 3) {\n  // code block to be executed\n}\n</code></pre> <ol> <li>Expression 1 is executed once before code block in the curly brackets runs. Typically, this is used to initialize a counter variable, usually named <code>i</code>, and set to <code>0</code>.</li> <li>Expression 2 defines the condition for running the code block. Essentially, it determines the how many times the code block will execute.</li> <li>Expression 3 runs after each execution of the code block, typically written as <code>i++</code> to increment the counter variable.</li> </ol> <p> See the Pen    For Loops (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p> <p>The counter variable can be used in arithmetic expressions like any other number.</p> <p> See the Pen    For Loops Accumulator (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p> <p>The counter variable can be also be used as an index number to lookup each value in an array.</p> <p> See the Pen    For Loops and Arrays (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/for-loops/#for-of-loops","title":"For Of Loops","text":"<p>Arrays are an example of something that is iterable, meaning that we can loop over each value (iterate) using a special\u00a0<code>for...of</code>\u00a0loop.</p> <pre><code>for (const variable of iterable) {\n  // do something multiple time, once for each value in the sequence\n}\n</code></pre> <p>In this structure, the placeholder <code>iterable</code> is replaced by the source of the sequence (the name of the array). The placeholder <code>variable</code> becomes a temporary variable within the loop, holding a new value from the sequence in each iteration.</p> <p>To clarify, let's go through an example:</p> <pre><code>const quickArray = [12, 34, 56, 78];\n\nfor (const q of myArray) {\n  console.log(q);\n}\n</code></pre> <p>Here, <code>quickArray</code> is the source. The <code>for of</code> loop runs four times because there are four values in <code>quickArray</code>. Each time the loop runs, <code>q</code> represents each successive value in the array, starting at <code>12</code>, then <code>34</code>, then <code>56</code>, and so on.</p> <p>Why did we call the temporary variable <code>q</code>? Any name is valid, though it is common to see the first letter of the array name used as the temporary variable. Or, in the case of an array with a plural variable name, the singular form may be used as the name for the temporary variable.</p> <pre><code>const months = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\"\n];\n\nfor (const month of months) {\n  console.log(month);\n}\n</code></pre> <p> See the Pen    For Of Loops (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/forms/","title":"Forms","text":"<p>The <code>&lt;form&gt;</code> element is used to collect user data with one or more inputs and either process the values directly in JavaScript or submit the data to a server. Grouping multiple inputs in a <code>&lt;form&gt;</code> is beneficial because it enables access to all values in a single dataset using a single \"submit\" event (often triggered with an <code>&lt;input type=\"submit\"&gt;</code>).</p> <p>Adding the <code>name</code> attribute to inputs is crucial when working with forms, as it allows access to individual values as properties of the form.</p> <p>In the examples below, you'll notice that while values are correctly logged to the console upon form submission, the page reloads with a 404 error. This happens because the form's default action is to send data to a server, and the error occurs because we have not set up a server to receive the data. This is expected behavior and will not be an issue once we move to placing forms within modals in later readings and examples.</p> <p> See the Pen    Form Submission (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/forms/#input-validation","title":"Input Validation","text":"<p>Validating inputs ensures that the data entered by the user matches the expected format. There are many ways to apporach input validation with varying levels of complexity, but the most direct and simlple implementation is to use the input <code>type</code> attribute that best fits the requirements, along with the <code>required</code> attribute to prevent empty values.</p> <p>You can read more about the various <code>type</code> attributes for inputs here.</p> <p> See the Pen    Form Submission (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/functions/","title":"Functions","text":"<p>Functions are reusable blocks of code designed to perform a specific task or group of related tasks. While you can accomplish a lot without writing your own functions, they can help reduce redundancies and are crucial for some of the workflows in this class.</p>"},{"location":"js/functions/#declaring-functions","title":"Declaring Functions","text":"<p>To use a cooking analogy... think of writing a function kind of like training a fellow cook on a recipe.</p> <p>First, you would define and teach them the individual steps:</p> <ol> <li>Chop stuff.</li> <li>Saut\u00e9 and simmer.</li> <li>Season to taste.</li> </ol> <p>Then, in the future, you could simply ask: Can you please make some marinara sauce?</p> <p>Start your function declaration with the <code>function</code> keyword, followed by a name (using the naming conventions from our Style Guide), then parentheses and curly braces. The individual steps of your function go inside of the curly braces.</p> <pre><code>function makeSauce() {\n  console.log(\"Chop stuff\");\n  console.log(\"Saut\u00e9 and simmer\");\n  console.log(\"Season to taste\");\n}\n</code></pre> <p>Function declarations can be placed anywhere, though I recommend putting them at the bottom of your <code>script.js</code> file for consistency.</p>"},{"location":"js/functions/#calling-functions","title":"Calling Functions","text":"<p>Declaring a function does not actually execute the code inside the function. To run a function, call it using the function name followed by parentheses:</p> <pre><code>makeSauce();\n</code></pre> <p>When using the console with embedded CodePen examples, you should open the Pen in its own window by clicking Edit On CodePen and then clicking the Console button in the CodePen editor.</p> <p> See the Pen    Function Declaration (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/introduction/","title":"JavaScript","text":"<p>JavaScript began as the programming language for the web. Since the initial release, its use has expanded to non-browser environments, including servers and desktop applications. In fact, VS Code is built using a framework called Electron, a popular tool that allows web developers to create desktop applications.</p> <p>While HTML creates the content and structure of a page, and CSS adds styling and animation, JavaScript provides dynamic behavior. Take a look at the embedded Pen below. While you may not fully understand what the JavaScript is doing at this point, some parts of the code might seem familiar. Try editing the code to change the message that is displayed when you click the button.</p> <p>To learn more about JavaScript and its uses, read the What is JavaScript? article on MDN Web Docs.</p> <p> See the Pen    JavaScript Introduction (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/manipulating-style-properties/","title":"Manipulating Style Properties","text":"<p>In general, it is recommended to change styling with <code>classList.toggle()</code>, <code>classList.add()</code>, and/or <code>classList.remove()</code> whenever possible, especially when alternating between two states. However, if more direct or continuous control is required, <code>style.setProperty()</code> may be a better fit.</p> <pre><code>style.setProperty(\"property-name\", \"value\");\n</code></pre> <p>The <code>\"property-name\"</code> string can be any familiar CSS styling property, such as <code>\"background-color\"</code> or <code>\"font-size\"</code>. For the <code>\"value\"</code>, units usually need to be appended using string concatenation e.g. by adding <code>\"px\"</code> or <code>\"rem\"</code> to the end of a variable or number.</p> <p> See the Pen    Manipulating Style Properties (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/modals/","title":"Modals","text":"<p>A modal is a pop-up that appears on top of the current page, taking priority and preventing interaction with underlying content in the <code>&lt;body&gt;</code> until it is either submitted or closed.</p>"},{"location":"js/modals/#the-dialog-element","title":"The <code>&lt;dialog&gt;</code> element","text":"<p>Designing and implementing modals is straightforward with the <code>&lt;dialog&gt;</code> element. It includes attributes, properties, and methods that make it easy to use and customize as a modal, especially for collecting user-submitted information.</p> <p>The <code>&lt;dialog&gt;</code> element can be styled like any other HTML element using properties like <code>border</code>, <code>background-color</code>, <code>box-shadow</code>, and more. Modals can be displayed and dismissed using the <code>showModal()</code> and <code>close()</code> methods, respectively.</p> <p>When a <code>&lt;form&gt;</code> is put in a modal and given the attribute <code>method=\"dialog\"</code>, the modal will close automatically upon form submission and fire a \"submit\" event.</p> <p> See the Pen    Modals (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/more-input-types/","title":"More Input Types","text":"<p>Buttons are the simplest form of control or input type. They present only one choice: to click or not to click, with no other information or decision-making required.</p> <p>There are many other HTML input types and input-like elements that vary in complexity and intended application. Whenever possible, the type of input presented to the user should be the best fit for the information being collected.</p> <p>This page provides an overview of some commonly used input types. A full reference for all valid input types can be found here.</p> <p>In each of the examples below, <code>click</code>, <code>change</code>, or <code>input</code> event listeners are used to gather values.</p>"},{"location":"js/more-input-types/#selection-controls","title":"Selection Controls","text":"<p>A selection control allows the user to choose from a group of predetermined choices. The selection control presented in the example below, radio buttons, is typically best for multiple-choice style questions in which only one choice can be selected at a time.</p> <p>Some important things to note about radio buttons:</p> <ul> <li>The name attribute given to the radio buttons groups them together so that only one can be selected at a time.</li> <li>Each radio button is paired with a <code>&lt;label&gt;</code> element to provide instructions. The <code>for</code> attribute of each <code>&lt;label&gt;</code> should match the <code>id</code> of the corresponding radio button.</li> <li>The <code>value</code> attribute should be gathered in JavaScript. It does not need to be the same as the <code>&lt;label&gt;</code> text.</li> <li>Since there are multiple radio buttons in a set, each with its own <code>id</code>, it can be a tricky to find the value of a checked radio button in JavaScript. The recommendation is to use <code>document.querySelector(\"input[type='radio']:checked\")</code> paired with a submit button.</li> </ul> <p> See the Pen    Selection Controls (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/more-input-types/#list-controls","title":"List Controls","text":"<p>List controls allow users to select from a small set of text strings, each representing a command, object, or attribute. The dropdown menu in the example below is created using <code>&lt;select&gt;</code> tags instead of <code>&lt;input&gt;</code> tags. Each item in the dropdown menu is created by adding <code>&lt;option&gt;</code> elements as children.</p> <p>Some important things to note about <code>&lt;select&gt;</code> dropdown menus:</p> <ul> <li>Like radio buttons, the <code>value</code> attribute is what will be gathered in your JavaScript. This does not need to match the displayed text.</li> <li>It is recommended to put instructions in the first <code>&lt;option&gt;</code> with an empty <code>value</code>, as this will be the first thing the user sees by default. This will also prompt the user to make a selection.</li> </ul> <p> See the Pen    List Controls (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/more-input-types/#entry-controls","title":"Entry Controls","text":"<p>Entry controls enable users to supply their own value. The most basic entry control is the <code>&lt;input&gt;</code> element with type attribute <code>text</code> (the default). However, there are other entry control types that may be better suited to certain data types. For example, the <code>email</code> type provides a simple way to check for valid email address formatting, while the <code>number</code> type includes increment and decrement buttons, as well as minimum and maximum attributes.</p> <p>The <code>placeholder</code> attribute of entry controls is also very useful. Placeholder text can provide sample values or hints when the <code>&lt;label&gt;</code> alone is not sufficient.</p> <p> See the Pen    Entry Controls (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/objects/","title":"Objects","text":"<p>When working with HTML elements in JavaScript, you are often using or changing the object's properties and methods.</p> <pre><code>// example properties\ntextDisplay.innerText = \"Hello!\";\nheadshotImage.src = \"images/headshot.webp\";\n\n// example methods\naudioFile.play();\ncompass.style.setProperty(\"font-size\", \"2rem\");\n</code></pre> <p>Remember that properties are charactertistcs about the object (often corresponding to HTML attrbutes), while methods are actions that the object can perform.</p> <p>You can also define your own objects to organize and provide context for data about something. For example, if you were describing Miami University, you might want to include information about the type of institution, when it was established, and where it is located. The object data type stores these as key/value pairs.</p> <pre><code>// format is key: value\n\nconst miamiOh = {\n  type: \"Public\", // type is key, \"Public\" is value\n  established: 1809, // established is key, 1809 is value\n  location: \"Oxford, OH\" // location is key, \"Oxford, OH\" is value\n};\n</code></pre> <p>The key provides context for the values. You can reference the individual values of an object using dot notation.</p> <pre><code>miamiOh.type; // returns \"Public\"\nmiamiOh.established; // returns 1809\n</code></pre> <p>You have already been using dot notation to interface with objects in JavaScript.</p> <pre><code>// the querySelector() method of the document object\ndocument.querySelector(\"text-input\");\n\n// the innerText property of the textInput object\ntextInput.innerText;\n</code></pre> <p> See the Pen    Objects (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/operators/","title":"Operators","text":"<p>In previous examples, you have likely encountered a few operators that have fairly obvious purposes:</p> <pre><code>const y = x + 10;\nconst z = x - 1;\n</code></pre> <p>Many other JavaScript operators are similarly self-explanatory, though some useful ones may require additional explanation.</p>"},{"location":"js/operators/#arithmetic-operators","title":"Arithmetic Operators","text":"<p>The standard arithmetic operators are</p> <ul> <li>Addition <code>+</code></li> <li>Subtraction <code>-</code></li> <li>Multiplication <code>*</code></li> <li>Division <code>/</code></li> </ul> <p>Other useful arithmetic operators in JavaScript include:</p> <ul> <li>Modulo <code>%</code> (returns the remainder of dividing two numbers)</li> <li>Increment <code>++</code> (increases a value by 1)</li> <li>Decrement <code>--</code> (decreases a value by 1)</li> </ul> <pre><code>let x = 24 % 7; // x is 3\nx++; // x is now 4\nx--; // x is now 3 again\n</code></pre>"},{"location":"js/operators/#order-of-precedence","title":"Order of Precedence","text":"<p>Remember PEMDAS from math class?</p> <ol> <li>Parentheses</li> <li>Exponents</li> <li>Multiplication</li> <li>Division</li> <li>Addition</li> <li>Subtraction</li> </ol> <p>This same order of operator precedence applies in JavaScript, so be sure to construct your expressions appropriately.</p> <pre><code>const notAverage = 5 + 10 + 15 / 3; // results in 20, which is NOT the average of 5, 10, and 15\nconst actuallyAverage = (5 + 10 + 15) / 3; // results in 10, which IS the average of 5, 10, and 15\n</code></pre>"},{"location":"js/operators/#assignment-operators","title":"Assignment Operators","text":"<p>Assignment operators execute an arithmetic operation and new value assignment in one step. This will not work on variables declared with <code>const</code> since the original value is being changed.</p> <pre><code>let x = 7;\nx += 3; // x is now 10\n</code></pre> <p>Other assignment operators include:</p> <ul> <li>Subtraction assignment <code>-=</code></li> <li>Multiplication assignment <code>*=</code></li> <li>Division assignment <code>/=</code></li> <li>Remainder assignment <code>%=</code></li> </ul>"},{"location":"js/operators/#string-concatenation","title":"String Concatenation","text":"<p>When working with strings, <code>+</code> is the concatenation operator, joining strings together. String concatenation is especially useful for inserting values into longer messages.</p> <pre><code>const myName = \"Eric\";\nconst welcomeMessage = \"Welcome, \" + myName + \".\";\nconsole.log(welcomeMessage); // logs \"Welcome, Eric.\" to the console\n</code></pre> <p>When using the console with embedded CodePen examples, you should open the Pen in its own window by clicking Edit On CodePen and then clicking the Console button in the CodePen editor.</p> <p> See the Pen    Operators 1 (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p> <p></p> <p> See the Pen    Operators 2 (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/using-the-console/","title":"Using the Console","text":"<p>The console is part of the Developer Tools in your browser. While anyone can open the developer tools, the console is typically not viewed by users. Take a moment to ensure you can find your browser's console.</p> <p>One of the console's main purposes is to display messages for developers. These messages can include automatically generated warnings and errors, but you can also manually log information using the <code>console.log()</code> method.</p> <p>CodePen has its own simplified console. You will still see console output from your Pen in the the browser\u2019s developer tools, but be aware that there will likely be additional messages not generated by the JavaScript in your Pen, which could be confusing.</p> <p>When using the console with embedded CodePen examples, you should open the Pen in its own window by clicking Edit On CodePen and then clicking the Console button in the CodePen editor.</p> <p> See the Pen    Console (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/variables/","title":"Variables","text":"<p>A variable is a named container for data. The name of the variable is up to you (take a look at naming guidelines in the Style Guide), but ideally, it should be easy to write and remember while also providing context for the data being stored.</p> <p>To declare a variable, start with the keyword <code>const</code> (for values that will not change) or <code>let</code> (for values that may change) and assign the value using <code>=</code>.</p> <pre><code>const profName = \"Eric\"; // will never change\nlet profCity = \"Oxford\"; // may change in the future\nconst x = 2021; // terrible variable name, what is it for?\nconst year = 2021; // not a great variable name, too generic\nconst yearHired = 2021; // better variable name\n</code></pre> <p>When using the console with embedded CodePen examples, you should open the Pen in its own window by clicking Edit On CodePen and then clicking the Console button in the CodePen editor.</p> <p> See the Pen    Variables (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/old/Xtimed-functions/","title":"Timed Functions","text":"<p>There are often instances where your application requires something to occur at a regular time interval regardless of user activity. Some examples include:</p> <ul> <li>An autosave function that automatically saves the user's work every 5 minutes.</li> <li>A timer that reports elapsed time while taking a quiz.</li> <li>An app that automatically checks the internet for new Taylor Swift news every minute.</li> </ul> <p>In these scenarios, the <code>setInterval()</code> method can be used to repeatedly call a function with a specific delay between each call.</p>"},{"location":"js/old/Xtimed-functions/#setinterval","title":"setInterval()","text":"<p>Writing functions to be called by <code>setInterval()</code> is no different than writing them for other methods (like event listeners). The difference is primarily in how the function is called.</p> <pre><code>setInterval(function, delay);\n</code></pre> <p>The delay is expressed in milliseconds, so <code>1000</code> is equivalent to 1 second.</p> <p> See the Pen    setInterval Random (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p> <p>In the example below, the <code>setProperty()</code> method is introduced as a way to manually change a single style property from JavaScript.  You should aim to use class toggling to change styling whenever possible. However, <code>setProperty()</code> is required if you want to provide different values depending on other conditions. <pre><code>element.style.setProperty(propertyName, value);\n</code></pre> The <code>propertyName</code> argument can be any familiar CSS styling property formatted as a string, like <code>\"background-color\"</code> or <code>\"font-size\"</code>. For <code>value</code>, you will usually need to use string concatenation to append units e.g. add <code>\"px\"</code> or <code>\"rem\"</code> to the end of a number.</p> <p>The <code>shift</code> function is called every second to randomly move the text by changing the <code>translate</code> property, while the <code>spin</code> function is called every 10ms to continuously rotate the bar. Notice how <code>\"px\"</code> and <code>\"deg\"</code> are concatenated to the variables in JavaScript before they are passed as arguments to <code>setProperty()</code>.</p> <p> See the Pen    setInterval with setProperty (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/old/Xtimed-functions/#clearinterval","title":"clearInterval()","text":"<p>Each <code>setInterval()</code> method returns a unique ID. Assign this ID to a variable and use it later with <code>clearInterval()</code> if you need to cancel the original timed action.</p> <p> See the Pen    clearInterval Random (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"ref/additional-resources/","title":"Additional Resources","text":"<p>If you are interested in additional help, review, or inspiration, you may find the links below to be useful.</p>"},{"location":"ref/additional-resources/#videos-for-tutorials-tips-and-inspiration","title":"Videos for Tutorials, Tips, and Inspiration","text":"<ul> <li>Kevin Powell</li> <li>Web Dev Simplified</li> <li>CSS Tricks</li> </ul>"},{"location":"ref/additional-resources/#mdn-web-docs","title":"MDN Web Docs","text":"<ul> <li>HTML Elements Reference</li> <li>CSS Reference</li> <li>JavaScript Basics</li> </ul>"},{"location":"ref/additional-resources/#css-tricks","title":"CSS Tricks","text":"<ul> <li>CSS Flexbox Layout Guide</li> <li>CSS Grid Layout Guide</li> </ul>"},{"location":"ref/additional-resources/#practice","title":"Practice","text":"<ul> <li>Flexbox Froggy</li> <li>Grid Garden</li> </ul>"},{"location":"ref/ai/","title":"Aritifical Intelligence","text":"<p>Excerpted from the course syllabus:</p> <p>I encourage the use of AI tools as companions to help brainstorm, troubleshoot, and proofread. However, it is important that you meet assignment objectives and submit quality work. While I cannot address every scenario, here are a few suggestions and requirements:</p> <ul> <li>Write specific and detailed prompts.</li> <li>Verify facts, statistics, or procedures independently.</li> <li>Start with your own ideas, then use AI to assist with revisions.</li> <li>For IMS322: You are expected to use the techniques from class examples and demonstrations, even when generating code using GitHub Copilot or other AI tools. Review the specific assignment objectives for more detailed requirements.</li> </ul>"},{"location":"ref/browser-review/","title":"Browser Review","text":"<p>As discussed during Setup, browsers are built on different engines. Most things will similarly across all browsers, but you may occasionally encounter situations where an element or style renders differently, or a feature want to use has not yet been implemented.</p> <p>The content covered in this class has been selected to ensure support across all modern browsers. However, unexpected quirks or surprises may still arise. If you're troubleshooting a problem in Chrome and can't find the cause in your code, try opening your project in Firefox (or vice versa). You may find that it works as expected in a different browser, which will help you focus on addressing specific cross-browser compatibility issues.</p>"},{"location":"ref/browser-review/#developer-tools","title":"Developer Tools","text":"<p>All modern browsers have built-in Developer Tools to assist with development. While many features of Developer Tools will not be covered this semester, it is essential to be familiar with the following concepts:</p> <ul> <li>Finding the Developer Tools.</li> <li>Viewing and editing the HTML content of an open page.</li> <li>Viewing and editing the CSS of an open page.</li> <li>Opening a page in Device Mode or Responsive Design Mode, which allows you to test your site at different screen sizes and orientations.</li> </ul> <p>The links below cover these topics for Chrome and Firefox. If you are using a different Chromium-based browser, such as Edge or Brave, the Chrome documentation should be similar enough to get you started, but you may want to look for specific documentation for those browsers as well.</p> <p>Chrome:</p> <ul> <li>Open Chrome DevTools</li> <li>View and Change the DOM (HTML)</li> <li>View and Change CSS</li> <li>Simulate Mobile Devices with Device Mode (Responsive Design Mode)</li> </ul> <p>Firefox:</p> <ul> <li>Open the Inspector</li> <li>UI Tour of the Inspector</li> <li>Examine and Edit HTML</li> <li>Examine and Edit CSS</li> <li>Responsive Design Mode</li> </ul>"},{"location":"ref/html-review/","title":"HTML Review","text":""},{"location":"ref/html-review/#basic-elements","title":"Basic Elements","text":"<p>You should be familiar with all of the tags listed below, which have been excerpted from Kevin Powell's \"The Only Tags You Need to Know (for now).\"</p> <ul> <li>Metadata tags: <code>&lt;html&gt;</code> <code>&lt;head&gt;</code> <code>&lt;title&gt;</code> <code>&lt;link&gt;</code> <code>&lt;body&gt;</code></li> <li>Content tags: <code>&lt;h1&gt;</code>...<code>&lt;h6&gt;</code> <code>&lt;p&gt;</code> <code>&lt;a&gt;</code> <code>&lt;ol&gt;</code> <code>&lt;ul&gt;</code> <code>&lt;li&gt;</code> <code>&lt;span&gt;</code> <code>&lt;img&gt;</code></li> <li>Layout tags: <code>&lt;header&gt;</code> <code>&lt;main&gt;</code> <code>&lt;footer&gt;</code> <code>&lt;nav&gt;</code> <code>&lt;article&gt;</code> <code>&lt;section&gt;</code> <code>&lt;div&gt;</code></li> </ul>"},{"location":"ref/html-review/#semantic-html","title":"Semantic HTML","text":"<p>Semantic HTML tags describe the contents of the element and improve accessibility for people that use screen readers. Try to use the most appropriate tags whenever possible.</p> <p>Examples of semantic tags include:</p> <ul> <li><code>&lt;form&gt;</code> (contains a collection of inputs)</li> <li><code>&lt;h1&gt;</code> (contains the top-level page heading)</li> <li><code>&lt;main&gt;</code> (identifies the main content area of the page)</li> <li><code>&lt;nav&gt;</code> (contains links to navigate the site)</li> </ul> <p>Examples of generic tags:</p> <ul> <li><code>&lt;span&gt;</code></li> <li><code>&lt;div&gt;</code></li> </ul>"},{"location":"ref/html-review/#attributes","title":"Attributes","text":"<p>You will likely need use all of these attributes in your projects throughout the semester:</p> <ul> <li><code>alt</code>: alternate text for an <code>&lt;img&gt;</code> tag</li> <li><code>class</code>: for use as a selector in CSS</li> <li><code>href</code>: url for <code>&lt;a&gt;</code> tags</li> <li><code>id</code>: for use as a query in JavaScript</li> <li><code>src</code>: path to image to be displayed for <code>&lt;img&gt;</code> tags</li> </ul>"},{"location":"ref/introduction/","title":"Reference","text":"<p>This section of the site provides several miscellaneous resources, including review content, policies, recommended procedures, and external utilities.</p> <p>Directory</p> <ul> <li>Additional Resources: Links to other good online resources for learning HTML, CSS, and JavaScript.</li> <li>Aritifical Intelligence: A copy of the Artificial Intelligence policy for this class (duplicated from the syllabus).</li> <li>Browser Review: Basic information about different browser types and their built-in development tools.</li> <li>HTML Review: Things to review in HTML to refresh your memory from previous classes.</li> <li>Miscellaneous Examples: A collection of various \"how-to\" examples.</li> <li>Optimizing Images: Information about effectively preparing images and implementing them in HTML and CSS.</li> <li>Utilities: Some recommended applications and online tools to help with development.</li> </ul>"},{"location":"ref/misc-examples/","title":"Miscellaneous Examples","text":"<p>This page includes a collection of basic examples for unique scenarios that fall outside of the regular course content. They will not be covered during class but can be adopted and modified for assignments as needed.</p>"},{"location":"ref/misc-examples/#click-to-reveal","title":"Click to Reveal","text":"<p>Uses <code>position: absolute</code> to place one element on top of another, then changes the top element's opacity to make it appear as though the bottom element is being revealed. Be very careful when using <code>position: absolute</code>. It should only be implemented when absolutely necessary. Layout positioning may become unpredictable when modifying the position property. For additional information, reference this MDN Web Docs article.</p> <p> See the Pen    Click to Reveal (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"ref/misc-examples/#plus-minus-indicator","title":"Plus-Minus Indicator","text":"<p>Uses <code>position: absolute</code> to draw a separate vertical line on top of a horizontal line (both created using <code>&lt;div&gt;</code> elements) in order to independently change only the vertical line and create a smooth transition from + to -.</p> <p> See the Pen    Plus-Minus Indicator (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"ref/misc-examples/#working-with-background-images","title":"Working with Background Images","text":"<p> See the Pen    Background Images (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"ref/misc-examples/#date-formatting","title":"Date Formatting","text":"<p> See the Pen    Date Formatting (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"ref/misc-examples/#flex-wrap-sizing","title":"Flex-wrap Sizing","text":"<p>When wrapping items in a flexbox, one of the challenges is to create items with flexible yet consistent widths, especially when there are fewer items on the bottom row. The approach used in this example (adapted from the GameStop site) uses media queries to set the <code>width</code> of items to progressively smaller <code>%</code> based on window width.</p> <p>There are a couple of accommodations that need to be made when calculating widths this way in a flexbox:</p> <ul> <li>The flexbox <code>gap</code> property cannot be used reliably when attempting to divide the row evenly with <code>%,</code> so we've simulated the gap by putting the items in <code>div</code> containers and adding <code>padding</code> to the container.</li> <li>Since this also means that the <code>padding</code> doubles up between items, side padding is added to the flexbox row to compensate.</li> </ul> <p> See the Pen    Flex-wrap Sizing (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"ref/optimizing-images/","title":"Optimizing Images","text":""},{"location":"ref/optimizing-images/#image-resolution-and-compression","title":"Image Resolution and Compression","text":"<p>Although internet speeds have greatly increased over the years, it is still important to reduce image file sizes using appropriate resolution and compression settings.</p> <p>For resolution, consider how much of the browser window your images will cover (in pixels), then double that value when cropping or downloading image files (to accommodate HiDPI displays). Assuming a maximum layout width of <code>1100px</code>:</p> <ul> <li>An image spanning the entire body should have a width around <code>2200px</code>.</li> <li>An image spanning half the body (e.g., in a 2-column layout) should have a width around <code>1100px</code>.</li> <li>An image spanning one-third the body (e.g., in a 3-column layout) should have a width around <code>734px</code>.</li> <li>When using Lorem Picsum, specify the required resolution in the URL.</li> <li>When downloading images from Unsplash, another stock photo site, or using your own images, resize them with Squoosh or your preferred photo editing tool before adding them to your project.</li> </ul> <p>You are not expected to perfectly match every image to its layout proportions, but keep in mind that even a fullscreen image rarely needs to exceed the resolution of a 4K display. Our GitHub autograder will check that no image files are larger than <code>3840px</code> in width, as anything larger is unnecessary.</p> <p>There are several different types of image compression codecs suitable for web development. For simplicity, all images used in your projects should be in the WebP format.</p> <ul> <li>When using Lorem Picsum, simply add <code>.webp</code> to the end of the URL.</li> <li>For all other image sources, choose the WebP codec when compressing your files using Squoosh or another application.</li> </ul>"},{"location":"ref/optimizing-images/#fluid-images","title":"Fluid Images","text":"<p>It is highly recommended to start sizing all <code>&lt;img&gt;</code> elements using only <code>width: 100%</code> (the default in project templates). This ensures they responsively fill their closest parent container, regardless of the original resolution of the image file. It also allows responsive layout containers like Flexbox and Grid to manage image sizing effectively when multiple images appear in the same row.</p> <p>If needed, wrap an <code>&lt;img&gt;</code> in a <code>&lt;figure&gt;</code> element with a <code>&lt;figcaption&gt;</code> to keep images and captions paired, even when the browser window resizes. Note that <code>&lt;figure&gt;</code> has a default margin, which you may want to adjust or remove for better spacing.</p> <p> See the Pen    Fluid Images (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"ref/utilities/","title":"Utilities","text":""},{"location":"ref/utilities/#color","title":"Color","text":"<ul> <li>Color Picker: Quick color reference and RGB/HEX converter.</li> <li>Mac Digital Color Meter: Mac application to find values for any onscreen color.</li> <li>Windows Color Picker utility: Windows application to find values for any onscreen color.</li> </ul>"},{"location":"ref/utilities/#images","title":"Images","text":"<ul> <li>Lorem Picsum: Source for hosted stock images (primarily for use with CodePen).</li> <li>Squoosh: Image resizing, cropping, and compression.</li> <li>Unsplash: Source to download free high-quality stock images.</li> </ul>"},{"location":"ref/utilities/#css-generators","title":"CSS Generators","text":"<p>Tools that help generate complicated CSS code to achieve a specific look.</p> <ul> <li>Box Shadow</li> <li>Gradient</li> <li>Slider</li> <li>More at CSS Portal</li> </ul>"},{"location":"ref/utilities/#miscellaneous","title":"Miscellaneous","text":"<ul> <li>AudioMass: Simple audio editing and conversion.</li> </ul>"},{"location":"ref/wireframes/","title":"Wireframes","text":"<p>In this class, the objective for wireframes is to create a visual representation that closely matches the desired final product, including the actual image files that will be used. Your wireframes should also include annotations for the following:</p> <ul> <li>Color-coded outlines representing the planned HTML structure.</li> <li>The font family or families intended for the final design.</li> <li>HEX or RGB color codes defining the design's color scheme.</li> </ul> <p>For submission, you\u2019ll need to provide both an annotated and unannotated version of your wireframe. To streamline this process, it\u2019s recommended to use a drawing application with layers, allowing you to easily toggle annotations on and off before exporting.</p> <p>Most projects in this class will include an assessment of how accurately the wireframe is translated into the final submission.</p> Wireframe Example: Annotated Wireframe Example: Unannotated"}]}