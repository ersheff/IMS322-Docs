{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"IMS322 Docs","text":""},{"location":"css/","title":"CSS","text":""},{"location":"miscellaneous/","title":"Miscellaneous","text":""},{"location":"miscellaneous/#optimizing-images","title":"Optimizing Images","text":""},{"location":"miscellaneous/#image-resolution-and-compression","title":"Image Resolution and Compression","text":"<p>Although internet speeds are much faster than they used to be, it is still important to reduce image file sizes if possible with suitable resolution and compression settings.</p> <p>For resolution, you should consider how much of the browser window your images will cover (in pixels), and then double that value when cropping or downloading image files. Assuming a maximum <code>1100px</code> layout width:</p> <ul> <li>An image that will span the entire body should have a width around <code>2200px</code>.</li> <li>An image that will span half the body (e.g. in a 2-column layout) should have a width around <code>1100px</code>.</li> <li>An image that will span 1/3 the body (e.g. in a 3-column layout) should have a width around <code>734px</code>.</li> <li>When using images from Lorem Picsum, specify the resolution in the URL.</li> <li>When using images downloaded from Unsplash, another stock photo site, or your own original image files, resize them using Squoosh or your preferred photo editing application before incorporating them into your project.</li> </ul> <p>There are several different types of image compression suitable for the web. For simplicity, all images used in your projects should be in the \"WebP\" format.</p> <ul> <li>When using images from Lorem Picsum, simply add <code>.webp</code> to the end of the URL.</li> <li>When using images downloaded from Unsplash, another stock photo site, or your own original image files, choose \"WebP\" when compressing your files using Squoosh or your preferred photo editing application before incorporating them into your project.</li> </ul>"},{"location":"miscellaneous/#image-containers","title":"Image Containers","text":"<p>It is highly recommended to wrap all <code>&lt;img&gt;</code> elements in a parent <code>&lt;div&gt;</code> or, if captions are needed, <code>&lt;figure&gt;</code> element (with <code>&lt;figcaption&gt;</code> tags). This will generally make it easier to attain the desired size, position, and aspect ratio in flexible layouts. Additionally, while it might not suit every need, setting <code>max-width: 100%</code> and <code>height: auto</code> as the default properties for all images will probably work best for most situations.</p> <p> See the Pen    Image Containers (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"old-index/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"old-index/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"old-index/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"review/","title":"Review","text":"<p>Before we start working with JavaScript, this class assumes some familiarity with the HTML, CSS, and general web browser concepts below. We will review much of this content at the beginning of the semester.</p>"},{"location":"review/#html","title":"HTML","text":""},{"location":"review/#basic-tagselements","title":"Basic tags/elements","text":"<p>Excerpted from Kevin Powell's \"The Only Tags You Need to Know (for now)\"</p> <ul> <li>Metadata tags: <code>&lt;html&gt;</code> <code>&lt;head&gt;</code> <code>&lt;title&gt;</code> <code>&lt;link&gt;</code> <code>&lt;body&gt;</code></li> <li>Content tags: <code>&lt;h1&gt;</code>...<code>&lt;h6&gt;</code> <code>&lt;p&gt;</code> <code>&lt;a&gt;</code> <code>&lt;ol&gt;</code> <code>&lt;ul&gt;</code> <code>&lt;li&gt;</code> <code>&lt;img&gt;</code></li> <li>Layout tags: <code>&lt;header&gt;</code> <code>&lt;main&gt;</code> <code>&lt;footer&gt;</code> <code>&lt;nav&gt;</code> <code>&lt;section&gt;</code> <code>&lt;div&gt;</code></li> </ul>"},{"location":"review/#semantic-html","title":"Semantic HTML","text":"<p>Semantic HTML tags describe meaning, contextualizing the contents of the element. They also improve accessibility for people that use screen readers. Try to use the most appropriate semantic tags whenever possible.</p>"},{"location":"review/#attributes","title":"Attributes","text":"<ul> <li><code>alt</code>: alternate text for an <code>&lt;img&gt;</code> tag</li> <li><code>class</code>: for use as a selector in CSS</li> <li><code>href</code>: url for <code>&lt;a&gt;</code> tags</li> <li><code>id</code>: for use as a query in JavaScript</li> <li><code>src</code>: path to image to be displayed for <code>&lt;img&gt;</code> tags</li> </ul>"},{"location":"review/#css","title":"CSS","text":""},{"location":"review/#common-properties","title":"Common Properties","text":"<ul> <li>background-color</li> <li>border</li> <li>color</li> <li>font-family</li> <li>font-size</li> <li>height</li> <li>margin</li> <li>max-height</li> <li>max-width</li> <li>min-height</li> <li>min-width</li> <li>opacity</li> <li>padding</li> <li>text-align</li> <li>transform</li> <li>width</li> </ul> <p>A comprehensive reference for all CSS properties can be found on MDN Web Docs.</p>"},{"location":"review/#css-box-model","title":"CSS Box Model","text":"<p>The CSS Box Model describes how margin, border, padding, and content relate to each other in an HTML element.</p>"},{"location":"review/#web-browsers","title":"Web Browsers","text":""},{"location":"review/#browser-options","title":"Browser Options","text":"<ul> <li>What web browsers are most commonly used?</li> <li>Why might someone choose one over another?</li> <li>Who are the developers of the most popular browsers?</li> </ul>"},{"location":"review/#developer-tools","title":"Developer Tools","text":"<ul> <li>Where are the Developer Tools in your browser?</li> <li>What is their purpose?</li> <li>How can they help you with your projects?</li> </ul>"},{"location":"review/#responsive-design-mode","title":"Responsive Design Mode","text":"<ul> <li>Where is the Responsive Design Mode in your browser?</li> <li>How does it work?</li> <li>What is it used for?</li> </ul>"},{"location":"setup/","title":"Setup","text":"<p>The sections on this page will lead you through the process of setting up the applications and accounts needed to complete IMS322 coursework. It is recommended that you follow the steps below in the order listed:</p> <ol> <li>Install Git.</li> <li>Create a GitHub account (if needed).</li> <li>Log in to CodePen, enable Format on Save in account settings, and create your first Pen.</li> <li>Install additional browsers as needed.</li> <li>Install VS Code and configure extensions and settings.</li> <li>Review coding assignment procedures.</li> </ol>"},{"location":"setup/#git","title":"Git","text":"<p>Git is a \"version control system\" that helps track and manage changes in files. While Git itself is very powerful, we will only be using it through the Source Control panel in VS Code.</p> Activity Bar: Source Control panel"},{"location":"setup/#mac","title":"Mac","text":"<p>Mac users should follow the Homebrew installation option:</p> <ol> <li>Install Homebrew.</li> <li>Run <code>brew install git</code> in Terminal. If prompted, install the command line developer tools. This will likely take a while.</li> </ol>"},{"location":"setup/#windows","title":"Windows","text":"<p>Windows users should use the 64-bit Git for Windows Setup under Standalone Installer.</p>"},{"location":"setup/#linux","title":"Linux","text":"<p>If you're using Linux, you probably don't need help installing Git! Follow the instructions here.</p>"},{"location":"setup/#github","title":"GitHub","text":"<p>GitHub is a platform for creating, storing, and managing code. It relies on Git to commit and sync changes between files stored locally on your computer (the ones that you'll be editing in VS Code) and online repositories. In this class, we will be using GitHub to manage all major assignments.</p> <ol> <li>Create a GitHub account.</li> <li>Register for GitHub Student Benefits (this will give you access to the GitHub Copilot AI assistant within VS Code).</li> </ol>"},{"location":"setup/#codepen","title":"CodePen","text":"<p>CodePen is a popular online code editor focused on creating and sharing snippets of HTML, CSS, and JavaScript. The embedded code examples throughout the IMS322 Docs site have been created using CodePen. One of the main reasons that we use CodePen for this class is because it allows you to edit embedded examples right on the page and see live results - try it out below! We will also regularly use CodePen instead of VS Code for smaller assignments, like weekly practice and in-class exercises.</p> <p>There are a few important things to note about CodePen and how it differs from the VS Code and GitHub workflow:</p> <ul> <li>You should log in to CodePen using your GitHub username and password. There is no actual connection between CodePen and GitHub; it simply uses the same account credentials.</li> <li>A project on CodePen is called a \"Pen.\" By default, a Pen includes HTML, CSS, and JavaScript editors, as well as a live preview.</li> <li>Make sure that the Format On Save option is checked in your account settings (found in the Editor Preferences section).</li> <li>The simplified HTML editor does not need a <code>&lt;head&gt;</code> element or <code>&lt;body&gt;</code> tags. You should start your HTML content from the first tag that would normally go after the opening <code>&lt;body&gt;</code> tag, like a <code>&lt;header&gt;</code> or <code>&lt;h1&gt;</code> element.</li> <li>There is no file hosting provided with free CodePen accounts. When you want to include images in CodePen assignments, you will need to use a URL instead of a file name for the <code>src</code> attribute of the <code>&lt;img&gt;</code> element. Generally, the content of images in CodePen-based assignments is not important, so a random image hosting service like Lorem Picsum will suffice.</li> </ul> <p> See the Pen    Embed Example (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"setup/#browsers","title":"Browsers","text":"<p>Although there are many different modern web browsers, there are essentially only three different browser engines currently in use. A browser engine is the software component under the hood that handles document layout, rendering, and security.</p> <ul> <li>WebKit is maintained by Apple and used for the desktop and mobile versions of Safari, which is the default browser on Apple devices.</li> <li>Blink is maintained by Google and powers all Chromium-based browsers, which include Google Chrome, Microsoft Edge, Brave, Opera GX, and others.</li> <li>Gecko is maintained by Mozilla and used for Firefox.</li> </ul> <p>You should have both Firefox and at least one Chromium-based browser installed on your laptop for this class. It is also recommended that you set one of these as the Live Server Custom Browser during VS Code configuration (instructions provided below).</p>"},{"location":"setup/#vs-code","title":"VS Code","text":"<p>Visual Studio Code (aka VS Code) is the code editor that we will be using for all major assignments in this class. After installing the VS Code application, follow the instructions below to configure extensions and settings.</p>"},{"location":"setup/#extensions","title":"Extensions","text":"<p>We will be using a small collection of VS Code extensions to assist with formatting and development. Search for the following extensions in the Extensions panel to install them:</p> <ul> <li>GitHub Copilot and Copilot Chat (AI code assistant, requires GitHub Student Benefits activation)</li> <li>JS-Beautify for VS Code (for HTML formatting)</li> <li>Prettier (for CSS and JavaScript formatting)</li> <li>Live Server (for quick and easy browser preview)</li> <li>Live Share (for collaborative coding, which we will primarily use during in-class troubleshooting and office hours meetings)</li> </ul> Activity Bar: Extensions panel"},{"location":"setup/#git-setup-and-github-login","title":"Git Setup and GitHub Login","text":"<p>Make sure that Git has finished installing before completing these steps.</p> <ol> <li>Click on the Terminal menu and choose New Terminal.</li> <li>In the Terminal panel, run the following two commands, inserting your own GitHub username and email where indicated (you will not see a confirmation message):    <code>git config --global user.name \"your_username\"</code> <code>git config --global user.email your@email.com</code></li> <li>Click the Accounts icon in the lower-left corner and sign in using your GitHub account.</li> </ol> Activity Bar: Accounts"},{"location":"setup/#editor-settings","title":"Editor Settings","text":"<ol> <li>Click on the gear icon in the lower-left and choose Settings. Search for Live Server Custom Browser and choose your preferred browser from the dropdown menu (Firefox or Chromium-based). This is the browser that will open automatically whenever you run the Live Server extension.</li> <li>Right-click the Activity Bar on the left side of the window. Uncheck Run and Debug. Ensure that only Explorer, Search, Source Control, Extensions, Live Share, Chat, and Accounts are checked.</li> <li>Go to the View menu and choose Command Palette... Use the search field to find and run the Preferences: Open User Settings (JSON) command. Copy-paste the text below into the open settings.json file, replacing any existing text, then save and close the file.</li> </ol> <pre><code>{\n  \"editor.minimap.enabled\": false,\n  \"breadcrumbs.enabled\": false,\n  \"editor.tabSize\": 2,\n  \"editor.formatOnSave\": true,\n  \"prettier.trailingComma\": \"none\",\n  \"[html]\": {\n    \"editor.defaultFormatter\": \"vsce-toolroom.vscode-beautify\"\n  },\n  \"[css]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  \"[javascript]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  \"[json]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  }\n}\n</code></pre>"},{"location":"setup/#assignment-procedures","title":"Assignment Procedures","text":"<p>Throughout the semester, coursework will be assigned using both CodePen and VS Code with GitHub. Some specific instructions and details in the Canvas assignment descriptions may differ on a case-by-case basis, but the general workflow for both platforms is outlined below.</p>"},{"location":"setup/#accepting-codepen-assignments","title":"Accepting CodePen Assignments","text":"<ol> <li>If the Canvas assignment instructions point to an embedded example Pen, click Edit On CodePen, then create a copy of it in your account by clicking the Fork button in the lower-right corner of the editor window. Otherwise, create a new empty Pen.</li> <li>Change the Pen name to the name provided in the Canvas assignment and click Save. If you need to find this Pen again later, it will be in Your Work.</li> </ol> Edit On CodePen CodePen: Fork"},{"location":"setup/#submitting-codepen-assignments","title":"Submitting CodePen Assignments","text":"<ol> <li>Click the Save button in the upper-right corner of the CodePen window.</li> <li>Click Share in the bottom-right corner and select Copy Link.</li> <li>Paste the copied link in the Website URL field of the corresponding Canvas assignment and click Submit Assignment.</li> </ol> CodePen: Save and Share"},{"location":"setup/#accepting-and-cloning-vs-code-assignments","title":"Accepting and Cloning VS Code Assignments","text":"<p>The first time you accept a VS Code assignment through GitHub Classroom, you will be asked to link your GitHub account to your name.</p> <ol> <li>Click the link in the corresponding Canvas assignment to accept the assignment on GitHub Classroom. Once your new repository is generated, it should be visible in your Top Repositories on GitHub. You can also find it by visiting the IMS322-Sheffield-F24 organization.</li> <li>Open VS Code. If an existing folder is already open, close it by going to the File menu and choosing Close Folder.</li> <li>Open the Source Control panel and click the Clone Repository button. Copy-paste the URL from your repository into the text field. You will be prompted for a location on your computer to save this folder.</li> <li>To open this folder in the future, go to the File menu and choose Open Folder...</li> </ol> Source Control: Clone Repository"},{"location":"setup/#working-with-vs-code-assignments","title":"Working With VS Code Assignments","text":"<ul> <li>Folders are very important when working in VS Code. You should always check the top of the Explorer panel to make sure that you are working within the desired assignment folder. The primary open folder acts as the \"root\" of your workspace where you will find your HTML, CSS, and JavaScript files, as well as any subfolders (e.g., for images).</li> <li>To preview your code in the browser, click the Go Live button in the bottom-right corner of the window (which is part of the Status Bar). This will use the Live Server extension to launch your project in your preferred browser. If you accidentally lose your browser preview window, you can either reopen the browser and navigate to <code>http://127.0.0.1:5500/</code> (replacing the last 4 digits with whatever port number appears in the Status Bar while the extension is running). Alternatively, you can click on the port number in the Status Bar to close the extension and relaunch it by clicking Go Live again.</li> </ul> Status Bar: Go Live Status Bar: Port # <ul> <li> <p>Some assignments in VS Code will have 2 stages: an initial draft, followed by a final submission. We will manage these stages by using different \"branches\" on GitHub. This way, you can submit the assignment multiple times without needing to create multiple repositories.</p> <ul> <li>By default, each GitHub repository is created with a \"main\" branch. This includes all assignment instructions and template files and will be the branch used for your final submission. Do not make any changes in the main branch until you are finished with your draft!</li> <li>The name of the branch that you are currently working in will always be visible in the Source Control Checkout button in the lower-left corner (part of the Status Bar).</li> <li>When starting an assignment that has a draft stage, the first thing that you should do after accepting and cloning the assignment is click on the Source Control Checkout button. This will open a menu for managing different branches. Choose Create New Branch... and name it \"draft.\" The draft branch will automatically include all of the files from the main branch. Then, in the Source Control panel, click Publish Branch. You should stage, commit, and sync everything as usual in the draft branch before switching over to main (described below).</li> <li>When you have finished your draft and are ready to start working on your final submission, you will need to \"merge\" everything from the draft branch into the main branch. To do so, switch to the main branch by clicking the Source Control Checkout button and choosing main from the menu. Then, in the Source Control panel, click the 3-dot button to open an action menu and choose Branch &gt; Merge... When prompted to choose the branch to merge from, choose draft.</li> <li>Merge conflicts may occur if changes are made in both the main and draft branches before merging. VS Code will highlight the conflicts that need to be resolved, but this can be a challenging process for beginners. Ideally, we will avoid merge conflicts altogether, but I recommend scheduling an office hours appointment if you run into this issue.</li> </ul> </li> </ul> Status Bar: Source Control Checkout button"},{"location":"setup/#committing-and-submitting-vs-code-assignments","title":"Committing and Submitting VS Code Assignments","text":"<p>These steps apply to both the draft (draft branch) and final (main branch) stages. It is recommended that you Stage and Commit after each major change (steps 1-3) and Sync often (step 4), even before you are finished.</p> <ol> <li>Open the Source Control panel.</li> <li>Stage all changes by clicking the + next to Changes.</li> <li>Enter a commit message and click the Commit button (use \"finished\" for your final commit).</li> <li>The Commit button should change to a Sync Changes button. Click this to finish syncing the latest changes to your online GitHub repository.</li> <li>Find your repository on GitHub.</li> <li>Go to the Settings tab within the repository and navigate to the Pages section.</li> <li>Under Branch, choose the appropriate branch (draft or main) and click Save.</li> <li>After a few moments, if you refresh the page, there should now be a URL near the top next to a Visit Site button. If you click this button, you should see your site open in a new window.</li> <li>Copy the URL generated by GitHub Pages, paste it in the Website URL field of the corresponding Canvas assignment, and click Submit Assignment.</li> </ol> Source Control: Stage and Commit changes"},{"location":"style-guide/","title":"Style Guide - XXX","text":"<p>Automatic checks: File names - index.html, style.css, script.js No CSS or JavaScript in the HTML file Kebab-case in HTML and CSS Script tags in head with defer keyword JavaScript functions run from event listeners, not HTML attributes CSS colors in HEX or rgb Variable declarations with let and const, not var No DOMContentLoaded or window.onload events Image files in webp format Image files in images folder Image files are not larger than 2200px</p> <p>Manual checks: Image file names are apporpriate Font is loaded correctly Layout works at 480px, 800px, and 1100px window widths Body is centered within the window and limited to 1100px width</p> <p>Many companies, large and small (e.g. Google, Airbnb, and more), adopt style guides to ensure that everyone creates similar well-organized code and aesthetically consistent designs.</p> <p>The IMS322 Style Guide has been assembled from excerpts from reputable sources and observations of best practices. Although it includes many widely adopted conventions, it is by no means intended to be the \"best\" or \"correct\" approach \u2014 after taking this class, you might consider other coding styles based on personal or professional preference.</p> <p>This guide is divided into 2 sections:</p> <ul> <li>Expectations: These are the \"specifications\" for all content produced in IMS322 - how to organize files, which file types and formats to use, layout requirements, etc. The conditions in this section will be referenced while reviewing submissions and have a direct impact on your grade.</li> <li>Formatting: These are the guidelines for how your code should look in terms of spacing and indentation. While you should review this information, for the most part, formatting is done automatically in CodePen and VS Code.</li> </ul>"},{"location":"style-guide/#expectations","title":"Expectations","text":""},{"location":"style-guide/#general","title":"General","text":""},{"location":"style-guide/#default-filenames","title":"Default filenames","text":"<ul> <li><code>index.html</code></li> <li><code>style.css</code></li> <li><code>script.js</code></li> </ul>"},{"location":"style-guide/#separation-of-concerns","title":"Separation of concerns","text":"<p>Do not enter any CSS in <code>&lt;style&gt;</code> tags or JavaScript in <code>&lt;script&gt;</code> tags in your HTML file. Reference files as needed in the <code>&lt;head&gt;</code> and write all CSS in the <code>style.css</code> file and JavaScript in the <code>script.js</code> file.</p>"},{"location":"style-guide/#fonts","title":"Fonts","text":"<p>Choose only from the following web safe fonts or a selection from Google Fonts :</p> <ul> <li>Arial (sans-serif)</li> <li>Verdana (sans-serif)</li> <li>Tahoma (sans-serif)</li> <li>Trebuchet MS (sans-serif)</li> <li>Times New Roman (serif)</li> <li>Georgia (serif)</li> <li>Courier New (monospace)</li> <li>Brush Script MT (cursive)</li> </ul> <p>The web safe fonts listed above should already be installed on your computer, but you may need to download and install fonts from Google Fonts to use in your wireframing application. Always include fallback fonts in your CSS.</p>"},{"location":"style-guide/#image-names-compression-and-organization","title":"Image names, compression, and organization","text":"<p>Rename long or cryptic image files whenever necessary. For example, <code>dog.webp</code> is much easier to type and identify than <code>neom-9E9NsEiUGxg-unsplash.webp</code>.</p> <p>All images used in your projects should be in the \"WebP\" format.</p> <p>When working with multiple image files, put them all in an \"images\" folder to help keep the file browser organized. Keep in mind, this means that the <code>src</code> attribute of your <code>&lt;img&gt;</code> elements will needs to include the folder as part of the file name e.g. <code>images/dog.webp</code>.</p>"},{"location":"style-guide/#naming-conventions","title":"Naming conventions","text":"<p>Write concise, searchable, and meaningful names. Only use common, easy-to-remember abbreviations if a name becomes excessively long.</p> <p>Class and ID attributes should always be written using the the \"kebab-case\" convention in which lowercase words are separated by hyphens.</p> <pre><code>&lt;p class=\"kebab-case\" id=\"kebab-case\"&gt;Blah blah blah.&lt;/p&gt;\n</code></pre> <p>Variables and functions should be written using the \"camelCase\" convention in which each word (except the first) starts with a capital letter (without spaces or hyphens).</p> <pre><code>const favoriteFruit = \"apple\";\n</code></pre>"},{"location":"style-guide/#css","title":"CSS","text":"<pre><code>* {\n  box-sizing: border-box;\n}\n\nbody {\n  max-width: 1100px;\n  margin: auto;\n}\n\np {\n  max-width: 80ch;\n}\n\nimg {\n  width: 100%;\n}\n\n@media (max-width: 800px) {\n}\n\n@media (max-width: 480px) {\n}\n</code></pre>"},{"location":"style-guide/#media-queries-and-display-size-targets","title":"Media queries and display size targets","text":"<p>Your project layouts will need to work at the following window widths (based on MDN Web Docs recommendations):</p> <ul> <li><code>480px</code> (mobile)</li> <li><code>800px</code> (tablet, narrow laptop/desktop windows)</li> <li><code>1100px</code> (wide laptop/desktop windows)</li> </ul> <p>Content in the <code>&lt;body&gt;</code> should not exceed the <code>1100px</code> maximum width, though background color extending outside that area is acceptable. Media queries for <code>480px</code> and <code>800px</code> widths will be pre-configured for you in every project's <code>style.css</code> file to use as needed.</p>"},{"location":"style-guide/#center-your-content-area","title":"Center your content area","text":"<p>All content should be constrained to one main column centered within the browser window. This can be accomplished by styling the <code>&lt;body&gt;</code> as a flexbox column or styling the primary content areas like <code>&lt;header&gt;</code> and <code>&lt;main&gt;</code> as flexbox columns.</p>"},{"location":"style-guide/#this","title":"This:","text":""},{"location":"style-guide/#not-this","title":"Not this:","text":""},{"location":"style-guide/#do-not-use-margin","title":"Do not use margin","text":"<p>The <code>margin</code> property affects content outside the element on which it is applied, which can cause problems in component-based layouts. Use <code>padding</code>, flexbox <code>justify-content</code> and/or <code>gap</code>, or padding elements to add space or adjust alignment in your layouts.</p>"},{"location":"style-guide/#use-relative-units-by-default","title":"Use relative units by default","text":"<p>Recommended relative units:</p> <ul> <li><code>%</code> - Percentage relative to the parent element.</li> <li><code>ch</code> - The width of the number \"0\" of the element's font.</li> <li><code>rem</code> - Relative to the default browser font size.</li> </ul> <p>In some cases, you may still find that the absolute unit <code>px</code> is the best fit. Some examples:</p> <ul> <li>If you want to ensure that a small image in a flexible container never stretches beyond its original resolution, set a <code>max-width</code> property in <code>px</code>.</li> <li>If you want to have specific control over the roundness of box corners, set <code>border-radius</code> in <code>px</code>.</li> </ul> <p>You can read more about all the valid absolute and relative units in this MDN Web Docs reference.</p>"},{"location":"style-guide/#only-use-hex-or-rgb-color-syntax","title":"Only use HEX or RGB color syntax","text":"<p>This will help ensure consistency with your wireframe application colors.</p> <ul> <li>Example HEX code: <code>#E9967A</code></li> <li>Example RGB code: <code>rgb(233, 150, 122)</code></li> </ul> <p>There are multiple color helpers on the Utilities page.</p>"},{"location":"style-guide/#do-not-style-with-id-selectors","title":"Do not style with ID selectors","text":"<p>Use element and class selectors and CSS nesting to avoid using ID selectors in CSS.</p>"},{"location":"style-guide/#this_1","title":"This:","text":"<pre><code>h2 {\n  color: #0000ff;\n}\n\n.warning {\n  color: #ff0000;\n  font-weight: bold;\n\n  button {\n    background-color: #ff9999;\n  }\n}\n</code></pre>"},{"location":"style-guide/#not-this_1","title":"Not this:","text":"<pre><code>#warning {\n  color: #ff0000;\n  font-weight: bold;\n}\n</code></pre>"},{"location":"style-guide/#javascript","title":"JavaScript","text":""},{"location":"style-guide/#loading-javascript-files","title":"Loading JavaScript files","text":"<p>Always put your <code>&lt;script&gt;</code> tags in the <code>&lt;head&gt;</code> element with the added <code>defer</code> keyword (not required when working in CodePen).</p> <pre><code>&lt;head&gt;\n  &lt;meta charset=\"UTF-8\" /&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n  &lt;link rel=\"stylesheet\" href=\"style.css\" /&gt;\n  &lt;script src=\"script.js\" defer&gt;&lt;/script&gt;\n  &lt;title&gt;IMS322&lt;/title&gt;\n&lt;/head&gt;\n</code></pre>"},{"location":"style-guide/#declare-variables-with-let-or-const-not-var","title":"Declare variables with let or const, not var","text":"<p>Use the keywords <code>let</code> (for values that will change) and <code>const</code> (for values that will not change) when declaring variables. Although it is still technically valid, do not use the outdated <code>var</code>.</p> <pre><code>let favoriteFruit = \"apple\";\nconst birthYear = 1986;\n</code></pre>"},{"location":"style-guide/#always-use-instead-of-in-if-statements","title":"Always use === instead of == in if statements","text":"<pre><code>if (name === \"John\") {\n  // stuff\n}\n</code></pre>"},{"location":"style-guide/#formatting","title":"Formatting","text":"<p>In both CodePen and VS Code, js-beautify is used for HTML formatting and Prettier is used for CSS and JavaScript formatting.</p> <p>To automatically format code in CodePen, go to the Editor Preferences in your account settings and check the \"Format on Save\" option under Editor Options. You can also manually format from the menu in each editor.</p> <p>The IMS322 VS Code profile that has been provided for you has \"Format on Save\" enabled by default. You can also manually format by right-clicking in any HTML, CSS, or JavaScript file and choosing \"Format Document.\"</p> <p>As long as your code is well-formed (i.e. not missing tags or brackets), all of the guidelines described below will be applied for you when using the built-in formatting tools in CodePen and VS Code.</p>"},{"location":"style-guide/#general-code-organization","title":"General Code Organization","text":"<p>Organize HTML, CSS, and JavaScript with blank lines and indentations.</p>"},{"location":"style-guide/#this_2","title":"This:","text":"<pre><code>&lt;body&gt;\n  &lt;header&gt;\n    &lt;h1&gt;My Big Project&lt;/h1&gt;\n  &lt;/header&gt;\n\n  &lt;main&gt;\n    &lt;p&gt;Tons of great content here.&lt;/p&gt;\n  &lt;/main&gt;\n\n  &lt;footer&gt;\n    &lt;p&gt;Like and subscribe!&lt;/p&gt;\n  &lt;/footer&gt;\n&lt;/body&gt;\n</code></pre> <pre><code>h2 {\n  font-size: 2.4rem;\n}\n\nh3 {\n  text-shadow: 1px 1px 2px red;\n  font-size: 2rem;\n}\n</code></pre> <pre><code>if (favoriteFruit === \"apple\") {\n  console.log(\"I like apples, too!\");\n}\n\nfunction declareLove() {\n  console.log(\"I love everything!\");\n}\n</code></pre>"},{"location":"style-guide/#not-this_2","title":"Not this:","text":"<pre><code>&lt;body&gt;\n  &lt;header&gt;\n    &lt;h1&gt;My Big Project&lt;/h1&gt;\n  &lt;/header&gt;\n  &lt;main&gt;\n    &lt;p&gt;Tons of great content here.&lt;/p&gt;\n  &lt;/main&gt;\n  &lt;footer&gt;\n    &lt;p&gt;Like and subscribe!&lt;/p&gt;\n  &lt;/footer&gt;\n&lt;/body&gt;\n</code></pre> <pre><code>h2 {\n  font-size: 2.4rem;\n}\nh3 {\n  text-shadow: 1px 1px 2px red;\n  font-size: 2rem;\n}\n</code></pre> <pre><code>if (favoriteFruit === \"apple\") {\n  console.log(\"I like apples, too!\");\n}\nfunction declareLove() {\n  console.log(\"I love everything!\");\n}\n</code></pre>"},{"location":"style-guide/#html","title":"HTML","text":""},{"location":"style-guide/#do-not-use-spaces-around-equals-signs-for-attributes","title":"Do not use spaces around equals signs for attributes","text":"<pre><code>&lt;img src=\"headshot.webp\" alt=\"Headshot\" /&gt;\n</code></pre>"},{"location":"style-guide/#javascript_1","title":"JavaScript","text":""},{"location":"style-guide/#use-semicolons-at-the-end-of-every-statement","title":"Use semicolons at the end of every statement","text":"<pre><code>let favoriteFruit = \"apple\";\n</code></pre>"},{"location":"style-guide/#use-double-quotes-for-strings","title":"Use double quotes for strings","text":"<pre><code>console.log(\"hello\");\n</code></pre>"},{"location":"style-guide/#add-a-space-around-operators-and-equals-signs","title":"Add a space around operators and equals signs","text":"<pre><code>const exampleOperation = exampleNumber * 2;\n</code></pre>"},{"location":"style-guide/#do-not-use-extra-spaces-inside-parentheses","title":"Do not use extra spaces inside parentheses","text":"<pre><code>if (favoriteFruit === \"apple\") {\n  console.log(\"I like apples, too!\");\n}\n</code></pre>"},{"location":"style-guide/#curly-brace-spacing","title":"Curly brace spacing","text":"<p>When using curly braces (e.g. in <code>if</code> statements and <code>function</code> declarations), the opening brace should be on the same line as the corresponding keyword. There should also be a space before the opening bracket.</p> <pre><code>if (favoriteFruit === \"apple\") {\n  console.log(\"I like apples, too!\");\n}\n\nfunction declareLove() {\n  console.log(\"I love everything!\");\n}\n</code></pre>"},{"location":"css/_introduction/","title":"CSS - XXX","text":""},{"location":"css/flexbox/","title":"Flexbox - XXX","text":"<p>Flexbox is used to create responsive layouts. It is typically best for 1-dimensional rows or columns, though more complex layouts can be achieved by nesting flexboxes inside of each other.</p> <p>From CSS Tricks:</p> <p>The main idea behind the flex layout is to give the container the ability to alter its items\u2019 width/height (and order) to best fill the available space (mostly to accommodate to all kind of display devices and screen sizes). A flex container expands items to fill available free space or shrinks them to prevent overflow.</p> <p>The CSS Tricks article linked above is an excellent reference for all things flexbox. From that article, there are 7 key properties that can be used to accomplish most layout goals:</p> <ul> <li>Container properties:</li> <li><code>display</code> - Set to <code>flex</code> to define a flex container (create a flexbox).</li> <li><code>flex-direction</code> - Set to <code>row</code> (the default) or <code>column</code>.</li> <li><code>flex-wrap</code> - By default, flexbox will try to fit everything in one row or column. Set this property to <code>wrap</code> to wrap flex items to multiple lines (only works if items have a fixed or minimum size).</li> <li><code>justify-content</code> - Defines the alignment along the main axis.</li> <li><code>align-items</code> - Defines the alignment along the cross axis.</li> <li><code>gap</code> - Controls the space between flex items.</li> <li>Item properties:</li> <li><code>flex</code> - Determines how much space an item will inhabit proportionally. For example, a flex item with <code>flex: 2</code> will take up twice as much space as a flex item with <code>flex: 1</code>.</li> </ul> <p>Demonstrated in the example below:</p> <ul> <li>Flexbox 1 is a row with 3 items in which the last item (with class <code>.double-item</code>) is twice as large as the other two due to the <code>flex: 2</code> property.</li> <li>Flexbox 2 is a column with 3 items in which the item width is limited to <code>80ch</code>. The items are then aligned to the center of the column with <code>align-items: center</code>.</li> <li>Flexbox 3 is a row with 6 items in which the item width is fixed at <code>20ch</code>. The <code>flex-wrap</code> property is set to <code>wrap</code>. This allows the items to wrap around to another row if there is not enough room to fit them all in the first row.</li> </ul> <p> See the Pen    Flexbox (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"css/grid/","title":"Grid - XXX","text":""},{"location":"css/hover/","title":"Hover - XXX","text":"<p>A \"pseudo-class\" keyword is added to the end of a selector to specify different styling properties for a special state of the selected elements. The keyword that you will likely use most often is <code>:hover</code>, which is used to define the element's appearance when hovering your cursor over it.</p> <p> See the Pen    :hover (IMS322 docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"css/input-styling/","title":"Input Styling - XXX","text":"<p>Styling inputs can sometimes be confusing and frustrating. Some familiar style properties behave as expected, like <code>background-color</code>, <code>color</code>, and <code>font-size</code>. Other useful yet less obvious properties and selectors for inputs are demonstrated in the example below, including:</p> <ul> <li><code>accent-color</code> changes radio button color when checked</li> <li><code>:active</code> pseudo-class selects buttons when they are in the active state (during a click, before the mouse is released)</li> <li><code>:focus</code> pseudo-class selects inputs when they are in the focus state (i.e. when the cursor is inside the input field)</li> <li><code>outline</code> changes the highlight color around inputs when they are in the focus state</li> <li><code>::placeholder</code> pseudo-element selects the contents of the placeholder attribute for styling</li> </ul> <p>To style sliders, it is recommended to use a CSS generator like the Style Input Range utility found on CSS Portal (also linked from the IMS322 Docs Utilities page).</p> <p> See the Pen    Input Styling (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"css/media-queries/","title":"Media Queries - XXX","text":"<p>Media queries allow you to apply different CSS styles depending on a device's screen resolution (typically width). They tend to be most effective when used for applying changes to layout and/or size properties between mobile and desktop displays.</p> <p> See the Pen    Media Queries (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"css/nesting/","title":"Nesting - XXX","text":"<p>Excerpted from MDN Web Docs \"Using CSS nesting\":</p> <p>[CSS Nesting] allows you to write your stylesheets so that they are easier to read, more modular, and more maintainable. As you are not constantly repeating selectors, the file size can also be reduced.</p> <p>You can use CSS nesting to create child selectors of a parent, which in turn can be used to target child elements of specific parents.</p> <p>While nesting may not be appropriate for all situations, a notable benefit is that the structure more closely resembles the corresponding HTML - meaning that children inside parent elements can be styled with child selectors inside parent selectors.</p> <pre><code>parent {\n  /* parent styles */\n\n  child {\n    /* child of parent styles */\n  }\n}\n</code></pre>    See the Pen    CSS Nesting (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen."},{"location":"css/relative-units/","title":"Relative Units - XXX","text":"<p>Using relative units by default is recommended in the IMS322 Style Guide because they will often make layout spacing and element sizing more consistent and flexible. In the embedded example below, each <code>&lt;p&gt;</code> has been sized using one of the relative units recommended for this class:</p> <ul> <li><code>%</code> - Percentage relative to the parent element.</li> <li><code>ch</code> - The width of the number \"0\" of the element's font.</li> <li><code>rem</code> - Relative to the default browser font size.</li> </ul> <p> See the Pen    Relative CSS Units (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"css/transition/","title":"Transition - XXX","text":"<p>Setting a transition time (in seconds) causes changes between two states to happen gradually. The example below demonstrates a transition time using the <code>:hover</code> pseudo-class to initiate a change.</p> <p> See the Pen    CSS Transitions (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"css/variables/","title":"Variables - XXX","text":"<p>You can declare CSS variables (aka custom properties) at the top of your stylesheet in the <code>:root</code> pseudo-element. These can then be referenced throughout the rest of the document by their variable name.</p> <p>CSS variables help to ensure consistency of custom properties throughout your site (e.g. apply a specific color in multiple places without needing to remember the exact HEX code). They can also make it easier to test variations since you only need to change a property once where it was initially declared - the change will automatically propagate through every instance where the variable was used.</p> <p> See the Pen    CSS Variables (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/_introduction/","title":"JavaScript","text":""},{"location":"js/arrays/","title":"Arrays - XXX","text":"<p>Individual pieces of data can gain more meaning when they are presented in context with other related data. For example, the latitude of the Miami University campus location is 39.511047326918174. Without the corresponding longitude of -84.72907894440365, you might have to traverse the entire planet to find it .</p> <p>Similarly, if you want to analyze trends in enrollment at Miami University, you'll need to look at several years' worth of data in order to get a clear picture.</p> <p></p> <p>In JavaScript, an array is a type of variable used to store sequences of values. Declare an array using the keyword <code>const</code>. The values in the array are surrounded by square brackets and separated by commas.</p> <pre><code>const myArray = [12, 34, 56, 78];\n</code></pre> <p>To read out a single value from the array, you refer to it by the index, which is the location within the array, starting at 0. For example, given myArray above:</p> <pre><code>myArray[0];\n</code></pre> <p>would return the first value: <code>12</code>.</p> <p>Why <code>const</code>?</p> <p>Typically, <code>let</code> is used to declare variables that can be updated while <code>const</code> is for variables that cannot be reassigned.</p> <pre><code>let x = 10;\nx = 11; // This is OK - x is now 11.\n\nconst y = 10;\ny = 11; // This is not OK - it will throw an error.\n</code></pre> <p>Many style guide conventions suggest using <code>const</code> whenever possible as it can help prevent bugs and improve code readability. In fact, there have been many instances in previous class examples and projects where <code>const</code>could have been used - for example, when assigning a variable to an HTML element using <code>document.querySelector()</code>.</p> <pre><code>const textReadout = document.querySelector(\"#text-readout\");\n</code></pre> <p>Even when declared using <code>const</code>, it is still possible to change the values within an array if needed.</p> <pre><code>const myArray = [12, 34, 56, 78];\nmyArray[0] = 99; // This is OK.\n</code></pre> <p> See the Pen    Arrays (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/basic-dom-manipulation/","title":"Basic DOM Manipulation","text":"<p>Although JavaScript was designed as the programming language of the web, HTML and JavaScript are different languages. JavaScript cannot understand HTML the way that it is written.</p> <p>For example, this is not valid JavaScript:</p> <pre><code>let mainHeading = &lt;h1&gt;Welcome&lt;/h1&gt;;\n</code></pre> <p>The Document Object Model, or DOM, is the \"representation of the objects that comprise the structure and content of a document on the web.\" You can think of the DOM as a translation of HTML that JavaScript can understand. It defines:</p> <ol> <li>The HTML elements as objects (the way an HTML element is treated when assigned to a variable).</li> </ol> <pre><code>let mainHeading = document.querySelector(\"#main-heading\");\n</code></pre> <ol> <li>The properties (values or attributes) of HTML elements. Properties can typically be recognized because they appear after a variable name, separated by a <code>.</code></li> </ol> <pre><code>headshotImage.src = \"images/headshot.webp\";\n</code></pre> <ol> <li>The methods (actions) that can be performed on or by HTML elements. Methods can typically be recognized because they appear after a variable name, separated by a <code>.</code>, with <code>()</code> at the end. Many (but not all) methods require an argument inside the <code>()</code> to be passed to the method.</li> </ol> <pre><code>primaryButton.classList.toggle(\"active\");\n</code></pre> <ol> <li>The events that can be fired by HTML elements.</li> </ol> <pre><code>primaryButton.addEventListener(\"click\", toggleState);\n</code></pre>"},{"location":"js/basic-dom-manipulation/#getting-started-with-properties","title":"Getting Started with Properties","text":""},{"location":"js/basic-dom-manipulation/#innertext","title":"innerText","text":"<p>To change the text displayed in an HTML element from JavaScript, assign the <code>innerText</code> property to the desired value:</p> <pre><code>element.innerText = \"Hello!\";\n</code></pre> <p> See the Pen    innerText (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/basic-dom-manipulation/#values","title":"Values","text":"<p>Some HTML elements, notably <code>&lt;input&gt;</code>, have a value attribute which can be read or assigned as a property in JavaScript.</p> <p>Take a look at the 4 sliders below. Each one is give a different initial value attribute in the HTML, which is why they all start at different positions (sliders have a range from 0 to 100 by default).</p> <p> See the Pen    Input Values (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p> <p>These values can be read in JavaScript (e.g. in response to changes to the slider made by the user), but they can also be set from JavaScript.</p> <p> See the Pen    Getting and Setting Values (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/basic-dom-manipulation/#getting-started-with-methods","title":"Getting Started with Methods","text":"<p>Some methods - like <code>document.querySelector()</code>, <code>console.log()</code>, <code>.addEventListener()</code>, and <code>classList.toggle()</code> - get used so frequently that they become second nature. Sometimes you may need to reference online documentation in order to discover the methods (and properties and events) associated with an object. For example, the <code>play()</code> method is mentioned in the Basic Usage section of the MDN Web Docs article on HTML Audio Elements.</p> <p> See the Pen    Audio Element Methods (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/basic-functions/","title":"Basic Functions","text":"<p>Functions are reusable blocks of code that are designed to perform a specific task or group of related tasks. You can accomplish a lot in JavaScript without writing your own functions, but they can help prevent writing repetitive code and will be required for some of the workflows in this class.</p>"},{"location":"js/basic-functions/#declaring-functions","title":"Declaring Functions","text":"<p>To use a cooking analogy, think of the function writing process kind of like training a fellow cook to make part of a meal. If you were preparing spaghetti and meatballs alone, you would have to complete all of the steps yourself every time - chop and saut\u00e9 the vegetables, combine the meatball ingredients, boil the pasta, etc.</p> <p>What if you could save time by showing your partner how to make the sauce?</p> <p>First, you would have to teach them all of the steps of the process:</p> <pre><code>1. Chop stuff\n2. Saut\u00e9 and simmer\n3. Season to taste\n</code></pre> <p>But then, in the future, you could simply ask:</p> <pre><code>Can you please make some marinara?\n</code></pre> <p>In JavaScript, this first part is called declaring a function. Start off by using the <code>function</code> keyword, give your function a name (follow the naming conventions from our style guide), then follow with parentheses and curly braces. The individual steps of your function go inside of the curly braces.</p> <pre><code>function makeSauce() {\n  console.log(\"Chop stuff\");\n  console.log(\"Saut\u00e9 and simmer\");\n  console.log(\"Season to taste\");\n}\n</code></pre> <p>This function declaration can go anywhere in your JavaScript. When you need your function to actually run, you call it:</p> <pre><code>makeSauce();\n</code></pre> <p>Try changing the JavaScript below - remember, you'll need to open the console in order to see the results.</p> <p> See the Pen    Function Declaration (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/basic-input-validation/","title":"Basic Input Validation","text":"<p>When using entry controls, it is a good idea to validate the input in some way to ensure that it adheres to the desired format or range. Basic validation can be implemented using <code>&lt;input&gt;</code> element attributes.</p>"},{"location":"js/basic-input-validation/#html-form-validation","title":"HTML Form Validation","text":"<p>When put inside a <code>&lt;form&gt;</code> element, many inputs will automatically validate data upon submission based on their type. For example, an input with type <code>email</code> will prompt for a valid email address if one is not provided.</p> <p>FYI, the examples on this page will display an error after clicking \"Submit\" once all fields are completed correctly. This is intentional - the additional steps required to gather all data at once from a <code>&lt;form&gt;</code> will be described in subsequent readings.</p> <p>In this first example:</p> <ul> <li>All 3 inputs are given the <code>required</code> attribute.</li> <li>The input with type <code>email</code> will not accept data unless it is in the user@domain.com format.</li> <li>The input with type <code>number</code> will not accept letters.</li> </ul> <p> See the Pen    Quick Validation (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p> <p>Further customization can be attained by using the <code>pattern</code> attribute to specify the exact format required. However, it must be written as a regular expression (regex), which can be very challenging. A couple of simple examples are shown below, but beyond that you will likely need to search for additional regex patterns online or use AI tools to help design your own.</p> <p> See the Pen    Regex Validation (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/class-toggle/","title":"Class Toggle","text":"<p>Now that we can add event listeners to HTML elements, let's design a simple interaction that actually changes something on the page!</p> <p>If your goal is to change the appearance of a page element (as opposed to the content), one simple way to do so is by toggling a class on or off. Let's start by creating a button that toggles the color of some text between black (the default) and red.</p> <p>Since we will need to reference both the interactive element <code>&lt;button&gt;</code> AND the changing element <code>&lt;p&gt;</code>, they will both need unique id attributes.</p> <pre><code>&lt;button id=\"color-toggle-btn\"&gt;Click Me&lt;/button&gt;\n\n&lt;p id=\"changing-text\"&gt;Hello, world.&lt;/p&gt;\n</code></pre> <p>In CSS, create a class that describes the style changes that should occur on the element <code>&lt;p&gt;</code> when the button is clicked.</p> <pre><code>.red-text {\n  color: red;\n}\n</code></pre> <p>In JavaScript, we have 2 new concepts:</p> <ol> <li>When writing the function, start by creating variables that reference the element(s) that will change when the function runs. In this case, we will be changing the color of the text in the <code>&lt;p&gt;</code> element.</li> <li>We will use the new method <code>classList.toggle()</code> to add/remove the <code>.red-text</code> class.</li> </ol> <pre><code>let colorToggleBtn = document.querySelector(\"#color-toggle-btn\");\n\ncolorToggleBtn.addEventListener(\"click\", colorToggle);\n\nfunction colorToggle() {\n  let changingText = document.querySelector(\"#changing-text\");\n  changingText.classList.toggle(\"red-text\");\n}\n</code></pre> <p> See the Pen    Class Toggle 1 (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/class-toggle/#activeinactive-states","title":"Active/Inactive States","text":"<p>One useful application of <code>classList.toggle()</code> is to think of elements having \"active\" and \"inactive\" states. There is nothing new to the code in this approach - rather, it's just a way for you as the developer to mentally model the interaction states.</p> <p>Let's start by created a text drawer that opens and closes when a button is clicked. This type of interaction may be used to show and hide text that will not be visible all the time.</p> <p>In CSS, define a default or \"active\" state for the element. Here, <code>background-color</code> is applied for illustrative purposes (it will make it easier to see the changes). A <code>transition</code> is applied so that the change will occur gradually rather than immediately. Finally, the <code>overflow: hidden</code> property prevents text from spilling out of the drawer when closed.</p> <pre><code>.open-drawer {\n  background-color: lightblue;\n  max-height: 1.2rem;\n  transition: 0.5s;\n  overflow: hidden;\n}\n</code></pre> <p>To close the drawer, all we have to do is set its <code>max-height</code> to 0.</p> <pre><code>.closed-drawer {\n  max-height: 0;\n}\n</code></pre> <p>Why are we using max-height instead of height? Usually, you would not need to specify a height value for a <code>&lt;p&gt;</code> element as it would be set automatically by the browser. However, in order to have a transition, the element needs a value to transition to/from - <code>auto</code> will not work for this. The reason that we are using <code>max-height</code> instead of <code>height</code> is because then we don't need to be too precise - <code>1.2rem</code> as an approximation is sufficient for displaying all of the text content without creating extra empty space.</p> <p>The rest of the HTML and JavaScript code is essentially the same as the previous example.</p> <p> See the Pen    Class Toggle 2 (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/conditionals/","title":"Conditionals","text":"<p>Conditionals give you the ability to make decisions in your code. Perhaps you want to change a visual theme based on the time of day, or display a \"Game Over\" screen when the player has run out of lives.</p>"},{"location":"js/conditionals/#if-statements","title":"If Statements","text":"<p>With an if statement, you can evaluate whether or not a condition is true and, if so, run a specific section of code.</p> <pre><code>if (condition) {\n  // do this stuff if true\n}\n</code></pre> <p>You can require multiple conditions with <code>&amp;&amp;</code> or allow for either/or with <code>||</code>.</p> <pre><code>if (condition1 &amp;&amp; condition2) {\n  // do this stuff only if both conditions are true\n}\n\nif (condition1 || condition2) {\n  // do this stuff if either condition1 or condition2 is true\n}\n</code></pre> <p>You can also create multiple branches with <code>else</code> or <code>else if</code>.</p> <pre><code>if (condition) {\n  // do this stuff if true\n} else {\n  // do this stuff if not\n}\n\nif (condition1) {\n  // do this stuff if condition1 is true\n} else if (condition2) {\n  // do this stuff if condition2 is true\n} else {\n  // do this stuff if neither condition1 or condition2 is true\n}\n</code></pre>"},{"location":"js/conditionals/#comparison-operators","title":"Comparison Operators","text":"<p>You can specify your conditions for if statements using the following comparison operators.</p> Operator Description Strict equal <code>===</code> Returns\u00a0<code>true</code>\u00a0if the operands are equal and of the same type. Not equal <code>!=</code> Returns\u00a0<code>true</code>\u00a0if the operands are not equal. Greater than <code>&gt;</code> Returns\u00a0<code>true</code>\u00a0if the left operand is greater than the right operand. Greater than or equal\u00a0<code>&gt;=</code> Returns\u00a0<code>true</code>\u00a0if the left operand is greater than or equal to the right operand. Less than <code>&lt;</code> Returns\u00a0<code>true</code>\u00a0if the left operand is less than the right operand. Less than or equal <code>&lt;=</code> Returns\u00a0<code>true</code>\u00a0if the left operand is less than or equal to the right operand. <p>For example, this tests whether or not the variable is greater than 10:</p> <pre><code>let x = 11;\n\nif (x &gt; 10) {\n  console.log(\"You win!\");\n}\n</code></pre> <p>This checks to see whether the string variable is exactly \"Eric\":</p> <pre><code>let myName = \"Eric\";\n\nif (myName === \"Eric\") {\n  console.log(\"Hey, that is my name, too!\");\n}\n</code></pre> <p>Try changing the comparison operators and operands of the conditionals in the <code>script.js</code> below and see if the result matches your expectations.</p> <p> See the Pen    Conditionals (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/data-types/","title":"Data Types","text":"<p>Values stored in variables are always of a certain type. Being aware of these types is important when developing your code as they determine what you can do with that data.</p> <p>If you were prompted to \"add 40 and 2 in your head,\" you could easily do so because 40 and 2 are both of the type \"number.\" However, a request to \"add 40 and elephant\" does not have an obvious response. Outside of creative nonsense answers - \"uhh... fortyphant?\" - it doesn't make any sense.</p> <p>In JavaScript, if you try to manipulate data in a way that is expected given the types (e.g. add two numbers together), you should get a logical response. If you try to manipulate data in ways that are not expected given the types (e.g. add numbers to words), then you will either receive an unexpected answer or an error.</p> <p>While you need to be aware of data types, you don't have to specify type when declaring variables. JavaScript is a \"dynamically typed\" language, which means that types are automatically assigned when code is run based on the how the value was assigned.</p> <p>There are 8 different data types in JavaScript:</p> <ol> <li>Number</li> <li>BigInt</li> <li>String</li> <li>Boolean</li> <li>Null</li> <li>Undefined</li> <li>Symbol</li> <li>Object</li> </ol> <p>For this class, you will be working directly with the Number, String, Boolean, and Object types. You should also know about the Null and Undefined types since they may appear when troubleshooting. The BigInt and Symbol types are a bit more esoteric and will likely not be relevant to your work in this class, though they are included below for comprehensiveness.</p>"},{"location":"js/data-types/#number","title":"Number","text":"<pre><code>let myNumber = 42;\n</code></pre>"},{"location":"js/data-types/#bigint","title":"BigInt","text":"<p>As the name suggests, the BigInt type is used to store very large integer values. Accurate up to 15 digits. Change to BigInt using n.</p> <pre><code>let largeNumber = 999999999999999; // 15 digits\nconsole.log(largeNumber); // logs 999999999999999\n\nlet wrongNumber = 9999999999999999; // 16 digits\nconsole.log(wrongNumber); // logs 10000000000000000, no longer accurate\n\nlet bigNumber = 9999999999999999n; // 16 digits with an n which sets type as BigInt\nconsole.log(bigNumber); // logs 9999999999999999n\n\nconsole.log(bigNumber + 1); // causes a TypeError since we're trying to add a BigInt and a number\n\nconsole.log(bigNumber + 1n); // logs 10000000000000000n\n</code></pre>"},{"location":"js/data-types/#string","title":"String","text":"<p>A string is a sequence of one or more text characters. When declaring a variable that is intended to be a string, surround the value with single quotes, as seen below.</p> <pre><code>let myMessage = \"Hello, my name is Eric.\";\n</code></pre>"},{"location":"js/data-types/#boolean","title":"Boolean","text":"<p>The boolean type has only 2 possible values - <code>true</code> or <code>false</code>. Since these are not strings, they do not require single quotes around the value.</p> <pre><code>let isRaining = false;\n\nlet isSunny = true;\n</code></pre> <p>Try changing the variable values in the JavaScript below - remember, you'll need to open the console in order to see the results.</p> <p> See the Pen    Data Types (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/data-types/#null","title":"Null","text":"<p>Null represents an empty or unknown value.</p> <pre><code>let myElement = document.querySelector(\"#does-not-exist\");\n\nconsole.log(myElement); // logs null\n</code></pre>"},{"location":"js/data-types/#undefined","title":"Undefined","text":"<p>Undefined often occurs if a variable is declared but has not been assigned a value.</p> <pre><code>let myVariable;\n\nconsole.log(myVariable); // logs \"undefined\"\n</code></pre>"},{"location":"js/data-types/#symbol","title":"Symbol","text":""},{"location":"js/data-types/#object","title":"Object","text":""},{"location":"js/event-listeners/","title":"Event Listeners","text":"<p>An event is a signal that something has happened in the browser. There are several triggers for events, some that occur automatically (e.g. the load event fires when the page has finished loading), and others that occur in response to an interaction from the user (e.g. the click event fires when the user clicks on a page element). In this class, we will primarily be focussed on the latter category.</p> <p>In order to make something happen in response to an event, we need to attach an event listener to the interactive element in JavaScript.</p>"},{"location":"js/event-listeners/#adding-an-event-listener","title":"Adding an Event Listener","text":"<p>As with many coding scenarios, there are multiple ways to approach browser-based interaction development. For consistency and simplicity, the recommended procedure for this class is as follows:</p> <ol> <li>Declare a variable to reference the interactive element.</li> <li>Write a function that defines what should happen when the interaction occurs.</li> <li>Add an event listener that calls the function.</li> </ol>"},{"location":"js/event-listeners/#step-1-declare-a-variable-to-reference-the-interactive-element","title":"Step 1: Declare a variable to reference the interactive element","text":"<p>In addition to the basic data types that we have already covered (number, string, boolean), a variable can also be assigned to an HTML element.</p> <pre><code>let myButton = document.querySelector(\"#my-button\");\n</code></pre> <p>Notice that the argument of this method begins with <code>#</code>, which is the CSS selector for ids - this implies that the element we are trying to reference should have a matching id attribute.</p> <pre><code>&lt;button id=\"my-button\"&gt;Click Me&lt;/button&gt;\n</code></pre> <p>Also notice that the naming convention for the id in HTML (and where it is used in <code>querySelector</code>) is kebab-case, while the variable name in JavaScript is camelCase. I recommend using the same words for both the id and the variable name, but styled appropriately (kebab-case or camelCase, based on location in code).</p>"},{"location":"js/event-listeners/#step-2-write-a-function-that-defines-what-should-happen-when-the-interaction-occurs","title":"Step 2: Write a function that defines what should happen when the interaction occurs","text":"<p>In this simple example, we will log the message \"Button was clicked!\"\" to the console.</p> <pre><code>function wasClicked() {\n  console.log(\"Button was clicked!\");\n}\n</code></pre>"},{"location":"js/event-listeners/#step-3-add-an-event-listener-that-calls-the-function","title":"Step 3: Add an event listener that calls the function","text":"<p>The event listener should be added to the element that fires the desired event - in this case, the element that the user interacts with, which is a button. As previously mentioned, there are many different kinds of events that can be listened for - we will specifically be listening for the click event.</p> <pre><code>myButton.addEventListener(\"click\", wasClicked);\n</code></pre> <p>Notice that this statement begins with the variable name that we created in step 1. The <code>addEventListener()</code> method is given 2 arguments: the event type to listen for (<code>\"click\"</code>), followed by the name of the function we created in step 2 (<code>wasClicked</code>).</p> <p>Click the button in the example below. Remember, you'll need to open the console in order to see the results.</p> <p> See the Pen    Event Listener (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/for-loops/","title":"For Loops","text":"<p>For loops are used to execute a block of code a number of times. It is built using 3 expressions:</p> <pre><code>for (expression 1; expression 2; expression 3) {\n  // code block to be executed\n}\n</code></pre> <ul> <li>Expression 1 is executed (one time) before the execution of the code block. Typically, this is used to initialize a counter variable at 0. Conventionally, this variable is named <code>i</code>.</li> <li>Expression 2 defines the condition for executing the code block. Essentially, it determines the number of times the code block will be executed.</li> <li>Expression 3 is executed (every time) after the code block has been executed. This is typically written as <code>i++</code> to increment the counter variable.</li> </ul> <p> See the Pen    For Loops (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p> <p>The counter variable can be used in arithmetic expressions like any other number.</p> <p> See the Pen    For Loops Accumulator (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p> <p>The counter variable can be also be used as an index number to lookup each value in an array.</p> <p> See the Pen    For Loops and Arrays (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/for-loops/#for-of-loops","title":"For Of Loops","text":"<p>Arrays are an example of something that is iterable. This means that we can iterate over all of the values of an array using a\u00a0<code>for...of</code>\u00a0loop.</p> <pre><code>for (const variable of iterable) {\n  // do something multiple time, once for each value in the sequence\n}\n</code></pre> <p>In the example presented above, the placeholder <code>iterable</code> would be replaced by the source of the sequence e.g. the variable name of your array. The placeholder <code>variable</code> becomes a temporary variable within the loop that receives a new value from the sequence on each iteration.</p> <p>This can be a little tricky to picture mentally, so let's walk though this example:</p> <pre><code>const myArray = [12, 34, 56, 78];\n\nfor (const m of myArray) {\n  console.log(m);\n}\n</code></pre> <p>In this case, the source of the sequence is the variable <code>myArray</code>. The <code>for of</code> loop will run 4 times because there are 4 values in the <code>myArray</code> sequence. Each time the loop runs, <code>m</code> will represent the value of each successive value in the array, starting at <code>12</code>, then <code>34</code>, then <code>56</code>, etc.</p> <p>Why did we call the temporary variable <code>m</code>? Any name is valid, though it is common to see the first letter of the array name used as the temporary variable. Or, in the case of an array with a plural variable name, the singular could be used as the name for the temporary variable.</p> <pre><code>const months = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\"\n];\n\nfor (const month of months) {\n  console.log(month);\n}\n</code></pre> <p> See the Pen    For Of Loops (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/manipulating-style-properties/","title":"Manipulating Style Properties","text":"<p>In general, it is recommended to change styling with <code>classList.toggle()</code> or <code>classList.add()</code> and <code>classList.remove()</code> when possible, especially if alternating between 2 states. However, when more direct or continuous control is required, <code>style.setProperty()</code> may be a better fit.</p> <pre><code>element.style.setProperty(\"property-name\", \"value\");\n</code></pre> <p>The <code>\"property-name\"</code> string can be any familiar CSS styling property, like <code>\"background-color\"</code> or <code>\"font-size\"</code>. For <code>\"value\"</code>, units will usually need to be appended using string concatenation e.g. by adding <code>\"px\"</code> or <code>\"rem\"</code> to the end of a variable or number.</p> <p> See the Pen    Manipulating Style Properties (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/modals/","title":"Modals","text":"<p>A modal is a pop-up that appears on top of the current page and takes priority, meaning that it prevents interaction with the underlying content until it is submitted or closed.</p>"},{"location":"js/modals/#the-dialog-element","title":"The <code>&lt;dialog&gt;</code> element","text":"<p>Designing and implementing modals recently became much easier with changes to the standard <code>&lt;dialog&gt;</code> element. It now includes default properties and methods that make it fairly easy to use and customize, especially for gathering user-submitted information.</p> <p>The <code>&lt;dialog&gt;</code> element can be styled like any other element, including <code>border</code>, <code>background-color</code>, <code>box-shadow</code>, and more. The <code>::backdrop</code> pseudo-element selects the backdrop displayed behind a modal while it is open. Modals can be displayed and dismissed using the <code>showModal()</code> and <code>close()</code> methods, respectively.</p> <p>Typically, <code>&lt;form&gt;</code> elements have a default behavior when submitted that requires additional server infrastructure to receive and process data - this is why you may have seen an error when clicking \"Submit\" in previous reading examples. However, when put in a modal with the attribute <code>method=\"dialog\"</code>, the default <code>&lt;form&gt;</code> behavior is blocked, values from inputs in the form can be referenced locally with JavaScript, and the modal will close automatically upon submission.</p> <p> See the Pen    Modals (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/more-controls/","title":"More Controls","text":"<p>Buttons are the simplest form of control or input type. They present only one choice: to click or not to click, no other information or decision-making required.</p> <p>There are many HTML input types that vary in their complexity and intended application. Whenever possible, the type of input presented to the user should be the best fit for the information being collected. For example, a generic text input field does not provide a built-in way to provide a list of predetermined choices, while a dropdown menu or group of radio buttons is impractical for a very large number of options.</p> <p>This page provides an overview of some commonly used input types. A full reference for all valid input types can be found here.</p>"},{"location":"js/more-controls/#selection-controls","title":"Selection Controls","text":"<p>A selection control allows the user to choose from a group of predetermined choices. The type of selection control presented in the example below, radio buttons, are typically best for multiple-choice style questions in which only one choice can be selected at a time.</p> <p>Some important things to note about radio buttons:</p> <ul> <li>The <code>name</code> attribute given to the radio buttons is what groups them together so that only one can be selected at a time.</li> <li>Each radio button is paired with a <code>&lt;label&gt;</code> element to provide text instructions or descriptions. The <code>for</code> attribute of each <code>&lt;label&gt;</code> should be the same as the <code>id</code> of the corresponding radio button.</li> <li>The <code>value</code> attribute is should be gathered in JavaScript. It does not need to be the same as the <code>&lt;label&gt;</code> text.</li> <li>Since there are multiple radio buttons in a set, it can be a tricky to find the value of a checked radio button in JavaScript, especially when used with a single submit button. The recommendation is to use <code>document.querySelector(\"input[type='radio']:checked\")</code>.</li> </ul> <p> See the Pen    Selection Controls (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/more-controls/#list-controls","title":"List Controls","text":"<p>List controls allow users to select from a small set of text strings, each representing a command, object, or attribute. The dropdown menu in the example below is created using <code>&lt;select&gt;</code> tags instead of <code>&lt;input&gt;</code> tags. Each item in the dropdown menu is created by adding <code>&lt;option&gt;</code> elements as children.</p> <p>Some important things to note about <code>&lt;select&gt;</code> dropdown menus:</p> <ul> <li>Like radio buttons, the <code>value</code> attribute is what will typically be gathered in your JavaScript. This does not need to be the same as the displayed text.</li> <li>It is recommended to put instructions in the first <code>&lt;option&gt;</code> with an empty <code>value</code> since it will be the first thing the user sees by default. and force them to make a selection.</li> </ul> <p> See the Pen    List Controls (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/more-controls/#entry-controls","title":"Entry Controls","text":"<p>Entry controls enable users to supply their own value. The most basic entry control is the <code>&lt;input&gt;</code> element with type attribute <code>text</code>. However, there are other entry control types that may be better suited to different types of data. For example, the <code>email</code> type provides an easy way to check for valid email address formatting, while the <code>number</code> type adds increment and decrement buttons and minimum and maximum attributes.</p> <p>The <code>placeholder</code> attribute of entry controls is also very useful. Placeholder text can provide instructions or hints without the need for a separate <code>&lt;label&gt;</code> element, which can reduce clutter.</p> <p> See the Pen    Entry Controls (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/more-dom-manipulation/","title":"More DOM Manipulation","text":"<p>If you recall from a previous reading, the DOM (Document Object Model) is \"the data representation of the objects that comprise the structure and content of a document on the web.\"</p> <p>You can think of the structure of the DOM in terms of parents and children using a diagram like this:</p> <p></p> <p>There are 3 child elements in the <code>&lt;body&gt;</code> of the diagram - an <code>&lt;h1&gt;</code>, <code>&lt;p&gt;</code>, and <code>&lt;img&gt;</code> - each which also have their own attributes and inner text. The corresponding HTML would look something like this:</p> <pre><code>&lt;body&gt;\n  &lt;h1&gt;My Site&lt;/h1&gt;\n  &lt;p&gt;Blah blah blah blah blah blah&lt;/p&gt;\n  &lt;img src=\"pic.webp\" /&gt;\n&lt;/body&gt;\n</code></pre> <p>Take a look at the following example - how would you describe the structure in terms of parents and children? You can probably make some guesses just by looking at the results, but you should open the inspector and/or look at the HTML to confirm.</p> <p> See the Pen    Parent-Child (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p> <p>Each <code>&lt;img&gt;</code> has a <code>&lt;figcaption&gt;</code> sibling, both of which are children of a <code>&lt;figure&gt;</code> element, which are themselves children of the <code>&lt;div&gt;</code> flex row. Or, looking at it from the other direction, the <code>&lt;div&gt;</code> flex row is the parent element containing 3 <code>&lt;figure&gt;</code> children, which each contain one <code>&lt;img&gt;</code> child element and one <code>&lt;figcaption&gt;</code> child element. </p>"},{"location":"js/more-dom-manipulation/#creating-elements-and-appending-children","title":"Creating Elements and Appending Children","text":"<p>If you were given a large collection of images in a folder to display in a responsive gallery site, you might manually create flexboxes for rows, <code>&lt;figure&gt;</code> or <code>&lt;div&gt;</code> elements for image containers, and <code>&lt;img&gt;</code> elements in your HTML. But what if you were running a website for a cafe that featured different specials and events each week? Might it be easer to automatically generate the HTML with some information about the images in the folder?</p> <p>Let's start with a single photo. If you were to create an object that describes a single photo from Lorem Picsum, it might look like this:</p> <pre><code>const photo = {\n  url: \"https://picsum.photos/id/292/800/600.webp\",\n  alt: \"onion and peppercorns\",\n  caption: \"Onion and Peppercorns.\"\n};\n</code></pre> <p>You can use JavaScript to create each required element using the <code>createElement()</code> method and set the required attributes:</p> <pre><code>const figureElement = document.createElement(\"figure\");\nconst imageElement = document.createElement(\"img\");\nconst captionElement = document.createElement(\"figcaption\");\n\n// sets src attribute to \"https://picsum.photos/id/292/800/600.webp\"\nimageElement.src = photo.url;\n// sets alt text attribute to \"onion and peppercorns\"\nimageElement.alt = photo.alt;\n// sets inner text of &lt;figcaption&gt; to \"Onion and Peppercorns.\"\ncaptionElement.innerText = photo.caption;\n</code></pre> <p>Then, you can use the <code>appendChild()</code> method to append the <code>&lt;img&gt;</code> and <code>&lt;figcaption&gt;</code> elements to the <code>&lt;figure&gt;</code> element and the <code>&lt;figure&gt;</code> element to the <code>&lt;body&gt;</code> (see example below).</p> <p> See the Pen    Creating and Appending Elements (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/more-dom-manipulation/#creating-and-appending-elements-in-a-for-of-loop","title":"Creating and Appending Elements in a For Of Loop","text":"<p>In the example below, an array containing objects is used to generate elements for a flexbox-based row of photos. Each object contains information about the photo source (url), alt text, and caption text.</p> <p> See the Pen    Generating a Photo Row with a For Of Loop (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/objects/","title":"Objects","text":"<p>We recently learned that arrays are useful for storing sequences of related data, such as GPS coordinates, enrollment figures, names of the months in a year, etc.</p> <pre><code>const miamiCoordinates = [39.511047326918174, -84.72907894440365];\n\nconst miamiEnrollment = [21627, 20613, 20784, 20384, 20036];\n\nconst months = [\"January\", \"February\", \"March\", \"April\", \"May\"]; // etc\n</code></pre> <p>The type of data and the relationship that those items have to each other suggest that an array is a suitable way to organize and store those items. They fall into a series and can be easily referenced using only the index number (e.g. <code>months[0]</code> for the first month of the year, <code>months[1]</code> for the second month of the year, etc).</p> <p>You may want to store multiple pieces of data about a subject that don't necessarily belong in a sequence. For example, general information about Miami University looks kind of strange in an array.</p> <pre><code>const miamiOh = [\"Public\", 1809, \"Oxford, OH\", \"Division I\"];\n</code></pre> <p>While you can likely guess what each item in that array means, it isn't the most obvious or meaningful way to store that specific information. Also, it can become confusing to refer to non-sequential data by index number.</p> <pre><code>miamiOh[2]; // returns \"Oxford, OH\" - but what does that mean?\n</code></pre> <p>For cases like this, the object data type is a better fit. Objects store data as key/value pairs.</p> <pre><code>// format is key: value\n\nconst miamiOh = {\n  type: \"Public\", // type is key, \"Public\" is value\n  established: 1809, // established is key, 1809 is value\n  location: \"Oxford, OH\", // location is key, \"Oxford, OH\" is value\n  ncaa: \"Division I\" // ncaa is key, \"Division I\" is value\n};\n</code></pre> <p>The key provides context for the values in a way that the generic index numbers of an array do not. You can reference the individual values of an object using dot notation.</p> <pre><code>miamiOh.type; // returns \"Public\"\nmiamiOh.established; // returns 1809\n</code></pre> <p>You have already been interfacing with objects in the JavaScript code that you've been developing. Essentially, any time you have written something using dot notation, that is a reference to a property (characteristic) or method (action it can perform) of an object.</p> <pre><code>// the querySelector() method of the document object\ndocument.querySelector(\"text-input\");\n\n// the innerText property of the textInput object\ntextInput.innerText;\n</code></pre> <p> See the Pen    Objects (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/operators/","title":"Operators","text":"<p>In previous examples, we have already used 2 operators that have fairly obvious functions: <code>+</code> for addition and <code>=</code> for assigning values, as seen in the expression:</p> <pre><code>let y = x + 10;\n</code></pre> <p>Many other JavaScript operators are similarly self-explanatory, though there are a few useful ones that may require additional explanation.</p>"},{"location":"js/operators/#arithmetic-operators","title":"Arithmetic Operators","text":"<p>The standard arithmetic operators are</p> <ul> <li><code>+</code> addition</li> <li><code>-</code> subtraction</li> <li><code>*</code> multiplication</li> <li><code>/</code> division</li> </ul> <p>The following table lists some of the other useful arithmetic operators in JavaScript:</p> Operator Description Example <code>%</code> remainder Returns the remainder of dividing the two operands. 24 % 7 returns 3, because 24 / 7 is equal to 21 with a remainder of 3. <code>++</code> increment Adds one to its operand. If\u00a0<code>x</code>\u00a0is 3, then\u00a0<code>x++</code>\u00a0changes\u00a0the value of <code>x</code>\u00a0to 4. <code>--</code> decrement Subtracts one from its operand. If\u00a0<code>x</code>\u00a0is 3, then\u00a0<code>x--</code>\u00a0changes the value of\u00a0<code>x</code>\u00a0to 2."},{"location":"js/operators/#assignment-operators","title":"Assignment Operators","text":"<p>The simple assignment operator is <code>=</code>, which assigns the value of its right operand to its left operand. For example:</p> <pre><code>let x = 7;\n</code></pre> <p>sets the value of <code>x</code> to the number 7.</p> <p>The following table lists the most useful compound assignment operators, which act as shorthand for the operations in the right column:</p> Name Shorthand Meaning Addition assignment <code>x += 7</code> <code>x = x + 7</code> Subtraction assignment <code>x -= 7</code> <code>x = x - 7</code> Multiplication assignment <code>x *= 7</code> <code>x = x * 7</code> Division assignment <code>x /= 7</code> <code>x = x / 7</code> Remainder assignment <code>x %= 7</code> <code>x = x % 7</code>"},{"location":"js/operators/#string-concatenation","title":"String Concatenation","text":"<p>When working with strings, <code>+</code> is the concatenation operator, joining strings together. String concatenation can be used to insert variable values into longer messages.</p> <pre><code>let myName = \"Eric\";\n\nconsole.log(\"Welcome, \" + myName + \".\");\n\n// logs \"Welcome, Eric.\" to the console\n</code></pre> <p>Practice using operators below - you'll need to open the console in order to see the results.</p> <p> See the Pen    Operators (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/timed-functions/","title":"Timed Functions","text":"<p>There are often instances where your application requires something to occur at a regular time interval regardless of user activity. Some examples include:</p> <ul> <li>An autosave function that automatically saves the user's work every 5 minutes.</li> <li>A timer that reports elapsed time while taking a quiz.</li> <li>An app that automatically checks the internet for new Taylor Swift news every minute.</li> </ul> <p>In these scenarios, the <code>setInterval()</code> method can be used to repeatedly call a function with a specific delay between each call.</p>"},{"location":"js/timed-functions/#setinterval","title":"setInterval()","text":"<p>Writing functions to be called by <code>setInterval()</code> is no different than writing them for other methods (like event listeners). The difference is primarily in how the function is called.</p> <pre><code>setInterval(function, delay);\n</code></pre> <p>The delay is expressed in milliseconds, so <code>1000</code> is equivalent to 1 second.</p> <p> See the Pen    setInterval Random (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p> <p>In the example below, the <code>setProperty()</code> method is introduced as a way to manually change a single style property from JavaScript.  You should aim to use class toggling to change styling whenever possible. However, <code>setProperty()</code> is required if you want to provide different values depending on other conditions. <pre><code>element.style.setProperty(propertyName, value);\n</code></pre> The <code>propertyName</code> argument can be any familiar CSS styling property formatted as a string, like <code>\"background-color\"</code> or <code>\"font-size\"</code>. For <code>value</code>, you will usually need to use string concatenation to append units e.g. add <code>\"px\"</code> or <code>\"rem\"</code> to the end of a number.</p> <p>The <code>shift</code> function is called every second to randomly move the text by changing the <code>translate</code> property, while the <code>spin</code> function is called every 10ms to continuously rotate the bar. Notice how <code>\"px\"</code> and <code>\"deg\"</code> are concatenated to the variables in JavaScript before they are passed as arguments to <code>setProperty()</code>.</p> <p> See the Pen    setInterval with setProperty (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/timed-functions/#clearinterval","title":"clearInterval()","text":"<p>Each <code>setInterval()</code> method returns a unique ID. Assign this ID to a variable and use it later with <code>clearInterval()</code> if you need to cancel the original timed action.</p> <p> See the Pen    clearInterval Random (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/using-the-console/","title":"Using the Console","text":"<p>The console is part of the developer tools in your browser. Although anyone can open the developer tools, the console is generally not viewed by users. One of its purposes is to display messages for developers. These messages might include errors, but you can also manually log helpful information using the console.log() method.</p> <p>CodePen has its own simplified console. It can be opened and closed by clicking the Console button when you have a Pen open in the full editor (i.e. by clicking Edit on CodePen). You can use the browser\u2019s console in the developer tools - just be aware that there may be some warnings and error messages created by other parts of the site you are on.</p> <p>Try changing the code in the JavaScript below - remember, you\u2019ll need to have either the CodePen or browser console open to see the logged messages.</p> <p> See the Pen    Console (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/variables/","title":"Variables - XXX","text":"<p>A variable is a named container for data. The name of the container is up to you (take a look at naming guidelines in the IMS322 Style Guide), but ideally it has some meaning that relates to the data being stored. To declare a variable, start with the keyword <code>let</code> and assign a starting value with <code>=</code>.</p> <pre><code>let myName = \"Eric\";\n</code></pre> <p>The purpose of variables may not be obvious at first, but a crucial part of interaction design and development is storing, gathering, and manipulating data. Variables make this process much more practical and flexible.</p> <p>Remember, you'll need to open the console in order to see the results of <code>console.log()</code>.</p> <p> See the Pen    Variables (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"ref/_introduction/","title":"Reference","text":""},{"location":"ref/css-reset/","title":"CSS Reset","text":"<p>One of the purposes of a CSS Reset is to start with a clean slate and not have to wrestle with unexpected layout or styling issues due to default browser properties. The basic CSS Reset in the embedded example below is a recommended starting point for your projects in this class. It does the following:</p> <ul> <li>Removes default <code>padding</code>, <code>margin</code>, and <code>border</code> from all elements.</li> <li>Sets the <code>box-sizing</code> property of all elements to <code>border-box</code>, which typically results in more predictable and manageable sizing and spacing.</li> <li>Sets the <code>max-width</code> property of all <code>img</code> elements to <code>100%</code>, which encourages a more consistent approach to flexible and responsive images.</li> <li>Provides pre-formatted media queries for <code>800px</code> and <code>480px</code> window widths to use as needed.</li> </ul> <p> See the Pen    CSS Reset (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"ref/misc-examples/","title":"Miscellaneous Examples","text":"<p>This page includes a collection of basic examples for unique scenarios that fall outside of the regular course content. They will not be covered during class but can be adopted and modified for assignments as needed.</p>"},{"location":"ref/misc-examples/#wireframe-outlines","title":"Wireframe Outlines","text":"<p>This example is intended to help clarify the relationship between a wireframe and the resulting HTML structure. Notice that there are boxes drawn around every part of the wireframe that corresponds with a discrete element in the HTML. For example, in order to achieve the desired alignment of the contents inside the question button (space between) and address the indicator from JavaScript for the open/close transition (the + sign), they are each different elements inside the <code>&lt;button&gt;</code>.</p> <p> See the Pen    Wireframe Outlines (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p> <p>wireframe example</p> <p>Although color-coded boxes are important for clarity, it is perfectly appropriate to use the same color for sibling elements (those that occur at the same hierarchical level in the HTML, like the 2 elements inside the button).</p> <p>wireframe example outlines</p>"},{"location":"ref/misc-examples/#click-to-reveal","title":"Click to Reveal","text":"<p>Uses <code>position: absolute</code> to place one element on top of another, then changes the top element's opacity to make it appear as though the bottom element is being revealed. Be very careful when using <code>position: absolute</code>. It should only be implemented when absolutely necessary. Layout positioning may become unpredictable when modifying the position property. For additional information, reference this MDN Web Docs article.</p> <p> See the Pen    Click to Reveal (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"ref/misc-examples/#plus-minus-indicator","title":"Plus-Minus Indicator","text":"<p>Uses <code>position: absolute</code> to draw a separate vertical line on top of a horizontal line (both created using <code>&lt;div&gt;</code> elements) in order to independently change only the vertical line and create a smooth transition from + to -.</p> <p> See the Pen    Plus-Minus Indicator (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"ref/misc-examples/#working-with-background-images","title":"Working with Background Images","text":"<p> See the Pen    Background Images (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"ref/misc-examples/#date-formatting","title":"Date Formatting","text":"<p> See the Pen    Date Formatting (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"ref/misc-examples/#flex-wrap-sizing","title":"Flex-wrap Sizing","text":"<p>When wrapping items in a flexbox, one of the challenges is to create items with flexible yet consistent widths, especially when there are fewer items on the bottom row. The approach used in this example (adapted from the GameStop site) uses media queries to set the <code>width</code> of items to progressively smaller <code>%</code> based on window width.</p> <p>There are a couple of accommodations that need to be made when calculating widths this way in a flexbox:</p> <ul> <li>The flexbox <code>gap</code> property cannot be used reliably when attempting to divide the row evenly with <code>%,</code> so we've simulated the gap by putting the items in <code>div</code> containers and adding <code>padding</code> to the container.</li> <li>Since this also means that the <code>padding</code> doubles up between items, side padding is added to the flexbox row to compensate.</li> </ul> <p> See the Pen    Flex-wrap Sizing (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"ref/resources/","title":"Additional Resources","text":"<p>If you are interested in additional help, review, or inspiration, you may find the links below to be useful.</p>"},{"location":"ref/resources/#videos-for-tutorials-tips-and-inspiration","title":"Videos for tutorials, tips, and inspiration","text":"<ul> <li>Kevin Powell</li> <li>Web Dev Simplified</li> <li>CSS Tricks</li> </ul>"},{"location":"ref/resources/#mdn-web-docs","title":"MDN Web Docs","text":"<ul> <li>HTML Elements Reference</li> <li>CSS Reference</li> <li>JavaScript Basics</li> </ul>"},{"location":"ref/resources/#css-tricks","title":"CSS Tricks","text":"<ul> <li>A Complete Guide to Flexbox</li> </ul>"},{"location":"ref/utilities/","title":"Utilities","text":""},{"location":"ref/utilities/#color","title":"Color","text":"<ul> <li>Color Picker: Quick color reference and RGB/HEX converter.</li> <li>Mac Digital Color Meter: Mac application to find values for any onscreen color.</li> <li>Windows Color Picker utility: Windows application to find values for any onscreen color.</li> </ul>"},{"location":"ref/utilities/#images","title":"Images","text":"<ul> <li>Lorem Picsum: Source for hosted stock images (primarily for use with CodePen).</li> <li>Squoosh: Image resizing, cropping, and compression.</li> <li>Unsplash: Source to download free high-quality stock images.</li> </ul>"},{"location":"ref/utilities/#css-generators","title":"CSS Generators","text":"<p>Tools that help generate complicated CSS code to achieve a specific look.</p> <ul> <li>Box Shadow</li> <li>Gradient</li> <li>Slider</li> <li>More at CSS Portal</li> </ul>"},{"location":"ref/utilities/#miscellaneous","title":"Miscellaneous","text":"<ul> <li>AudioMass: Simple audio editing and conversion.</li> </ul>"}]}