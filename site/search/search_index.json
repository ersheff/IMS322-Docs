{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"IMS322 Docs","text":""},{"location":"#welcome","title":"Welcome","text":"<p>This site contains a collection of instructions, tips, and examples for use in IMS322 with Dr. Eric Sheffield.</p> <p>Directory</p> <ul> <li>Setup: Instructions for installing and configuring the applications and tools needed to complete coursework.</li> <li>Style Guide: Specifications for how to write code and design layouts.</li> <li>CSS: A collection of new CSS topics that will be covered in this class.</li> <li>JavaScript: An introduction to JavaScript and collection of topics that will be covered in this class.</li> <li>Reference: A collection of miscellaneous resources to review throughout the semester.</li> </ul>"},{"location":"setup/","title":"Setup","text":"<p>The sections on this page will lead you through the process of setting up the applications and accounts needed to complete IMS322 coursework. It is recommended that you follow the steps below in the order listed:</p> <ol> <li>Install Git.</li> <li>Create a GitHub account (if needed).</li> <li>Log in to CodePen, enable Format on Save in account settings, and create your first Pen.</li> <li>Install additional browsers as needed.</li> <li>Install VS Code and configure extensions and settings.</li> <li>Review coding assignment procedures.</li> </ol>"},{"location":"setup/#git","title":"Git","text":"<p>Git is a \"version control system\" that helps track and manage changes in files. While Git itself is very powerful, we will only be using it through the Source Control panel in VS Code.</p> Activity Bar: Source Control panel"},{"location":"setup/#mac","title":"Mac","text":"<p>Mac users should follow the Homebrew installation option:</p> <ol> <li>Install Homebrew.</li> <li>Run <code>brew install git</code> in Terminal. If prompted, install the command line developer tools. This will likely take a while.</li> </ol>"},{"location":"setup/#windows","title":"Windows","text":"<p>Windows users should use the 64-bit Git for Windows Setup under Standalone Installer.</p>"},{"location":"setup/#linux","title":"Linux","text":"<p>If you're using Linux, you probably don't need help installing Git! Follow the instructions here.</p>"},{"location":"setup/#github","title":"GitHub","text":"<p>GitHub is a platform for creating, storing, and managing code. It relies on Git to commit and sync changes between files stored locally on your computer (the ones that you'll be editing in VS Code) and online repositories. In this class, we will be using GitHub to manage all major assignments.</p> <ol> <li>Create a GitHub account.</li> <li>Register for GitHub Student Benefits (this will give you access to the GitHub Copilot AI assistant within VS Code).</li> </ol>"},{"location":"setup/#codepen","title":"CodePen","text":"<p>CodePen is a popular online code editor focused on creating and sharing snippets of HTML, CSS, and JavaScript. The embedded code examples throughout the IMS322 Docs site have been created using CodePen. One of the main reasons that we use CodePen for this class is because it allows you to edit embedded examples right on the page and see live results - try it out below! We will also regularly use CodePen instead of VS Code for smaller assignments, like weekly practice and in-class exercises.</p> <p>There are a few important things to note about CodePen and how it differs from the VS Code and GitHub workflow:</p> <ul> <li>You should log in to CodePen using your GitHub username and password. There is no actual connection between CodePen and GitHub; it simply uses the same account credentials.</li> <li>A project on CodePen is called a \"Pen.\" By default, a Pen includes HTML, CSS, and JavaScript editors, as well as a live preview.</li> <li>Make sure that the Format On Save and Autocomplete options are checked in your account settings (found in the Editor Preferences section).</li> <li>The simplified HTML editor does not need a <code>&lt;head&gt;</code> element or <code>&lt;body&gt;</code> tags. You should start your HTML content from the first tag that would normally go after the opening <code>&lt;body&gt;</code> tag, like a <code>&lt;header&gt;</code> or <code>&lt;h1&gt;</code> element.</li> <li>There is no file hosting provided with free CodePen accounts. When you want to include images in CodePen assignments, you will need to use a URL instead of a file name for the <code>src</code> attribute of the <code>&lt;img&gt;</code> element. Generally, the content of images in CodePen-based assignments is not important, so a random image hosting service like Lorem Picsum will suffice.</li> </ul> <p> See the Pen    Embed Example (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"setup/#browsers","title":"Browsers","text":"<p>Although there are many different modern web browsers, there are essentially only three different browser engines currently in use. A browser engine is the software component under the hood that handles document layout, rendering, and security.</p> <ul> <li>WebKit is maintained by Apple and used for the desktop and mobile versions of Safari, which is the default browser on Apple devices.</li> <li>Blink is maintained by Google and powers all Chromium-based browsers, which include Google Chrome, Microsoft Edge, Brave, Opera GX, and others.</li> <li>Gecko is maintained by Mozilla and used for Firefox.</li> </ul> <p>You should have both Firefox and at least one Chromium-based browser installed on your laptop for this class. It is also recommended that you set one of these as the Live Server Custom Browser during VS Code configuration (instructions provided below).</p>"},{"location":"setup/#vs-code","title":"VS Code","text":"<p>Visual Studio Code (aka VS Code) is the code editor that we will be using for all major assignments in this class. After installing the VS Code application, follow the instructions below to configure extensions and settings.</p>"},{"location":"setup/#extensions","title":"Extensions","text":"<p>We will be using a small collection of VS Code extensions to assist with formatting and development. Search for the following extensions in the Extensions panel to install them:</p> <ul> <li>GitHub Copilot and Copilot Chat AI code assistant (published by GitHub, requires GitHub Student Benefits activation)</li> <li>JS-Beautify for VS Code for HTML formatting (published by VSCE Toolroom)</li> <li>Prettier for CSS and JavaScript formatting (published by Prettier)</li> <li>Live Server for quick and easy browser previews (published by Ritwick Dey)</li> <li>Live Share for collaborative coding (published by Microsoft)</li> </ul> Activity Bar: Extensions panel"},{"location":"setup/#git-setup-and-github-login","title":"Git Setup and GitHub Login","text":"<p>Make sure that Git has finished installing before completing these steps.</p> <ol> <li>Click on the Terminal menu and choose New Terminal.</li> <li>In the Terminal panel, run the two commands provided below, inserting your own GitHub username and email where indicated (you will not see a confirmation message):</li> <li>Click the Accounts icon in the lower-left corner and sign in using your GitHub account.</li> </ol> <pre><code>git config --global user.name \"your_username\"\ngit config --global user.email your@email.com\n</code></pre> Activity Bar: Accounts"},{"location":"setup/#editor-settings","title":"Editor Settings","text":"<ol> <li>Go to the View menu and choose Command Palette... Use the search field to find and run the Preferences: Open User Settings (JSON) command. Copy-paste the text below into the open settings.json file, replacing any existing text, then save and close the file.</li> <li>Click on the gear icon in the lower-left and choose Settings. Search for Live Server Custom Browser and choose your preferred browser from the dropdown menu (Firefox or Chromium-based). This is the browser that will open automatically whenever you run the Live Server extension.</li> <li>Right-click the Activity Bar on the left side of the window. Uncheck Run and Debug. Ensure that only Explorer, Search, Source Control, Extensions, Live Share, Chat, and Accounts are checked.</li> </ol> <pre><code>{\n  \"editor.minimap.enabled\": false,\n  \"breadcrumbs.enabled\": false,\n  \"editor.tabSize\": 2,\n  \"editor.formatOnSave\": true,\n  \"prettier.trailingComma\": \"none\",\n  \"[html]\": {\n    \"editor.defaultFormatter\": \"vsce-toolroom.vscode-beautify\"\n  },\n  \"[css]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  \"[javascript]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  \"[json]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  }\n}\n</code></pre>"},{"location":"setup/#assignment-procedures","title":"Assignment Procedures","text":"<p>Throughout the semester, coursework will be assigned using both CodePen and VS Code with GitHub. Some specific instructions and details in the Canvas assignment descriptions may differ on a case-by-case basis, but the general workflow for both platforms is outlined below.</p>"},{"location":"setup/#accepting-codepen-assignments","title":"Accepting CodePen Assignments","text":"<ol> <li>If the Canvas assignment instructions point to an embedded example Pen, click Edit On CodePen, then create a copy of it in your account by clicking the Fork button in the lower-right corner of the editor window. Otherwise, create a new empty Pen.</li> <li>Change the Pen name to the name provided in the Canvas assignment and click Save. If you need to find this Pen again later, it will be in Your Work.</li> </ol> Edit On CodePen CodePen: Fork"},{"location":"setup/#submitting-codepen-assignments","title":"Submitting CodePen Assignments","text":"<ol> <li>Click the Save button in the upper-right corner of the CodePen window.</li> <li>Click Share in the bottom-right corner and select Copy Link.</li> <li>Paste the copied link in the Website URL field of the corresponding Canvas assignment and click Submit Assignment.</li> </ol> CodePen: Save and Share"},{"location":"setup/#accepting-and-cloning-vs-code-assignments","title":"Accepting and Cloning VS Code Assignments","text":"<p>The first time you accept a VS Code assignment through GitHub Classroom, you will be asked to link your GitHub account to your name.</p> <ol> <li>Click the link in the corresponding Canvas assignment to accept the assignment on GitHub Classroom. Once your new repository is generated, it should be visible in your Top Repositories on GitHub. You can also find it by visiting the IMS322-Sheffield-F24 organization.</li> <li>Open VS Code. If an existing folder is already open, close it by going to the File menu and choosing Close Folder.</li> <li>Open the Source Control panel and click the Clone Repository button. Copy-paste the URL from your repository into the text field. You will be prompted for a location on your computer to save this folder.</li> <li>To open this folder in the future, go to the File menu and choose Open Folder...</li> </ol> Source Control: Clone Repository"},{"location":"setup/#working-with-vs-code-assignments","title":"Working With VS Code Assignments","text":"<ul> <li>Folders are very important when working in VS Code. You should always check the top of the Explorer panel to make sure that you are working within the desired assignment folder. The primary open folder acts as the \"root\" of your workspace where you will find your HTML, CSS, and JavaScript files, as well as any subfolders (e.g., for images).</li> <li>To preview your code in the browser, click the Go Live button in the bottom-right corner of the window (which is part of the Status Bar). This will use the Live Server extension to launch your project in your preferred browser. If you accidentally lose your browser preview window, you can reopen the browser and navigate to <code>http://127.0.0.1:5500/</code> (replacing the last 4 digits with whatever port number appears in the Status Bar while the extension is running). Alternatively, you can click on the port number in the Status Bar to close the extension and relaunch it by clicking Go Live again.</li> </ul> Status Bar: Go Live Status Bar: Port # <ul> <li> <p>Some assignments in VS Code will have 2 stages: an initial draft, followed by a final submission. We will manage these stages by using different \"branches\" on GitHub. This way, you can submit the assignment multiple times without needing to create multiple repositories.</p> <ul> <li>By default, each GitHub repository is created with a \"main\" branch. This includes all assignment instructions and template files and will be the branch used for your final submission. Do not make any changes in the main branch until you are finished with your draft!</li> <li>The name of the branch that you are currently working in will always be visible in the Source Control Checkout button in the lower-left corner (part of the Status Bar).</li> <li>When starting an assignment that has a draft stage, the first thing that you should do after accepting and cloning the assignment is click on the Source Control Checkout button. This will open a menu for managing different branches. Choose Create New Branch... and name it \"draft.\" The draft branch will automatically include all of the files from the main branch. Then, in the Source Control panel, click Publish Branch. You should stage, commit, and sync everything as usual in the draft branch before switching over to main (described below).</li> <li>When you have finished your draft and are ready to start working on your final submission, you will need to \"merge\" everything from the draft branch into the main branch. To do so, switch to the main branch by clicking the Source Control Checkout button and choosing main from the menu. Then, in the Source Control panel, click the 3-dot button to open an action menu and choose Branch &gt; Merge... When prompted to choose the branch to merge from, choose draft.</li> <li>Merge conflicts may occur if changes are made in both the main and draft branches before merging. VS Code will highlight the conflicts that need to be resolved, but this can be a challenging process for beginners. Ideally, we will avoid merge conflicts altogether, but I recommend scheduling an office hours appointment if you run into this issue.</li> </ul> </li> </ul> Status Bar: Source Control Checkout button"},{"location":"setup/#committing-and-submitting-vs-code-assignments","title":"Committing and Submitting VS Code Assignments","text":"<p>These steps apply to both the draft (draft branch) and final (main branch) stages. It is recommended that you Stage and Commit after each major change (steps 1-3) and Sync often (step 4), even before you are finished.</p> <ol> <li>Open the Source Control panel.</li> <li>Stage all changes by clicking the + next to Changes.</li> <li>Enter a commit message and click the Commit button (use \"finished\" for your final commit).</li> <li>The Commit button should change to a Sync Changes button. Click this to finish syncing the latest changes to your online GitHub repository.</li> <li>Find your repository on GitHub.</li> <li>Go to the Settings tab within the repository and navigate to the Pages section.</li> <li>Under Branch, choose the appropriate branch (draft or main) and click Save.</li> <li>After a few moments, if you refresh the page, there should now be a URL near the top next to a Visit Site button. If you click this button, you should see your site open in a new window.</li> <li>Copy the URL generated by GitHub Pages, paste it in the Website URL field of the corresponding Canvas assignment, and click Submit Assignment.</li> </ol> Source Control: Stage and Commit changes"},{"location":"setup/#autograding","title":"Autograding","text":"<p>Assignments managed through GitHub will be run through an autograding process when they are committed and synced with the word \"finished\" in the commit message. The criteria checked during this process can be found on the Style Guide page.</p> <p>To review autograding results:</p> <ol> <li>Navigate to your assignment repository on GitHub.</li> <li>Click on the Actions tab at the top of the repository page.</li> <li>In the Actions tab, click on the most recent item in the list of workflows that have been run.</li> <li>Click on the workflow run to view the details.</li> <li>On the workflow details page, you can see the status of each step.</li> </ol> <p>If you would like to fix errors identified by the autograding logs, you may commit and sync changes as many times as needed before the assignment due date. Keep in mind that you will need to have the word \"finished\" in your commit message to rerun the autograding workflow. You can optionally amend the commit message with a number to keep track of subsequent attempts e.g., \"finished 2\".</p>"},{"location":"setup/#setup-checklist","title":"Setup Checklist","text":"<ul> <li> I have installed Git (not just GitHub Desktop).</li> <li> I have created my GitHub account.</li> <li> My GitHub Student Benefits are active.</li> <li> I have enabled the Format On Save and Autocomplete options in my CodePen account settings.</li> <li> I have both Chrome (or another Chromium-based browser) and Firefox installed.</li> <li> I have installed VS Code.</li> <li> I have installed the required VS Code extensions.</li> <li> GitHub Copilot and Copilot Chat (published by GitHub)</li> <li> JS-Beautify for VS Code (published by VSCE Toolroom)</li> <li> Prettier (published by Prettier)</li> <li> Live Server (published by Ritwick Dey)</li> <li> Live Share (published by Microsoft)</li> <li> I have run the <code>git config</code> commands in the Terminal in VS Code.</li> <li> I have signed VS Code into my GitHub account.</li> <li> I have copy-pasted the suggested settings in the settings.json file.</li> <li> I have selected my Live Server Custom Browser in settings.</li> <li> I have ensured that Explorer, Search, Source Control, Extensions, Live Share, Chat, and Accounts are all visible in the Activity Bar.</li> </ul>"},{"location":"style-guide/","title":"Style Guide","text":"<p>The IMS322 Style Guide was designed to help you write well-organized code that is easier to read, edit, and troubleshoot for functional and responsive designs. Although it includes many widely adopted conventions, it is by no means intended to be the universal \"best\" or \"correct\" approach. After taking this class, you may consider other styles based on personal preference or professional expectations. However, keep in mind that much of the criteria below directly impacts your assignment grades.</p> <p>This page is divided into 3 sections:</p> <ul> <li> <p>Autograded Requirements: The requirements in this section will be autograded by GitHub Actions during the final sync with your project's repository. You can read more about how to initiate this process and review the results on the Setup page.</p> </li> <li> <p>Manually Graded Requirements: The requirements in this section will be reviewed by the instructor after submission.</p> </li> <li> <p>Other Suggestions: This section includes other miscellaneous style suggestions. While they do not directly affect your assignment grades, implementing these suggestions may help improve your results.</p> </li> </ul>"},{"location":"style-guide/#autograded-requirements","title":"Autograded Requirements","text":""},{"location":"style-guide/#default-files","title":"Default Files","text":"<p>Every assignment should start with the following three files:</p> <ul> <li><code>index.html</code></li> <li><code>style.css</code></li> <li><code>script.js</code></li> </ul> <p>These will be provided for you in each assignment template. Do not delete or rename them.</p>"},{"location":"style-guide/#separation-of-concerns","title":"Separation of Concerns","text":"<p>There are multiple aspects to this concept. Simply put, the goal is to only put HTML, CSS, and JavaScript in their respective files. By keeping these concerns separate, you can work on structure, style, and behavior independently.</p> <p>The following items will be checked during the autograding workflow:</p> <ul> <li>Write all CSS in the <code>style.css</code> file, which should be referenced in the <code>&lt;head&gt;</code> element using <code>&lt;link&gt;</code> tags. Avoid writing any CSS as inline <code>style</code> attributes or in <code>&lt;style&gt;</code> tags within the HTML.</li> <li> <p>Write all JavaScript in the <code>script.js</code> file, which should be referenced in the <code>&lt;head&gt;</code> element using <code>&lt;script&gt;</code> tags with the <code>defer</code> keyword. Avoid writing any JavaScript code inside <code>&lt;script&gt;</code> tags within the HTML.</p> <ul> <li>On a related note, do not use a <code>DOMContentLoaded</code> event listener or <code>window.onload</code> property in your JavaScript file. This can cause issues with some projects and is unnecessary when using the <code>defer</code> attribute in the <code>&lt;script&gt;</code> tags.</li> </ul> </li> <li> <p>Trigger JavaScript functions from event listeners defined in the <code>script.js</code> file, not from HTML attributes.</p> </li> </ul> <p>This:</p> <pre><code>const counterButton = document.querySelector(\"#counter-button\");\nmyButton.addEventListener(\"click\", addCount);\n</code></pre> <p>Not this:</p> <pre><code>&lt;button onclick=\"addCount()\"&gt;Click Me&lt;/button&gt;\n</code></pre>"},{"location":"style-guide/#image-compression-resolution-and-organization","title":"Image Compression, Resolution, and Organization","text":"<p>All images used in your projects should be in WebP format with a maximum resolution of 2200px in either dimension. Use Squoosh or another preferred image editing application that can export <code>.webp</code> files to prepare your images before adding them to your project.</p> <p>Store image files in an \"images\" folder to help keep the file browser organized. Remember, this means that the folder name will need to be included in the file path.</p> <p>This:</p> <pre><code>&lt;img src=\"images/dog.webp\" alt=\"Dog\" /&gt;\n</code></pre> <p>Not this:</p> <pre><code>&lt;img src=\"dog.webp\" alt=\"Dog\" /&gt;\n</code></pre>"},{"location":"style-guide/#css-color-syntax","title":"CSS Color Syntax","text":"<p>All CSS colors should be in HEX or RGB format to ensure that you can directly translate colors from your wireframe designs.</p> <ul> <li>Example HEX code: <code>#e9967a</code></li> <li>Example RGB code: <code>rgb(233, 150, 122)</code></li> </ul> <p>Several color utilities are provided to help you choose and convert color codes on the Utilities page.</p>"},{"location":"style-guide/#modern-javascript-variable-declarations","title":"Modern Javascript Variable Declarations","text":"<p>Use the keywords <code>let</code> (for values that will change) and <code>const</code> (for values that will not change) when declaring variables in JavaScript. Although it is still technically valid, do not use the outdated <code>var</code>.</p> <p>This:</p> <pre><code>let favoriteFruit = \"apple\";\nconst birthYear = 1986;\n</code></pre> <p>Not this:</p> <pre><code>var favoriteFruit = \"apple\";\nvar birthYear = 1986;\n</code></pre>"},{"location":"style-guide/#manually-graded-requirements","title":"Manually Graded Requirements","text":""},{"location":"style-guide/#font-selection-and-loading","title":"Font Selection and Loading","text":"<p>Web safe fonts are fonts that you can safely assume are already installed on a user's computer:</p> <ul> <li>Arial (sans-serif)</li> <li>Verdana (sans-serif)</li> <li>Tahoma (sans-serif)</li> <li>Trebuchet MS (sans-serif)</li> <li>Times New Roman (serif)</li> <li>Georgia (serif)</li> <li>Courier New (monospace)</li> <li>Brush Script MT (cursive)</li> </ul> <p>If you use any other font in your designs, you must include it as a resource by either adding the font file to the project folder and importing it in CSS, or embedding <code>&lt;link&gt;</code> tags from a hosted source in the <code>&lt;head&gt;</code> element.</p>"},{"location":"style-guide/#naming-conventions","title":"Naming Conventions","text":"<ul> <li>Rename long or cryptic image files as needed. For example, <code>dog.webp</code> is much easier to type and identify than <code>neom-9E9NsEiUGxg-unsplash.webp</code>.</li> <li>Use concise, searchable, and meaningful names for classes, ids, functions, and variables. Only use common, easy-to-remember abbreviations if a name becomes excessively long.</li> <li>Name class and id attributes in HTML and CSS using the \"kebab-case\" convention, where lowercase words are separated by hyphens.</li> <li>Name functions and variables in JavaScript using the \"camelCase\" convention, where each word (except the first) starts with a capital letter, without spaces or hyphens.</li> <li>Keep in mind that you may find yourself writing both kebab-case and camelCase in your JavaScript file when assigning HTML elements to variables. This is valid since the id name was created in the HTML file.</li> </ul> <pre><code>&lt;p class=\"kebab-case\" id=\"kebab-case\"&gt;Blah blah blah.&lt;/p&gt;\n</code></pre> <pre><code>const camelCase = \"apple\";\n</code></pre> <pre><code>// camelCase variable name, kebab-case id\n\nconst counterButton = document.querySelector(\"#counter-button\");\n</code></pre>"},{"location":"style-guide/#display-size-targets-and-general-layout","title":"Display Size Targets and General Layout","text":"<p>Your project layouts should accommodate the following window widths (based on MDN Web Docs recommendations):</p> <ul> <li><code>480px</code> (mobile)</li> <li><code>800px</code> (tablet, narrow laptop/desktop windows)</li> <li><code>1100px</code> (wide laptop/desktop windows)</li> </ul> <p>This means that text content and images are neither too small nor overflowing the visible area.</p> <p>The following CSS is provided for you in the assignment templates to help meet these requirements:</p> <ul> <li>By default, the <code>&lt;body&gt;</code> element should be centered within the browser window and have a maximum width of <code>1100px</code>.</li> <li>Large paragraphs should not exceed a width of <code>80ch</code> to improve readability.</li> <li>Use media queries at <code>480px</code> and/or <code>800px</code> to rearrange or resize elements as needed.</li> </ul> <p>Default assignment template CSS:</p> <pre><code>* {\n  box-sizing: border-box;\n}\n\nbody {\n  max-width: 1100px;\n  margin: auto;\n}\n\np {\n  max-width: 80ch;\n}\n\nimg {\n  width: 100%;\n}\n\n@media (max-width: 800px) {\n}\n\n@media (max-width: 480px) {\n}\n</code></pre>"},{"location":"style-guide/#other-suggestions","title":"Other Suggestions","text":""},{"location":"style-guide/#formatting","title":"Formatting","text":"<p>In both CodePen and VS Code, js-beautify is used for HTML formatting and Prettier is used for CSS and JavaScript formatting. Formatting occurs automatically on save if both platforms are configured according to the Setup guide.</p> <p>Provided your code is completely and properly structured (e.g., not missing tags or brackets), the following formatting should apply:</p> <ul> <li>Blank lines and indentation</li> <li>Proper spacing around operators, parentheses, and curly brackets</li> <li>Semicolons at the end of statements in JavaScript</li> <li>Single quotes <code>'</code> replaced with double quotes <code>\"</code> in JavaScript</li> </ul> <p>HTML</p> <pre><code>&lt;body&gt;\n  &lt;header&gt;\n    &lt;h1&gt;My Big Project&lt;/h1&gt;\n  &lt;/header&gt;\n\n  &lt;main&gt;\n    &lt;p&gt;Tons of great content here.&lt;/p&gt;\n    &lt;img src=\"headshot.webp\" alt=\"Headshot\" /&gt;\n  &lt;/main&gt;\n\n  &lt;footer&gt;\n    &lt;p&gt;Like and subscribe!&lt;/p&gt;\n  &lt;/footer&gt;\n&lt;/body&gt;\n</code></pre> <p>CSS</p> <pre><code>h1 {\n  color: #ff0000;\n}\n\np {\n  color: #0000ff;\n}\n</code></pre> <p>JavaScript</p> <pre><code>let favoriteFruit = \"apple\";\n\nif (favoriteFruit === \"apple\") {\n  declareLove();\n}\n\nfunction declareLove() {\n  console.log(\"I like apples, too!\");\n}\n</code></pre>"},{"location":"style-guide/#relative-units","title":"Relative Units","text":"<p>Prioritize using relative units in CSS whenever possible to improve responsiveness and consistency in sizing and spacing. Common examples of relative units include:</p> <ul> <li><code>%</code> - Percentage relative to the parent element.</li> <li><code>ch</code> - The width of a character in the element's font size.</li> <li><code>rem</code> - Relative to the root element's font size (the browser default).</li> </ul> <p>When using absolute units, such as <code>px</code>, aim for consistent and logical increments e.g., multiples of 2 or 10. Adopting CSS variables can help with this by allowing you to define and adjust size denominations in one place.</p> <p>You can read more about valid absolute and relative units in this MDN Web Docs reference.</p>"},{"location":"style-guide/#css-style-selectors","title":"CSS Style Selectors","text":"<p>Use element and class selectors, as well as CSS nesting, instead of id selectors in CSS. This approach helps reinforce the separation of concerns by reserving id attributes for assigning HTML elements to variables in JavaScript.</p> <pre><code>/* element selector */\nh2 {\n  color: #0000ff;\n}\n\n/* class selector with nesting */\n.warning {\n  color: #ff0000;\n  font-weight: bold;\n\n  button {\n    background-color: #ff9999;\n  }\n}\n</code></pre>"},{"location":"css/flexbox/","title":"Flexbox","text":"<p>Flexbox is used to create responsive layouts. It is typically considered ideal for 1-dimensional rows or columns, though more complex layouts can be achieved by nesting flexboxes inside of each other.</p> <p>From CSS Tricks' \"CSS Flexbox Layout Guide\":</p> <p>The main idea behind the flex layout is to give the container the ability to alter its items\u2019 width/height (and order) to best fill the available space (mostly to accommodate to all kind of display devices and screen sizes). A flex container expands items to fill available free space or shrinks them to prevent overflow.</p> Flexbox Container (image source: CSS Tricks) Flexbox Items (image source: CSS Tricks) <p>The CSS Tricks article linked above is an excellent reference for all things flexbox. To get started, the following set of seven properties (demonstrated in the example below) can be used to accomplish most layout goals:</p> <p>Container properties:</p> <ul> <li><code>display</code> - Set this property value to <code>flex</code> to create a flexbox container.</li> <li><code>flex-direction</code> - Options are <code>row</code> (the default) or <code>column</code>.</li> <li><code>flex-wrap</code> - By default, flexbox tries to fit everything in one row. Set this property to <code>wrap</code> to allow flex items to wrap into multiple rows as needed (this only works if items have a fixed or minimum size).</li> <li><code>justify-content</code> - Defines the alignment along the main axis.</li> <li><code>align-items</code> - Defines the alignment along the cross axis.</li> <li><code>gap</code> - Controls the space between flex items.</li> </ul> <p>Item properties:</p> <ul> <li><code>flex</code> - Determines how much space an item will occupy proportionally. For example, a flex item with <code>flex: 2</code> will take up twice as much space as a flex item with <code>flex: 1</code>.</li> </ul> <p>When testing responsiveness with embedded CodePen examples, you should open the Pen in its own window by clicking Edit On CodePen, then use your browser's Device Mode (Chromium-based) or Responsive Design Mode (Firefox).</p> <p> See the Pen    Flexbox (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"css/grid/","title":"Grid","text":"<p>Grid is similar to flexbox in that it is used to create responsive layouts that adapt to fill the available space. However, while grid can be used for smaller components, it is a two-dimensional layout system typically adopted for creating larger layouts.</p> <p>The scope of properties and options in grid can be a little overwhelming. As with flexbox, CSS Tricks has an excellent article called \"CSS Grid Layout Guide\" that covers just about everything, but this selection of nine properties (demonstrated in the examples below) will suffice for most basic layout needs:</p> <p>Container properties:</p> <ul> <li><code>display</code> - Set this property value to <code>grid</code> to create a grid container.</li> <li><code>grid-template-columns</code> - Defines the number and size of columns in your grid.</li> <li><code>grid-template-rows</code> - Define the number and size of rows in your grid.</li> <li><code>grid-auto-rows</code> - Specifies the size of any auto-generated grid rows.</li> <li><code>gap</code> - Controls the space between grid rows and columns.</li> <li><code>justify-content</code> - Similar to its use in flexbox, this property sets the alignment of items along the row axis. However, it only has an effect when grid items are sized with non-flexible units, such as <code>px</code>.</li> <li><code>align-items</code> - Similar to its use in flexbox, this property sets the alignment of items along the column axis. However, it only has an effect when grid items within a row have varying heights.</li> </ul> <p>Item properties:</p> <ul> <li><code>justify-self</code> - Aligns a single grid item inside its cell along the row\u00a0axis.</li> <li><code>align-self</code> - Aligns a single grid item inside its cell along the column\u00a0axis.</li> </ul>"},{"location":"css/grid/#flexbox-or-grid","title":"Flexbox or Grid?","text":"<p>If you're not sure whether flexbox or grid is more suitable for your layout needs, consider the following:</p> <ul> <li>Center a single element? Use flexbox.</li> <li>Arranging elements in a single row or column, like a row of photos or inputs? Use flexbox.</li> <li>Expecting the number of elements in your layout to change from time to time? Use grid (or flexbox with wrapping).</li> <li>Planning the overall layout of your page with a header, nav bar, sidebar, footer, and possibly more? Use grid.</li> <li>Creating an asymmetrical or multi-dimensional layout? Use grid.</li> </ul> <p>Ultimately, flexbox can be a bit easier to start with and conceptualize, but grid is more powerful and versatile once you get the basics down. You can always use both in your projects!</p> <p>When testing responsiveness with embedded CodePen examples, you should open the Pen in its own window by clicking Edit On CodePen, then use your browser's Device Mode (Chromium-based) or Responsive Design Mode (Firefox).</p> <p> See the Pen    Grid 1 (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p> <p></p> <p> See the Pen    Grid 2 (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p> <p></p> <p> See the Pen    Grid 3 (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"css/hover/","title":"Hover","text":"<p>A pseudo-class is \"a keyword added to a selector that specifies a special state of the selected element(s)\" (from MDN Web Docs). One of the most useful and familiar pseudo-classes is <code>:hover</code>, which defines the appearance of an element when the user's pointer is hovering over it.</p> <p> See the Pen    :hover (IMS322 docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"css/input-styling/","title":"Input Styling","text":"<p>Styling inputs can be confusing and frustrating. Some familiar style properties such as <code>background-color</code>, <code>color</code>, and <code>font-size</code> work as expected. Other useful selectors, pseudo-classes, and, pseudo-elements for inputs are demonstrated in the example below, including:</p> <ul> <li><code>accent-color</code>: Changes the color of a checked radio button.</li> <li><code>:active</code>: Selects buttons when they are in the active state (during a click, before the mouse is released).</li> <li><code>:focus</code>: Selects inputs when they are in the focus state (i.e., when the cursor is inside the input field)</li> <li><code>outline</code>: Changes the highlight color around inputs when they are in the focus state.</li> <li><code>::placeholder</code>: Selects the placeholder text (set using the <code>placeholder</code> attribute) for styling.</li> </ul> <p>CSS generators can be very heplful when styling inputs. For example, this Style Input Range utility from CSS Portal makes it easy to customize the appearance of sliders.</p> <p> See the Pen    Input Styling (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"css/introduction/","title":"CSS","text":"<p>Before proceeding with the new CSS content on this site, review the material below. This class assumes that you are familiar with these topics from previous classes.</p>"},{"location":"css/introduction/#common-properties","title":"Common Properties","text":"<ul> <li>background-color</li> <li>border</li> <li>color</li> <li>font-family</li> <li>font-size</li> <li>height</li> <li>margin</li> <li>max-height</li> <li>max-width</li> <li>min-height</li> <li>min-width</li> <li>opacity</li> <li>padding</li> <li>text-align</li> <li>width</li> </ul> <p>A comprehensive reference for all CSS properties can be found on MDN Web Docs.</p>"},{"location":"css/introduction/#css-box-model","title":"CSS Box Model","text":"<p>The CSS Box Model describes how margin, border, padding, and content relate to each other in an HTML element.</p> CSS Box Model"},{"location":"css/media-queries/","title":"Media Queries","text":"<p>Media queries allow you to responsively apply different styling depending on a device's screen resolution. Common uses for media queries include adjusting the visibility, size, or orientation (row vs. column) of elements to better fit mobile displays, though any property can be modified as needed.</p> <p>Since our main class projects target display widths of <code>1100px</code> (default), <code>800px</code>, and <code>480px</code>, each assignment template includes predefined media queries for the two smaller values.</p> <p>When testing responsiveness with embedded CodePen examples, you should open the Pen in its own window by clicking Edit On CodePen, then use your browser's Device Mode (Chromium-based) or Responsive Design Mode (Firefox).</p> <p> See the Pen    Media Queries (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"css/nesting/","title":"CSS Nesting","text":"<p>Excerpted from MDN Web Docs \"Using CSS nesting\":</p> <p>The CSS nesting module allows you to write your stylesheets so that they are easier to read, more modular, and more maintainable. As you are not constantly repeating selectors, the file size can also be reduced.</p> <p>You can use CSS nesting to create child selectors of a parent, which in turn can be used to target child elements of specific parents.</p> <p>While CSS nesting may not be appropriate for all situations, one notable benefit is that the structure more closely resembles the corresponding HTML, where child tags/selectors are nested within parent tags/selectors.</p> <p> See the Pen    CSS Nesting 1 (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p> <p>It can also help alleviate the complexity of creating multiple classes, provided that the heirarchy of your document structure is not too complicated. In the example below, a class is only needed for the parent <code>&lt;div&gt;</code>, since the color change will only apply to <code>&lt;p&gt;</code> elements that are children of the <code>dark-bg</code> class.</p> <p> See the Pen    CSS Nesting 2 (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"css/relative-units/","title":"Relative Units","text":"<p>Using relative units by default is recommended in the Style Guide because they can make layout spacing and element sizing more consistent and flexible. In the embedded example below, each <code>&lt;p&gt;</code>, <code>&lt;div&gt;</code>, and <code>&lt;img&gt;</code> is sized using one of the relative units recommended for this class:</p> <ul> <li><code>%</code> - Percentage relative to the parent element.</li> <li><code>ch</code> - The width of a character in the element's font size.</li> <li><code>rem</code> - Relative to the root element's font size (the browser default).</li> </ul> <p>Notice that the elements styled using <code>%</code> are responsive to the width of the window. This is a key component of Responsive Design.</p> <p>When testing responsiveness with embedded CodePen examples, you should open the Pen in its own window by clicking Edit On CodePen, then use your browser's Device Mode (Chromium-based) or Responsive Design Mode (Firefox).</p> <p> See the Pen    Relative Units (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"css/transitions/","title":"Transitions","text":"<p>Setting a transition time (in seconds) allows changes between two states to occur gradually. The example below demonstrates a transition time using the <code>:hover</code> pseudo-class to initiate a change between states.</p> <p>Keep in mind that not all CSS properties are fully animatable with transitions. For example, the last button in the example below attempts to transition using <code>visibility: hidden</code>, but the button appears and disappears inconsistently without a fade animation.</p> <p> See the Pen    CSS Transitions (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"css/variables/","title":"Variables","text":"<p>CSS variables (aka custom properties) can help ensure consistent styling throughout your site. For example, you can apply a specific color in multiple places without needing to remember and type the exact HEX or RGB code each time. Additionally, if you want to test variations for different properties, you only need to change the value once where the CSS variable is declared at the top of the <code>style.css</code> file.</p> <p>Thare are multiple ways to declare CSS variables, but the most common and general-purpose method is within the <code>:root</code> pseudo-element. These variables can then be referenced throughout the rest of the file by their variable name, which should always start with <code>--</code>.</p> <p> See the Pen    CSS Variables (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/Xarrays/","title":"Arrays - XXX","text":"<p>Individual pieces of data can gain more meaning when they are presented in context with other related data. For example, the latitude of the Miami University campus location is 39.511047326918174. Without the corresponding longitude of -84.72907894440365, you might have to traverse the entire planet to find it .</p> <p>Similarly, if you want to analyze trends in enrollment at Miami University, you'll need to look at several years' worth of data in order to get a clear picture.</p> <p></p> <p>In JavaScript, an array is a type of variable used to store sequences of values. Declare an array using the keyword <code>const</code>. The values in the array are surrounded by square brackets and separated by commas.</p> <pre><code>const myArray = [12, 34, 56, 78];\n</code></pre> <p>To read out a single value from the array, you refer to it by the index, which is the location within the array, starting at 0. For example, given myArray above:</p> <pre><code>myArray[0];\n</code></pre> <p>would return the first value: <code>12</code>.</p> <p>Why <code>const</code>?</p> <p>Typically, <code>let</code> is used to declare variables that can be updated while <code>const</code> is for variables that cannot be reassigned.</p> <pre><code>let x = 10;\nx = 11; // This is OK - x is now 11.\n\nconst y = 10;\ny = 11; // This is not OK - it will throw an error.\n</code></pre> <p>Many style guide conventions suggest using <code>const</code> whenever possible as it can help prevent bugs and improve code readability. In fact, there have been many instances in previous class examples and projects where <code>const</code>could have been used - for example, when assigning a variable to an HTML element using <code>document.querySelector()</code>.</p> <pre><code>const textReadout = document.querySelector(\"#text-readout\");\n</code></pre> <p>Even when declared using <code>const</code>, it is still possible to change the values within an array if needed.</p> <pre><code>const myArray = [12, 34, 56, 78];\nmyArray[0] = 99; // This is OK.\n</code></pre> <p> See the Pen    Arrays (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/Xbasic-dom-manipulation/","title":"Basic DOM Manipulation","text":"<p>Although JavaScript was designed as the programming language of the web, HTML and JavaScript are different languages. JavaScript cannot understand HTML the way that it is written.</p> <p>For example, this is not valid JavaScript:</p> <pre><code>let mainHeading = &lt;h1&gt;Welcome&lt;/h1&gt;;\n</code></pre> <p>The Document Object Model, or DOM, is the \"representation of the objects that comprise the structure and content of a document on the web.\" You can think of the DOM as a translation of HTML that JavaScript can understand. It defines:</p> <ol> <li>The HTML elements as objects (the way an HTML element is treated when assigned to a variable).</li> </ol> <pre><code>let mainHeading = document.querySelector(\"#main-heading\");\n</code></pre> <ol> <li>The properties (values or attributes) of HTML elements. Properties can typically be recognized because they appear after a variable name, separated by a <code>.</code></li> </ol> <pre><code>headshotImage.src = \"images/headshot.webp\";\n</code></pre> <ol> <li>The methods (actions) that can be performed on or by HTML elements. Methods can typically be recognized because they appear after a variable name, separated by a <code>.</code>, with <code>()</code> at the end. Many (but not all) methods require an argument inside the <code>()</code> to be passed to the method.</li> </ol> <pre><code>primaryButton.classList.toggle(\"active\");\n</code></pre> <ol> <li>The events that can be fired by HTML elements.</li> </ol> <pre><code>primaryButton.addEventListener(\"click\", toggleState);\n</code></pre>"},{"location":"js/Xbasic-dom-manipulation/#getting-started-with-properties","title":"Getting Started with Properties","text":""},{"location":"js/Xbasic-dom-manipulation/#innertext","title":"innerText","text":"<p>To change the text displayed in an HTML element from JavaScript, assign the <code>innerText</code> property to the desired value:</p> <pre><code>element.innerText = \"Hello!\";\n</code></pre> <p> See the Pen    innerText (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/Xbasic-dom-manipulation/#values","title":"Values","text":"<p>Some HTML elements, notably <code>&lt;input&gt;</code>, have a value attribute which can be read or assigned as a property in JavaScript.</p> <p>Take a look at the 4 sliders below. Each one is give a different initial value attribute in the HTML, which is why they all start at different positions (sliders have a range from 0 to 100 by default).</p> <p> See the Pen    Input Values (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p> <p>These values can be read in JavaScript (e.g. in response to changes to the slider made by the user), but they can also be set from JavaScript.</p> <p> See the Pen    Getting and Setting Values (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/Xbasic-dom-manipulation/#getting-started-with-methods","title":"Getting Started with Methods","text":"<p>Some methods - like <code>document.querySelector()</code>, <code>console.log()</code>, <code>.addEventListener()</code>, and <code>classList.toggle()</code> - get used so frequently that they become second nature. Sometimes you may need to reference online documentation in order to discover the methods (and properties and events) associated with an object. For example, the <code>play()</code> method is mentioned in the Basic Usage section of the MDN Web Docs article on HTML Audio Elements.</p> <p> See the Pen    Audio Element Methods (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/Xbasic-input-validation/","title":"Basic Input Validation","text":"<p>When using entry controls, it is a good idea to validate the input in some way to ensure that it adheres to the desired format or range. Basic validation can be implemented using <code>&lt;input&gt;</code> element attributes.</p>"},{"location":"js/Xbasic-input-validation/#html-form-validation","title":"HTML Form Validation","text":"<p>When put inside a <code>&lt;form&gt;</code> element, many inputs will automatically validate data upon submission based on their type. For example, an input with type <code>email</code> will prompt for a valid email address if one is not provided.</p> <p>FYI, the examples on this page will display an error after clicking \"Submit\" once all fields are completed correctly. This is intentional - the additional steps required to gather all data at once from a <code>&lt;form&gt;</code> will be described in subsequent readings.</p> <p>In this first example:</p> <ul> <li>All 3 inputs are given the <code>required</code> attribute.</li> <li>The input with type <code>email</code> will not accept data unless it is in the user@domain.com format.</li> <li>The input with type <code>number</code> will not accept letters.</li> </ul> <p> See the Pen    Quick Validation (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p> <p>Further customization can be attained by using the <code>pattern</code> attribute to specify the exact format required. However, it must be written as a regular expression (regex), which can be very challenging. A couple of simple examples are shown below, but beyond that you will likely need to search for additional regex patterns online or use AI tools to help design your own.</p> <p> See the Pen    Regex Validation (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/Xclass-toggle/","title":"Class Toggling","text":"<p>If your goal is to change the appearance of a page element (as opposed to the content), one simple way to do so is by toggling a class on or off. Let's start by creating a button that toggles the color of some text between black (the default) and red.</p> <p>Since we will need to reference both the interactive element <code>&lt;button&gt;</code> AND the changing element <code>&lt;p&gt;</code>, they will both need unique id attributes.</p> <pre><code>&lt;button id=\"color-toggle-btn\"&gt;Click Me&lt;/button&gt;\n\n&lt;p id=\"changing-text\"&gt;Hello, world.&lt;/p&gt;\n</code></pre> <p>In CSS, create a class that describes the style changes that should occur on the element <code>&lt;p&gt;</code> when the button is clicked.</p> <pre><code>.red-text {\n  color: red;\n}\n</code></pre> <p>In JavaScript, we have 2 new concepts:</p> <ol> <li>When writing the function, start by creating variables that reference the element(s) that will change when the function runs. In this case, we will be changing the color of the text in the <code>&lt;p&gt;</code> element.</li> <li>We will use the new method <code>classList.toggle()</code> to add/remove the <code>.red-text</code> class.</li> </ol> <pre><code>let colorToggleBtn = document.querySelector(\"#color-toggle-btn\");\n\ncolorToggleBtn.addEventListener(\"click\", colorToggle);\n\nfunction colorToggle() {\n  let changingText = document.querySelector(\"#changing-text\");\n  changingText.classList.toggle(\"red-text\");\n}\n</code></pre> <p> See the Pen    Class Toggle 1 (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/Xclass-toggle/#activeinactive-states","title":"Active/Inactive States","text":"<p>One useful application of <code>classList.toggle()</code> is to think of elements having \"active\" and \"inactive\" states. There is nothing new to the code in this approach - rather, it's just a way for you as the developer to mentally model the interaction states.</p> <p>Let's start by created a text drawer that opens and closes when a button is clicked. This type of interaction may be used to show and hide text that will not be visible all the time.</p> <p>In CSS, define a default or \"active\" state for the element. Here, <code>background-color</code> is applied for illustrative purposes (it will make it easier to see the changes). A <code>transition</code> is applied so that the change will occur gradually rather than immediately. Finally, the <code>overflow: hidden</code> property prevents text from spilling out of the drawer when closed.</p> <pre><code>.open-drawer {\n  background-color: lightblue;\n  max-height: 1.2rem;\n  transition: 0.5s;\n  overflow: hidden;\n}\n</code></pre> <p>To close the drawer, all we have to do is set its <code>max-height</code> to 0.</p> <pre><code>.closed-drawer {\n  max-height: 0;\n}\n</code></pre> <p>Why are we using max-height instead of height? Usually, you would not need to specify a height value for a <code>&lt;p&gt;</code> element as it would be set automatically by the browser. However, in order to have a transition, the element needs a value to transition to/from - <code>auto</code> will not work for this. The reason that we are using <code>max-height</code> instead of <code>height</code> is because then we don't need to be too precise - <code>1.2rem</code> as an approximation is sufficient for displaying all of the text content without creating extra empty space.</p> <p>The rest of the HTML and JavaScript code is essentially the same as the previous example.</p> <p> See the Pen    Class Toggle 2 (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/Xevent-listeners/","title":"Event Listeners","text":"<p>An event is a signal that something has happened in the browser. There are several triggers for events, some that occur automatically (e.g. the load event fires when the page has finished loading), and others that occur in response to an interaction from the user (e.g. the click event fires when the user clicks on a page element). In this class, we will primarily be focussed on the latter category.</p> <p>In order to make something happen in response to an event, we need to attach an event listener to the interactive element in JavaScript.</p>"},{"location":"js/Xevent-listeners/#adding-an-event-listener","title":"Adding an Event Listener","text":"<p>As with many coding scenarios, there are multiple ways to approach browser-based interaction development. For consistency and simplicity, the recommended procedure for this class is as follows:</p> <ol> <li>Declare a variable to reference the interactive element.</li> <li>Write a function that defines what should happen when the interaction occurs.</li> <li>Add an event listener that calls the function.</li> </ol>"},{"location":"js/Xevent-listeners/#step-1-declare-a-variable-to-reference-the-interactive-element","title":"Step 1: Declare a variable to reference the interactive element","text":"<p>In addition to the data types that we have already covered (number, string, boolean, etc.), a variable can also be assigned to an HTML element.</p> <pre><code>let myButton = document.querySelector(\"#my-button\");\n</code></pre> <p>Notice that the argument of this method begins with <code>#</code>, which is the CSS selector for ids - this implies that the element we are trying to reference should have a matching id attribute.</p> <pre><code>&lt;button id=\"my-button\"&gt;Click Me&lt;/button&gt;\n</code></pre> <p>Also notice that the naming convention for the id in HTML (and where it is used in <code>querySelector</code>) is kebab-case, while the variable name in JavaScript is camelCase. I recommend using the same words for both the id and the variable name, but styled appropriately (kebab-case or camelCase, based on location in code).</p>"},{"location":"js/Xevent-listeners/#step-2-write-a-function-that-defines-what-should-happen-when-the-interaction-occurs","title":"Step 2: Write a function that defines what should happen when the interaction occurs","text":"<p>In this simple example, we will log the message \"Button was clicked!\"\" to the console.</p> <pre><code>function wasClicked() {\n  console.log(\"Button was clicked!\");\n}\n</code></pre>"},{"location":"js/Xevent-listeners/#step-3-add-an-event-listener-that-calls-the-function","title":"Step 3: Add an event listener that calls the function","text":"<p>The event listener should be added to the element that fires the desired event - in this case, the element that the user interacts with, which is a button. As previously mentioned, there are many different kinds of events that can be listened for - we will specifically be listening for the click event.</p> <pre><code>myButton.addEventListener(\"click\", wasClicked);\n</code></pre> <p>Notice that this statement begins with the variable name that we created in step 1. The <code>addEventListener()</code> method is given 2 arguments: the event type to listen for (<code>\"click\"</code>), followed by the name of the function we created in step 2 (<code>wasClicked</code>).</p> <p>Click the button in the example below. Remember, you'll need to open the console in order to see the results.</p> <p> See the Pen    Event Listener (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/Xfor-loops/","title":"For Loops","text":"<p>For loops are used to execute a block of code a number of times. It is built using 3 expressions:</p> <pre><code>for (expression 1; expression 2; expression 3) {\n  // code block to be executed\n}\n</code></pre> <ul> <li>Expression 1 is executed (one time) before the execution of the code block. Typically, this is used to initialize a counter variable at 0. Conventionally, this variable is named <code>i</code>.</li> <li>Expression 2 defines the condition for executing the code block. Essentially, it determines the number of times the code block will be executed.</li> <li>Expression 3 is executed (every time) after the code block has been executed. This is typically written as <code>i++</code> to increment the counter variable.</li> </ul> <p> See the Pen    For Loops (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p> <p>The counter variable can be used in arithmetic expressions like any other number.</p> <p> See the Pen    For Loops Accumulator (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p> <p>The counter variable can be also be used as an index number to lookup each value in an array.</p> <p> See the Pen    For Loops and Arrays (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/Xfor-loops/#for-of-loops","title":"For Of Loops","text":"<p>Arrays are an example of something that is iterable. This means that we can iterate over all of the values of an array using a\u00a0<code>for...of</code>\u00a0loop.</p> <pre><code>for (const variable of iterable) {\n  // do something multiple time, once for each value in the sequence\n}\n</code></pre> <p>In the example presented above, the placeholder <code>iterable</code> would be replaced by the source of the sequence e.g. the variable name of your array. The placeholder <code>variable</code> becomes a temporary variable within the loop that receives a new value from the sequence on each iteration.</p> <p>This can be a little tricky to picture mentally, so let's walk though this example:</p> <pre><code>const myArray = [12, 34, 56, 78];\n\nfor (const m of myArray) {\n  console.log(m);\n}\n</code></pre> <p>In this case, the source of the sequence is the variable <code>myArray</code>. The <code>for of</code> loop will run 4 times because there are 4 values in the <code>myArray</code> sequence. Each time the loop runs, <code>m</code> will represent the value of each successive value in the array, starting at <code>12</code>, then <code>34</code>, then <code>56</code>, etc.</p> <p>Why did we call the temporary variable <code>m</code>? Any name is valid, though it is common to see the first letter of the array name used as the temporary variable. Or, in the case of an array with a plural variable name, the singular could be used as the name for the temporary variable.</p> <pre><code>const months = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\"\n];\n\nfor (const month of months) {\n  console.log(month);\n}\n</code></pre> <p> See the Pen    For Of Loops (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/Xmanipulating-style-properties/","title":"Manipulating Style Properties","text":"<p>In general, it is recommended to change styling with <code>classList.toggle()</code> or <code>classList.add()</code> and <code>classList.remove()</code> when possible, especially if alternating between 2 states. However, when more direct or continuous control is required, <code>style.setProperty()</code> may be a better fit.</p> <pre><code>element.style.setProperty(\"property-name\", \"value\");\n</code></pre> <p>The <code>\"property-name\"</code> string can be any familiar CSS styling property, like <code>\"background-color\"</code> or <code>\"font-size\"</code>. For <code>\"value\"</code>, units will usually need to be appended using string concatenation e.g. by adding <code>\"px\"</code> or <code>\"rem\"</code> to the end of a variable or number.</p> <p> See the Pen    Manipulating Style Properties (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/Xmodals/","title":"Modals","text":"<p>A modal is a pop-up that appears on top of the current page and takes priority, meaning that it prevents interaction with the underlying content until it is submitted or closed.</p>"},{"location":"js/Xmodals/#the-dialog-element","title":"The <code>&lt;dialog&gt;</code> element","text":"<p>Designing and implementing modals recently became much easier with changes to the standard <code>&lt;dialog&gt;</code> element. It now includes default properties and methods that make it fairly easy to use and customize, especially for gathering user-submitted information.</p> <p>The <code>&lt;dialog&gt;</code> element can be styled like any other element, including <code>border</code>, <code>background-color</code>, <code>box-shadow</code>, and more. The <code>::backdrop</code> pseudo-element selects the backdrop displayed behind a modal while it is open. Modals can be displayed and dismissed using the <code>showModal()</code> and <code>close()</code> methods, respectively.</p> <p>Typically, <code>&lt;form&gt;</code> elements have a default behavior when submitted that requires additional server infrastructure to receive and process data - this is why you may have seen an error when clicking \"Submit\" in previous reading examples. However, when put in a modal with the attribute <code>method=\"dialog\"</code>, the default <code>&lt;form&gt;</code> behavior is blocked, values from inputs in the form can be referenced locally with JavaScript, and the modal will close automatically upon submission.</p> <p> See the Pen    Modals (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/Xmore-controls/","title":"More Controls","text":"<p>Buttons are the simplest form of control or input type. They present only one choice: to click or not to click, no other information or decision-making required.</p> <p>There are many HTML input types that vary in their complexity and intended application. Whenever possible, the type of input presented to the user should be the best fit for the information being collected. For example, a generic text input field does not provide a built-in way to provide a list of predetermined choices, while a dropdown menu or group of radio buttons is impractical for a very large number of options.</p> <p>This page provides an overview of some commonly used input types. A full reference for all valid input types can be found here.</p>"},{"location":"js/Xmore-controls/#selection-controls","title":"Selection Controls","text":"<p>A selection control allows the user to choose from a group of predetermined choices. The type of selection control presented in the example below, radio buttons, are typically best for multiple-choice style questions in which only one choice can be selected at a time.</p> <p>Some important things to note about radio buttons:</p> <ul> <li>The <code>name</code> attribute given to the radio buttons is what groups them together so that only one can be selected at a time.</li> <li>Each radio button is paired with a <code>&lt;label&gt;</code> element to provide text instructions or descriptions. The <code>for</code> attribute of each <code>&lt;label&gt;</code> should be the same as the <code>id</code> of the corresponding radio button.</li> <li>The <code>value</code> attribute is should be gathered in JavaScript. It does not need to be the same as the <code>&lt;label&gt;</code> text.</li> <li>Since there are multiple radio buttons in a set, it can be a tricky to find the value of a checked radio button in JavaScript, especially when used with a single submit button. The recommendation is to use <code>document.querySelector(\"input[type='radio']:checked\")</code>.</li> </ul> <p> See the Pen    Selection Controls (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/Xmore-controls/#list-controls","title":"List Controls","text":"<p>List controls allow users to select from a small set of text strings, each representing a command, object, or attribute. The dropdown menu in the example below is created using <code>&lt;select&gt;</code> tags instead of <code>&lt;input&gt;</code> tags. Each item in the dropdown menu is created by adding <code>&lt;option&gt;</code> elements as children.</p> <p>Some important things to note about <code>&lt;select&gt;</code> dropdown menus:</p> <ul> <li>Like radio buttons, the <code>value</code> attribute is what will typically be gathered in your JavaScript. This does not need to be the same as the displayed text.</li> <li>It is recommended to put instructions in the first <code>&lt;option&gt;</code> with an empty <code>value</code> since it will be the first thing the user sees by default. and force them to make a selection.</li> </ul> <p> See the Pen    List Controls (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/Xmore-controls/#entry-controls","title":"Entry Controls","text":"<p>Entry controls enable users to supply their own value. The most basic entry control is the <code>&lt;input&gt;</code> element with type attribute <code>text</code>. However, there are other entry control types that may be better suited to different types of data. For example, the <code>email</code> type provides an easy way to check for valid email address formatting, while the <code>number</code> type adds increment and decrement buttons and minimum and maximum attributes.</p> <p>The <code>placeholder</code> attribute of entry controls is also very useful. Placeholder text can provide instructions or hints without the need for a separate <code>&lt;label&gt;</code> element, which can reduce clutter.</p> <p> See the Pen    Entry Controls (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/Xmore-dom-manipulation/","title":"More DOM Manipulation","text":"<p>If you recall from a previous reading, the DOM (Document Object Model) is \"the data representation of the objects that comprise the structure and content of a document on the web.\"</p> <p>You can think of the structure of the DOM in terms of parents and children using a diagram like this:</p> <p></p> <p>There are 3 child elements in the <code>&lt;body&gt;</code> of the diagram - an <code>&lt;h1&gt;</code>, <code>&lt;p&gt;</code>, and <code>&lt;img&gt;</code> - each which also have their own attributes and inner text. The corresponding HTML would look something like this:</p> <pre><code>&lt;body&gt;\n  &lt;h1&gt;My Site&lt;/h1&gt;\n  &lt;p&gt;Blah blah blah blah blah blah&lt;/p&gt;\n  &lt;img src=\"pic.webp\" /&gt;\n&lt;/body&gt;\n</code></pre> <p>Take a look at the following example - how would you describe the structure in terms of parents and children? You can probably make some guesses just by looking at the results, but you should open the inspector and/or look at the HTML to confirm.</p> <p> See the Pen    Parent-Child (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p> <p>Each <code>&lt;img&gt;</code> has a <code>&lt;figcaption&gt;</code> sibling, both of which are children of a <code>&lt;figure&gt;</code> element, which are themselves children of the <code>&lt;div&gt;</code> flex row. Or, looking at it from the other direction, the <code>&lt;div&gt;</code> flex row is the parent element containing 3 <code>&lt;figure&gt;</code> children, which each contain one <code>&lt;img&gt;</code> child element and one <code>&lt;figcaption&gt;</code> child element. </p>"},{"location":"js/Xmore-dom-manipulation/#creating-elements-and-appending-children","title":"Creating Elements and Appending Children","text":"<p>If you were given a large collection of images in a folder to display in a responsive gallery site, you might manually create flexboxes for rows, <code>&lt;figure&gt;</code> or <code>&lt;div&gt;</code> elements for image containers, and <code>&lt;img&gt;</code> elements in your HTML. But what if you were running a website for a cafe that featured different specials and events each week? Might it be easer to automatically generate the HTML with some information about the images in the folder?</p> <p>Let's start with a single photo. If you were to create an object that describes a single photo from Lorem Picsum, it might look like this:</p> <pre><code>const photo = {\n  url: \"https://picsum.photos/id/292/800/600.webp\",\n  alt: \"onion and peppercorns\",\n  caption: \"Onion and Peppercorns.\"\n};\n</code></pre> <p>You can use JavaScript to create each required element using the <code>createElement()</code> method and set the required attributes:</p> <pre><code>const figureElement = document.createElement(\"figure\");\nconst imageElement = document.createElement(\"img\");\nconst captionElement = document.createElement(\"figcaption\");\n\n// sets src attribute to \"https://picsum.photos/id/292/800/600.webp\"\nimageElement.src = photo.url;\n// sets alt text attribute to \"onion and peppercorns\"\nimageElement.alt = photo.alt;\n// sets inner text of &lt;figcaption&gt; to \"Onion and Peppercorns.\"\ncaptionElement.innerText = photo.caption;\n</code></pre> <p>Then, you can use the <code>appendChild()</code> method to append the <code>&lt;img&gt;</code> and <code>&lt;figcaption&gt;</code> elements to the <code>&lt;figure&gt;</code> element and the <code>&lt;figure&gt;</code> element to the <code>&lt;body&gt;</code> (see example below).</p> <p> See the Pen    Creating and Appending Elements (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/Xmore-dom-manipulation/#creating-and-appending-elements-in-a-for-of-loop","title":"Creating and Appending Elements in a For Of Loop","text":"<p>In the example below, an array containing objects is used to generate elements for a flexbox-based row of photos. Each object contains information about the photo source (url), alt text, and caption text.</p> <p> See the Pen    Generating a Photo Row with a For Of Loop (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/Xobjects/","title":"Objects","text":"<p>We recently learned that arrays are useful for storing sequences of related data, such as GPS coordinates, enrollment figures, names of the months in a year, etc.</p> <pre><code>const miamiCoordinates = [39.511047326918174, -84.72907894440365];\n\nconst miamiEnrollment = [21627, 20613, 20784, 20384, 20036];\n\nconst months = [\"January\", \"February\", \"March\", \"April\", \"May\"]; // etc\n</code></pre> <p>The type of data and the relationship that those items have to each other suggest that an array is a suitable way to organize and store those items. They fall into a series and can be easily referenced using only the index number (e.g. <code>months[0]</code> for the first month of the year, <code>months[1]</code> for the second month of the year, etc).</p> <p>You may want to store multiple pieces of data about a subject that don't necessarily belong in a sequence. For example, general information about Miami University looks kind of strange in an array.</p> <pre><code>const miamiOh = [\"Public\", 1809, \"Oxford, OH\", \"Division I\"];\n</code></pre> <p>While you can likely guess what each item in that array means, it isn't the most obvious or meaningful way to store that specific information. Also, it can become confusing to refer to non-sequential data by index number.</p> <pre><code>miamiOh[2]; // returns \"Oxford, OH\" - but what does that mean?\n</code></pre> <p>For cases like this, the object data type is a better fit. Objects store data as key/value pairs.</p> <pre><code>// format is key: value\n\nconst miamiOh = {\n  type: \"Public\", // type is key, \"Public\" is value\n  established: 1809, // established is key, 1809 is value\n  location: \"Oxford, OH\", // location is key, \"Oxford, OH\" is value\n  ncaa: \"Division I\" // ncaa is key, \"Division I\" is value\n};\n</code></pre> <p>The key provides context for the values in a way that the generic index numbers of an array do not. You can reference the individual values of an object using dot notation.</p> <pre><code>miamiOh.type; // returns \"Public\"\nmiamiOh.established; // returns 1809\n</code></pre> <p>You have already been interfacing with objects in the JavaScript code that you've been developing. Essentially, any time you have written something using dot notation, that is a reference to a property (characteristic) or method (action it can perform) of an object.</p> <pre><code>// the querySelector() method of the document object\ndocument.querySelector(\"text-input\");\n\n// the innerText property of the textInput object\ntextInput.innerText;\n</code></pre> <p> See the Pen    Objects (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/conditionals/","title":"Conditionals","text":"<p>Conditionals (aka \"if statements\") give you the ability to make decisions. With an if statement, you can evaluate whether or not a condition is true and, if so, run a specific section of code.</p> <pre><code>if (condition) {\n  // do this stuff if true\n}\n</code></pre> <p>You can require multiple conditions with <code>&amp;&amp;</code> or allow for either/or with <code>||</code>.</p> <pre><code>if (condition1 &amp;&amp; condition2) {\n  // do this stuff only if both conditions are true\n}\n\nif (condition1 || condition2) {\n  // do this stuff if either condition1 or condition2 is true\n}\n</code></pre> <p>You can also create multiple branches with <code>else</code> or <code>else if</code>.</p> <pre><code>if (condition1) {\n  // do this stuff if condition1 is true\n} else if (condition2) {\n  // do this stuff if condition2 is true\n} else {\n  // do this stuff if neither condition1 or condition2 is true\n}\n</code></pre>"},{"location":"js/conditionals/#comparison-operators","title":"Comparison Operators","text":"<p>Specify conditions for if statement expressions using the following comparison operators:</p> <ul> <li>Strict equal <code>===</code></li> <li>Not equal <code>!=</code></li> <li>Greater than <code>&gt;</code></li> <li>Greater than or equal\u00a0<code>&gt;=</code></li> <li>Less than <code>&lt;</code></li> <li>Less than or equal <code>&lt;=</code></li> </ul> <p>For example, this tests whether the variable <code>x</code> is greater than 10:</p> <pre><code>const x = 11;\n\nif (x &gt; 10) {\n  console.log(\"You win!\");\n}\n</code></pre> <p>This checks to see whether the string variable is exactly \"Eric\":</p> <pre><code>const myName = \"Eric\";\n\nif (myName === \"Eric\") {\n  console.log(\"Hey, that is my name, too!\");\n}\n</code></pre> <p>Try changing the comparison operators and operands of the conditionals in the example below and see if the result matches your expectations.</p> <p> See the Pen    Conditionals (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/data-types/","title":"Data Types","text":"<p>Data stored in variables are always of a certain type. When operating on data in JavaScript, results will depend on the types of the operands (the variables on either side of the operator) used in the expression.</p> <p>Given the prompt \"add 40 and 2,\" the results are predictable because the operands 40 and 2 are both of the type number. However, a request to \"add 40 and elephant\" may not have an obvious response, because... \"elephant\" is obviously not a number.</p> <p>While it is important to be aware of these data types, you do not have to specify the type when declaring variables in JavaScript, which is required in some other languages. JavaScript is a dynamically typed language, which means that types are automatically inferred based on the assigned value.</p> <p>There are 8 different data types in JavaScript:</p> <ol> <li>Number</li> <li>String</li> <li>Boolean</li> <li>Object</li> <li>Null</li> <li>Undefined</li> <li>BigInt</li> <li>Symbol</li> </ol> <p>For this class, you will be working directly with the first four - Number, String, Boolean, and Object.</p> <p>You should also know about the Null and Undefined types since they may appear in error messages when troubleshooting.</p> <p>The BigInt and Symbol types are a bit more esoteric and will likely not be relevant to your work in this class, though they are included below for comprehensiveness.</p>"},{"location":"js/data-types/#number","title":"Number","text":"<pre><code>const myNumber = 42;\n</code></pre>"},{"location":"js/data-types/#string","title":"String","text":"<p>A string is a sequence of one or more text characters. When declaring a variable that is intended to be a string, surround the value with double quotes, as seen below.</p> <pre><code>const myMessage = \"Hello, my name is Eric.\";\n</code></pre>"},{"location":"js/data-types/#boolean","title":"Boolean","text":"<p>The boolean type has only 2 possible values - <code>true</code> or <code>false</code>. Since these values are not strings, they do not require double quotes around the value.</p> <pre><code>const isRaining = false;\n\nconst isSunny = true;\n</code></pre>"},{"location":"js/data-types/#object","title":"Object","text":"<p>An object stores collections of data in key:value pairs. Objects can be very complex and powerful, but a very basic example might describe the properties of an item, like a car or laptop. In this case, each key on the left describes the category of the stored value on the right.</p> <pre><code>const myLaptop = {\n  manufacturer: \"Apple\",\n  model: \"MacBook Air\",\n  year: 2020,\n  processor: \"M1\",\n  color: \"Space Gray\"\n};\n</code></pre> <p>Notice the following characteristics that are crucial for declaring objects:</p> <ul> <li>The key:value pairs are enclosed by curly braces <code>{}</code>.</li> <li>Each key is named, but they not require double quotes since they are not technically strings.</li> <li>The key and value are separated by a colon <code>:</code>.</li> <li>Each key:value pair is separared by a comma <code>,</code>.</li> </ul> <p>You can reference the individual values of an object using dot notation.</p> <pre><code>myLaptop.manufacturer; // returns \"Apple\"\nmyLaptop.year; // returns 2020\n</code></pre>"},{"location":"js/data-types/#null","title":"Null","text":"<p>Null represents an empty or unknown value.</p> <pre><code>&lt;button id=\"play-button\"&gt;Play&lt;/button&gt;\n\n&lt;p&gt;Lorem ipsum blah blah blah.&lt;/p&gt;\n</code></pre> <pre><code>const myElement = document.querySelector(\"#does-not-exist\");\n\nconsole.log(myElement); // logs null\n</code></pre>"},{"location":"js/data-types/#undefined","title":"Undefined","text":"<p>Undefined often occurs if a variable is declared but has not been assigned a value.</p> <pre><code>const myVariable;\n\nconsole.log(myVariable); // logs \"undefined\"\n</code></pre>"},{"location":"js/data-types/#bigint","title":"BigInt","text":"<p>As the name suggests, the BigInt type is used to store very large integer values. The standard number type is only accurate up to 15 digits, so BigInt is required for larger values. To declare a BigInt, add an <code>n</code> to the end of the value.</p> <pre><code>const largeNumber = 999999999999999; // 15 digits\nconsole.log(largeNumber); // logs 999999999999999\n\nconst wrongNumber = 9999999999999999; // 16 digits\nconsole.log(wrongNumber); // logs 10000000000000000, no longer accurate\n\nconst bigNumber = 9999999999999999n; // 16 digits with an n at the end declares as BigInt\nconsole.log(bigNumber); // logs 9999999999999999n, which is accurate\n\nconsole.log(bigNumber + 1); // causes a TypeError since we're trying to add a BigInt and a number\n\nconsole.log(bigNumber + 1n); // logs 10000000000000000n, which is accurate\n</code></pre>"},{"location":"js/data-types/#symbol","title":"Symbol","text":"<p>Symbols are a relatively new primitive data type in JavaScript. Every symbol is unique, even if they are created with the same description.</p> <pre><code>const symbol1 = Symbol(\"hello\");\nconst symbol2 = Symbol(\"hello\");\n// symbol1 is not equal to symbol2\n</code></pre> <p>Symbols are often used to prevent clashes between property names (the keys) in objects. They will likely not be useful for your work in this class nor appear in any example code.</p>"},{"location":"js/data-types/#example-code","title":"Example Code","text":"<p>Try changing the variable values in the JavaScript below.</p> <p>When using the console with embedded CodePen examples, you should open the Pen in its own window by clicking Edit On CodePen and then clicking the Console button in the CodePen editor.</p> <p> See the Pen    Data Types (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/functions/","title":"Functions","text":"<p>Functions are reusable blocks of code designed to perform a specific task or group of related tasks. You can accomplish a lot without writing your own functions, but they can help reduce redundancies and are crucial for some of the workflows in this class.</p>"},{"location":"js/functions/#declaring-functions","title":"Declaring Functions","text":"<p>To use a cooking analogy... think of the function writing process kind of like training a fellow cook on a recipe.</p> <p>First, you would need to define and teach them the individual steps in the process:</p> <ol> <li>Chop stuff.</li> <li>Saut\u00e9 and simmer.</li> <li>Season to taste.</li> </ol> <p>Then, in the future, you could simply ask: Can you please make some marinara sauce?</p> <p>Start your function declaration with the <code>function</code> keyword and a name (using the naming conventions from our Style Guide), then follow with parentheses and curly braces. The individual steps of your function go inside of the curly braces.</p> <pre><code>function makeSauce() {\n  console.log(\"Chop stuff\");\n  console.log(\"Saut\u00e9 and simmer\");\n  console.log(\"Season to taste\");\n}\n</code></pre> <p>Function declarations can go anywhere in your JavaScript, though I recommend putting them at the bottom of your <code>script.js</code> file for consistency.</p>"},{"location":"js/functions/#calling-functions","title":"Calling Functions","text":"<p>Declaring a function does not actually run the code in the function. To execute a function, call it using the function name and parentheses:</p> <pre><code>makeSauce();\n</code></pre> <p>When using the console with embedded CodePen examples, you should open the Pen in its own window by clicking Edit On CodePen and then clicking the Console button in the CodePen editor.</p> <p> See the Pen    Function Declaration (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/introduction/","title":"JavaScript","text":"<p>Coming soon...</p>"},{"location":"js/operators/","title":"Operators","text":"<p>In other examples, you have already seen 2 operators that have fairly obvious functions: <code>+</code> for addition and <code>=</code> for assigning values, as seen in the expression:</p> <pre><code>let y = x + 10;\n</code></pre> <p>Many other JavaScript operators are similarly self-explanatory, though there are a few useful ones that may require additional explanation.</p>"},{"location":"js/operators/#arithmetic-operators","title":"Arithmetic Operators","text":"<p>The standard arithmetic operators are</p> <ul> <li>Addition <code>+</code></li> <li>Subtraction <code>-</code></li> <li>Multiplication <code>*</code></li> <li>Division <code>/</code></li> </ul> <p>Some of the other useful arithmetic operators in JavaScript:</p> <ul> <li>Modulo <code>%</code> (returns the remainder of dividing two numbers)</li> <li>Increment <code>++</code> (increases avalue by 1)</li> <li>Decrement <code>--</code> (decreases a value by 1)</li> </ul> <pre><code>const x = 24 % 7; // x is 3\nx++; // x is now 4\nx--; // x is now 3 again\n</code></pre>"},{"location":"js/operators/#assignment-operators","title":"Assignment Operators","text":"<p>Assignment operators execute an arithmetic operation and assignment in one step.</p> <pre><code>let x = 7;\nx += 3; // x is now 10\n</code></pre> <p>Other assignment operators include:</p> <ul> <li>Subtraction assignment <code>-=</code></li> <li>Multiplication assignment <code>*=</code></li> <li>Division assignment <code>/=</code></li> <li>Remainder assignment <code>%=</code></li> </ul>"},{"location":"js/operators/#string-concatenation","title":"String Concatenation","text":"<p>When working with strings, <code>+</code> is the concatenation operator, joining strings together. String concatenation can be used to insert variable values into longer messages.</p> <pre><code>const myName = \"Eric\";\nconst welcomeMessage = \"Welcome, \" + myName + \".\";\nconsole.log(welcomeMessage); // logs \"Welcome, Eric.\" to the console\n</code></pre> <p>When using the console with embedded CodePen examples, you should open the Pen in its own window by clicking Edit On CodePen and then clicking the Console button in the CodePen editor.</p> <p> See the Pen    Operators 1 (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p> <p></p> <p> See the Pen    Operators 2 (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/using-the-console/","title":"Using the Console","text":"<p>The console is part of the Developer Tools in your browser. Although anyone can open the developer tools, the console is generally not viewed by users. Take a moment right now to make sure that you can find your browser's console.</p> <p>One of the main purposes of the console is to display messages for developers. These messages can include automatically generated warnings and errors, but you can also manually log information using the <code>console.log()</code> method.</p> <p>CodePen has its own simplified console. You will still see console output from your Pen in the the browser\u2019s developer tools, just be aware that there will likely be additional messages that were not created by the JavaScript in your Pen, which may be confusing.</p> <p>When using the console with embedded CodePen examples, you should open the Pen in its own window by clicking Edit On CodePen and then clicking the Console button in the CodePen editor.</p> <p> See the Pen    Console (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/variables/","title":"Variables","text":"<p>A variable is a named container for data. The name of the variable is up to you (take a look at naming guidelines in the Style Guide), but ideally it is something easy to write and remember that also relates to the data being stored.</p> <p>To declare a variable, start with the keyword <code>const</code> (for values that will not change) or <code>let</code> (for values that will change) and assign the value with <code>=</code>.</p> <pre><code>const profName = \"Eric\"; // will never change\nlet profCity = \"Oxford\"; // may change in the future\nconst x = 2021; // terrible variable name, what is it for?\nconst year = 2021; // not a great variable name, too generic\nconst yearHired = 2021; // better variable name\n</code></pre> <p>When using the console with embedded CodePen examples, you should open the Pen in its own window by clicking Edit On CodePen and then clicking the Console button in the CodePen editor.</p> <p> See the Pen    Variables (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/old/Xtimed-functions/","title":"Timed Functions","text":"<p>There are often instances where your application requires something to occur at a regular time interval regardless of user activity. Some examples include:</p> <ul> <li>An autosave function that automatically saves the user's work every 5 minutes.</li> <li>A timer that reports elapsed time while taking a quiz.</li> <li>An app that automatically checks the internet for new Taylor Swift news every minute.</li> </ul> <p>In these scenarios, the <code>setInterval()</code> method can be used to repeatedly call a function with a specific delay between each call.</p>"},{"location":"js/old/Xtimed-functions/#setinterval","title":"setInterval()","text":"<p>Writing functions to be called by <code>setInterval()</code> is no different than writing them for other methods (like event listeners). The difference is primarily in how the function is called.</p> <pre><code>setInterval(function, delay);\n</code></pre> <p>The delay is expressed in milliseconds, so <code>1000</code> is equivalent to 1 second.</p> <p> See the Pen    setInterval Random (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p> <p>In the example below, the <code>setProperty()</code> method is introduced as a way to manually change a single style property from JavaScript.  You should aim to use class toggling to change styling whenever possible. However, <code>setProperty()</code> is required if you want to provide different values depending on other conditions. <pre><code>element.style.setProperty(propertyName, value);\n</code></pre> The <code>propertyName</code> argument can be any familiar CSS styling property formatted as a string, like <code>\"background-color\"</code> or <code>\"font-size\"</code>. For <code>value</code>, you will usually need to use string concatenation to append units e.g. add <code>\"px\"</code> or <code>\"rem\"</code> to the end of a number.</p> <p>The <code>shift</code> function is called every second to randomly move the text by changing the <code>translate</code> property, while the <code>spin</code> function is called every 10ms to continuously rotate the bar. Notice how <code>\"px\"</code> and <code>\"deg\"</code> are concatenated to the variables in JavaScript before they are passed as arguments to <code>setProperty()</code>.</p> <p> See the Pen    setInterval with setProperty (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"js/old/Xtimed-functions/#clearinterval","title":"clearInterval()","text":"<p>Each <code>setInterval()</code> method returns a unique ID. Assign this ID to a variable and use it later with <code>clearInterval()</code> if you need to cancel the original timed action.</p> <p> See the Pen    clearInterval Random (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"ref/additional-resources/","title":"Additional Resources","text":"<p>If you are interested in additional help, review, or inspiration, you may find the links below to be useful.</p>"},{"location":"ref/additional-resources/#videos-for-tutorials-tips-and-inspiration","title":"Videos for Tutorials, Tips, and Inspiration","text":"<ul> <li>Kevin Powell</li> <li>Web Dev Simplified</li> <li>CSS Tricks</li> </ul>"},{"location":"ref/additional-resources/#mdn-web-docs","title":"MDN Web Docs","text":"<ul> <li>HTML Elements Reference</li> <li>CSS Reference</li> <li>JavaScript Basics</li> </ul>"},{"location":"ref/additional-resources/#css-tricks","title":"CSS Tricks","text":"<ul> <li>CSS Flexbox Layout Guide</li> <li>CSS Grid Layout Guide</li> </ul>"},{"location":"ref/ai/","title":"Aritifical Intelligence","text":"<p>Excerpted from the course syllabus:</p> <p>I encourage the use of AI tools as companions to help brainstorm, troubleshoot, and proofread. However, it is important that you meet assignment objectives and submit quality work. While I cannot cover every scenario, here are a few suggestions and requirements:</p> <ul> <li>Write specific and detailed prompts.</li> <li>Verify facts, statistics, or procedures independently.</li> <li>Start with your own ideas, then use AI to assist with revisions.</li> <li> <p>You must provide sources for any AI-generated content. Failure to do so will prompt further investigation and may be considered an act of academic dishonesty.</p> <ul> <li>For IMS322: If using GitHub Copilot, export the session as a .json file by opening the Command Palette in VS Code and running \"Chat: Export Session\u2026\" Save this file in your project folder before submission.</li> <li>For other courses: If using ChatGPT, there is an option to share a link to each chat session. Include this link somewhere in your submitted materials.</li> </ul> </li> </ul>"},{"location":"ref/browser-review/","title":"Browser Review","text":"<p>As discussed during Setup, browsers are built on different engines. Most things will similarly across all browsers, but you may occasionally encounter situations where an element or style renders differently, or a feature want to use has not yet been implemented.</p> <p>The content covered in this class has been selected to ensure support across all modern browsers. However, unexpected quirks or surprises may still arise. If you're troubleshooting a problem in Chrome and can't find the cause in your code, try opening your project in Firefox (or vice versa). You may find that it works as expected in a different browser, which will help you focus on addressing specific cross-browser compatibility issues.</p>"},{"location":"ref/browser-review/#developer-tools","title":"Developer Tools","text":"<p>All modern browsers have built-in Developer Tools to assist with development. While many features of Developer Tools will not be covered this semester, it is essential to be familiar with the following concepts:</p> <ul> <li>Finding the Developer Tools.</li> <li>Viewing and editing the HTML content of an open page.</li> <li>Viewing and editing the CSS of an open page.</li> <li>Opening a page in Device Mode or Responsive Design Mode, which allows you to test your site at different screen sizes and orientations.</li> </ul> <p>The links below cover these topics for Chrome and Firefox. If you are using a different Chromium-based browser, such as Edge or Brave, the Chrome documentation should be similar enough to get you started, but you may want to look for specific documentation for those browsers as well.</p> <p>Chrome:</p> <ul> <li>Open Chrome DevTools</li> <li>View and Change the DOM (HTML)</li> <li>View and Change CSS</li> <li>Simulate Mobile Devices with Device Mode (Responsive Design Mode)</li> </ul> <p>Firefox:</p> <ul> <li>Open the Inspector</li> <li>UI Tour of the Inspector</li> <li>Examine and Edit HTML</li> <li>Examine and Edit CSS</li> <li>Responsive Design Mode</li> </ul>"},{"location":"ref/html-review/","title":"HTML Review","text":""},{"location":"ref/html-review/#basic-elements","title":"Basic Elements","text":"<p>You should be familiar with all of the tags listed below, which have been excerpted from Kevin Powell's \"The Only Tags You Need to Know (for now).\"</p> <ul> <li>Metadata tags: <code>&lt;html&gt;</code> <code>&lt;head&gt;</code> <code>&lt;title&gt;</code> <code>&lt;link&gt;</code> <code>&lt;body&gt;</code></li> <li>Content tags: <code>&lt;h1&gt;</code>...<code>&lt;h6&gt;</code> <code>&lt;p&gt;</code> <code>&lt;a&gt;</code> <code>&lt;ol&gt;</code> <code>&lt;ul&gt;</code> <code>&lt;li&gt;</code> <code>&lt;span&gt;</code> <code>&lt;img&gt;</code></li> <li>Layout tags: <code>&lt;header&gt;</code> <code>&lt;main&gt;</code> <code>&lt;footer&gt;</code> <code>&lt;nav&gt;</code> <code>&lt;article&gt;</code> <code>&lt;section&gt;</code> <code>&lt;div&gt;</code></li> </ul>"},{"location":"ref/html-review/#semantic-html","title":"Semantic HTML","text":"<p>Semantic HTML tags describe the contents of the element and improve accessibility for people that use screen readers. Try to use the most appropriate tags whenever possible.</p> <p>Examples of semantic tags include:</p> <ul> <li><code>&lt;form&gt;</code> (contains a collection of inputs)</li> <li><code>&lt;h1&gt;</code> (contains the top-level page heading)</li> <li><code>&lt;main&gt;</code> (identifies the main content area of the page)</li> <li><code>&lt;nav&gt;</code> (contains links to navigate the site)</li> </ul> <p>Examples of generic tags:</p> <ul> <li><code>&lt;span&gt;</code></li> <li><code>&lt;div&gt;</code></li> </ul>"},{"location":"ref/html-review/#attributes","title":"Attributes","text":"<p>You will likely need use all of these attributes in your projects throughout the semester:</p> <ul> <li><code>alt</code>: alternate text for an <code>&lt;img&gt;</code> tag</li> <li><code>class</code>: for use as a selector in CSS</li> <li><code>href</code>: url for <code>&lt;a&gt;</code> tags</li> <li><code>id</code>: for use as a query in JavaScript</li> <li><code>src</code>: path to image to be displayed for <code>&lt;img&gt;</code> tags</li> </ul>"},{"location":"ref/introduction/","title":"Reference","text":"<p>This section of the site provides several miscellaneous resources, including review content, policies, recommended procedures, and external utilities.</p> <p>Directory</p> <ul> <li>Additional Resources: Links to other good online resources for learning HTML, CSS, and JavaScript.</li> <li>Aritifical Intelligence: A copy of the Artificial Intelligence policy for this class (duplicated from the syllabus).</li> <li>Browser Review: Basic information about different browser types and their built-in development tools.</li> <li>HTML Review: Things to review in HTML to refresh your memory from previous classes.</li> <li>Miscellaneous Examples: A collection of various \"how-to\" examples.</li> <li>Optimizing Images: Information about effectively preparing images and implementing them in HTML and CSS.</li> <li>Utilities: Some recommended applications and online tools to help with development.</li> </ul>"},{"location":"ref/misc-examples/","title":"Miscellaneous Examples","text":"<p>This page includes a collection of basic examples for unique scenarios that fall outside of the regular course content. They will not be covered during class but can be adopted and modified for assignments as needed.</p>"},{"location":"ref/misc-examples/#wireframe-outlines","title":"Wireframe Outlines","text":"<p>This example is intended to help clarify the relationship between a wireframe and the resulting HTML structure. Notice that there are boxes drawn around every part of the wireframe that corresponds with a discrete element in the HTML. For example, in order to achieve the desired alignment of the contents inside the question button (space between) and address the indicator from JavaScript for the open/close transition (the + sign), they are each different elements inside the <code>&lt;button&gt;</code>.</p> <p> See the Pen    Wireframe Outlines (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p> Wireframe Example <p>Although color-coded boxes are important for clarity, it is perfectly appropriate to use the same color for sibling elements (those that occur at the same hierarchical level in the HTML, like the 2 elements inside the button).</p> Wireframe Example with Outlines"},{"location":"ref/misc-examples/#click-to-reveal","title":"Click to Reveal","text":"<p>Uses <code>position: absolute</code> to place one element on top of another, then changes the top element's opacity to make it appear as though the bottom element is being revealed. Be very careful when using <code>position: absolute</code>. It should only be implemented when absolutely necessary. Layout positioning may become unpredictable when modifying the position property. For additional information, reference this MDN Web Docs article.</p> <p> See the Pen    Click to Reveal (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"ref/misc-examples/#plus-minus-indicator","title":"Plus-Minus Indicator","text":"<p>Uses <code>position: absolute</code> to draw a separate vertical line on top of a horizontal line (both created using <code>&lt;div&gt;</code> elements) in order to independently change only the vertical line and create a smooth transition from + to -.</p> <p> See the Pen    Plus-Minus Indicator (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"ref/misc-examples/#working-with-background-images","title":"Working with Background Images","text":"<p> See the Pen    Background Images (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"ref/misc-examples/#date-formatting","title":"Date Formatting","text":"<p> See the Pen    Date Formatting (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"ref/misc-examples/#flex-wrap-sizing","title":"Flex-wrap Sizing","text":"<p>When wrapping items in a flexbox, one of the challenges is to create items with flexible yet consistent widths, especially when there are fewer items on the bottom row. The approach used in this example (adapted from the GameStop site) uses media queries to set the <code>width</code> of items to progressively smaller <code>%</code> based on window width.</p> <p>There are a couple of accommodations that need to be made when calculating widths this way in a flexbox:</p> <ul> <li>The flexbox <code>gap</code> property cannot be used reliably when attempting to divide the row evenly with <code>%,</code> so we've simulated the gap by putting the items in <code>div</code> containers and adding <code>padding</code> to the container.</li> <li>Since this also means that the <code>padding</code> doubles up between items, side padding is added to the flexbox row to compensate.</li> </ul> <p> See the Pen    Flex-wrap Sizing (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"ref/optimizing-images/","title":"Optimizing Images","text":""},{"location":"ref/optimizing-images/#image-resolution-and-compression","title":"Image Resolution and Compression","text":"<p>Although internet speeds are much faster than they used to be, it is still important to reduce image file sizes if possible with suitable resolution and compression settings.</p> <p>For resolution, you should consider how much of the browser window your images will cover (in pixels), and then double that value when cropping or downloading image files. Assuming a maximum <code>1100px</code> layout width:</p> <ul> <li>An image that will span the entire body should have a width around <code>2200px</code>.</li> <li>An image that will span half the body (e.g. in a 2-column layout) should have a width around <code>1100px</code>.</li> <li>An image that will span 1/3 the body (e.g. in a 3-column layout) should have a width around <code>734px</code>.</li> <li>When using images from Lorem Picsum, specify the desired resolution in the url.</li> <li>When using images downloaded from Unsplash, another stock photo site, or your own original image files, resize them using Squoosh or your preferred photo editing application before incorporating them into your project.</li> </ul> <p>There are several different types of image compression codecs suitable for web development. For simplicity, all images used in your projects should be in the WebP format.</p> <ul> <li>When using images from Lorem Picsum, simply add <code>.webp</code> to the end of the url.</li> <li>When using images downloaded from Unsplash, another stock photo site, or your own original image files, choose WebP when compressing your files using Squoosh or your preferred photo editing application before incorporating them into your project.</li> </ul>"},{"location":"ref/optimizing-images/#image-containers","title":"Image Containers","text":"<p>It is highly recommended to style all <code>&lt;img&gt;</code> elements with <code>width: 100%</code> and wrap them in a parent container like <code>&lt;div&gt;</code> or, if captions are needed, <code>&lt;figure&gt;</code>. This will often make it easier to attain the desired size, position, and aspect ratio with responsive layouts and is generally all that is needed when putting multiple images in a flexbox or grid layout. If other size conditions are required, like <code>min-width</code> or <code>max-width</code>, these should be applied to the parent container.</p> <p> See the Pen    Image Containers (IMS322 Docs) by Eric Sheffield (@ersheff)   on CodePen. </p>"},{"location":"ref/utilities/","title":"Utilities","text":""},{"location":"ref/utilities/#color","title":"Color","text":"<ul> <li>Color Picker: Quick color reference and RGB/HEX converter.</li> <li>Mac Digital Color Meter: Mac application to find values for any onscreen color.</li> <li>Windows Color Picker utility: Windows application to find values for any onscreen color.</li> </ul>"},{"location":"ref/utilities/#images","title":"Images","text":"<ul> <li>Lorem Picsum: Source for hosted stock images (primarily for use with CodePen).</li> <li>Squoosh: Image resizing, cropping, and compression.</li> <li>Unsplash: Source to download free high-quality stock images.</li> </ul>"},{"location":"ref/utilities/#css-generators","title":"CSS Generators","text":"<p>Tools that help generate complicated CSS code to achieve a specific look.</p> <ul> <li>Box Shadow</li> <li>Gradient</li> <li>Slider</li> <li>More at CSS Portal</li> </ul>"},{"location":"ref/utilities/#miscellaneous","title":"Miscellaneous","text":"<ul> <li>AudioMass: Simple audio editing and conversion.</li> </ul>"}]}